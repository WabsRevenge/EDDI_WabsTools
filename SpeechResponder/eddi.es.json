{
  "name": "Shirka_Odyssey",
  "description": "Shirka v5.2.1",
  "scripts": {
    ".Preferencias": {
      "name": ".Preferencias",
      "description": "Edita aquí el comportamiento que tendrá Shirka",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ ======================================================================================== _}\r\n{_ En este fichero se encuentran todas las preferencias que usa Shirka en sus scripts\t\t_}\r\n{_ Edita las variables según tus gustos siguiendo las indicaciones\t\t\t\t\t\t\t_}\r\n{_ ======================================================================================== _}\r\n\r\n\r\n{_ CRÉDITOS DE SHIRKA:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ La personalidad SHIRKA es un conjunto de scripts creados por mucha gente,\t\t\t\t_}\r\n{_ entre ellos se encuentran:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ Los desarroladroes de EDDI por la personalidad por defecto\t\t\t\t\t\t\t\t_}\r\n{_ El CMDT Altair28 por la traducción y adaptación de esa personalidad al español\t\t\t_}\r\n{_ El CMDT Hoksilato por reconvertir la personalidad de Altair al nuevo EDDI multi-idioma\t_}\r\n{_ y crear un pack de fácil instalación con los perfiles de VoiceAttack y otros programas\t_}\r\n{_ El CMDT Elpiratejo y el CMDT 7x5 por la ayuda prestada a Hoksilato en dicha conversión\t_}\r\n{_ El CMDT Transcan (el que escribe) que ha tomado el relevo del proyecto y ha añadido su\t_}\r\n{_ toque particular para que Shirka sea más \"humana\" y hasta un poco sarcástica\t\t\t\t_}\r\n{_\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ Quisiera expresar mi agradecimiento (a parte de a los anteriormente mencionados) a:\t\t_}\r\n{_   Mis compañeros de Explorers of the Anarchy por hacerme de betatesters, por sus\t\t\t_}\r\n{_   aportaciones en ideas y su apoyo moral. En especial a:\t\t\t\t\t\t\t\t\t_}\r\n{_\t\tCMDT Nuredunna, CMDT Giordano Albino, CMDT Cardelo y CMDT Santibor\t\t\t\t\t_}\r\n{_   Y a todos los miembros del foro de Frontier por su feedback e ideas. En particular a:\t_}\r\n{_\t\tCMDT Zasca y CMDT Finosuke Noara\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ \t\t\t\tDesde este sitio oculto que nadie se lee... ¡MUCHAS GRACIAS!\t\t\t\t_}\r\n\r\n\r\n\r\n{_ ============= Preferencias: Selección de Preajustes ============================================================ _}\r\n{_ Los preajustes se usan para cambiar varias configuraciones a la vez. Por ejemplo:\t\t\t\t\t\t\t\t_}\r\n\r\n{_ El preajuste de exploración \"rápida\" omite todos los informes suplementarios y únicamente da información\t\t\t_}\r\n{_ referente a cuerpos valiosos y sus rendimientos. Shirka es más concisa y va \"al grano\"\t\t\t\t\t\t\t_}\r\n\r\n{_ En cambio el preset de exploración \"turista\", amplía al máximo todos los informes, conviertiendo a Shirka en\t\t_}\r\n{_ una guía turistica de los sistemas que nos vamos encontrando.\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n{_ Si no se especifica ningún preset se usarán los valores indicados en este script\t\t\t\t\t\t\t\t\t_}\r\n{_ Puedes saber que presets existen y crear los tuyos propios yendo al final de este script\t\t\t\t\t\t\t_}\r\n\r\n{set presetExploracion to \"\"}\r\n\r\n\r\n{_ ============= Preferencias: Sarcásmo de SHIRKA ================================================================= _}\r\n\r\n{set ShirkaSarcastica to 1}\t\t\t\t{_ 1 para activar el toque sarcástico de Shirka y los easter eggs\t\t\t_}\r\n\r\n\r\n{_ ============= Preferencias: Lista de palabras a corregir su pronunciación ====================================== _}\r\n{_ La primera columna es la palabra a corregir, la segunda columna es como debería leerse. EN MINÚSCULAS!           _}\r\n{_ Se pueden usar tags SSML.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n{set palabrasErroneas to [\r\n    \"disruptor\":    \"disrruptor\",\r\n\t\"escape\":\t\t\"eskape\",\r\n\t\"novgorod\":\t\t\"nofgorod\",\r\n\t\"tatji\":\t\t\"tatlli\",\r\n\t\"uke mebes\":\t\"uqué meves\",\r\n\t\"atun\":\t\t\t\"átun\",\r\n\t\"beacon\":       \"bicon\",\r\n\t\"installation\": \"instaleision\",\r\n]}\r\n\r\n\r\n{_ ============= Preferencias: función esFemenino() =============================================================== _}\r\n{_ Lista de excepciones femeninas singular y plural (y sin acentos en caso de haberlos para simplificar código)\t\t_}\r\n{_ Esta lista se usa para forzar la asignación a femenino de aquellas palabras irregulares\t\t\t\t\t\t\t_}\r\n\r\n{set excepcionesF to [\r\n    \"actividad\", \"actividades\",\r\n    \"aleación\", \"aleacion\", \"aleaciones\",\r\n\t\"elección\", \"eleccion\", \"elecciones\",\r\n\t\"emisión\", \"emision\", \"emisiones\"\r\n\t\"estación\", \"estacion\", \"estaciones\",\r\n\t\"facción\", \"faccion\", \"facciones\",\r\n\t\"libertad\", \"libertades\",\r\n    \"matriz\", \"matrices\",\r\n    \"mega-nave\", \"mega-naves\",\r\n    \"protoaleaciones\",\r\n    \"red\", \"redes\",\r\n    \"unidad\", \"unidades\",\r\n]}\r\n\r\n{_ Lista de excepciones masculinas singular y plural (y sin acentos en caso de haberlos para simplificar código)\t_}\r\n{_ Esta lista se usa para forzar la asignación a masculino de aquellas palabras irregulares\t\t\t\t\t\t\t_}\r\n\r\n{set excepcionesM to [\r\n    \"planeta\", \"planetas\"\r\n]}\r\n\r\n\r\n{_ ============= Preferencias: función esValioso() ================================================================ _}\r\n{_ Esta función considera valioso a un cuerpo si este cumple al menos una de las siguientes condiciones\t\t\t\t_}\r\n\r\n{set reportTerraformables to true}\t\t{_ true si quieres considerar valiosos los terraformables o terraformados   _}\r\n{set highValueThreshold to 500000}\t\t{_ Valor de exploración mínimo para ser reportado como valioso\t\t\t\t_}\r\n{set recommendAlreadyMapped to true}    {_ true, recomienda cuerpos que ya han sido mapeados por otros jugadores    _}\r\n\r\n{_ En la siguiente lista, pon a true los tipos que quieres considerar como valiosos\t\t\t\t\t\t\t\t\t_}\r\n{set reportPlanetTypes to [\r\n    \"Mundo de amoníaco\": true,\r\n    \"Mundo similar a la Tierra\": true,\r\n    \"Mundo acuático\": true,\r\n    \"Gigante gaseoso con vida basada en el amoníaco\": false,\r\n    \"Gigante gaseoso con vida basada en el agua\": false,\r\n    \"Gigante gaseoso de Helio\": false,\r\n    \"Gigante gaseoso rico en Helio\": false,\r\n    \"Mundo de alto contenido metálico\": false,\r\n    \"Cuerpo helado\": false,\r\n    \"Cuerpo con alto contenido metálico\": false,\r\n    \"Cuerpo rocoso\": false,\r\n\t\"Mundo helado rocoso\": false,\r\n    \"Gigante gaseoso de Clase 1\": false,\r\n    \"Gigante gaseoso de Clase 2\": false,\r\n    \"Gigante gaseoso de Clase 3\": false,\r\n    \"Gigante gaseoso de Clase 4\": false,\r\n    \"Gigante gaseoso de Clase 5\": false,\r\n    \"Gigante acuático\": false,\r\n    \"Gigante acuático con vida\": false,\r\n]}\r\n\r\n\r\n{_ =========== Preferencias: Asteroid Porspected ================================================================== _}\r\n{_ Este script es ejecutado al usar un dron de prospección\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n{set minimumPercent to 10}\t\t\t\t{_ El porcentaje mínimo de concentración de mineral para ser avisado \t\t_}\r\n\r\n{_ De que tipos de núcleo queremos ser informados \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{set spokenCores to [\r\n    \"Alejandrita\": false,\r\n    \"Benitoíta\": false,\r\n    \"Grandidierita\": false,\r\n    \"Diamantes de baja temperatura\": true,\r\n    \"Monacita\": false,\r\n    \"Musgravita\": false,\r\n    \"Rhodplumsita\": false,\r\n    \"Serendibita\": false,\r\n    \"Void Opals\": true,\r\n]}\r\n\r\n{_ De que minerales queremos ser informados (aplicando el porcetaje mínimo anterior)\t\t\t\t\t\t\t\t_}\r\n{set spokenMinerals to [\r\n    \"Bauxita\": false,\r\n    \"Bertrandita\": false,\r\n    \"Bromelita\": false,\r\n    \"Cobalto\": false,\r\n    \"Coltán\": false,\r\n    \"Criolita\": false,\r\n    \"Galita\": false,\r\n    \"Oro\": false,\r\n    \"Goslarita\": false,\r\n    \"Peróxido de hidrógeno\": false,\r\n    \"Indita\": false,\r\n    \"Jadeita\": false,\r\n    \"Lepidolita\": false,\r\n    \"Hidróxido de litio\": false,\r\n    \"Oxígeno líquido\": false,\r\n    \"Diamantes de baja temperatura\": true,\r\n    \"Hidrato de metano\": false,\r\n    \"Cristales de monohidrato de metanol\": false,\r\n    \"Moissanita\": false,\r\n    \"Osmio\": false,\r\n    \"Painita\": true,\r\n    \"Platino\": false,\r\n    \"Paladio\": false,\r\n    \"Praseodimio\": false,\r\n    \"Pirofilita\": false,\r\n    \"Rutilo\": false,\r\n    \"Samario\": false,\r\n    \"Plata\": false,\r\n    \"Taafeíta\": false,\r\n    \"Torio\": false,\r\n    \"Tritio\": true,\r\n    \"Uraninita\": false,\r\n    \"Agua\": false,\r\n]}\r\n\r\n\r\n{_ =========== Preferencias: Body atmosphere report =============================================================== _}\r\n{_ Este script es ejecutado durante la ejecución del script Body Report (informe completo detallado de un cuerpo)\t_}\r\n\r\n{set reportAtmoPressure to 1}\t\t\t{_ 1 si quieres escuchar datos de la presión atmosférica\t\t\t\t\t_}\r\n{set reportAtmoTemperature to 2}\t\t{_ 0 si no quieres escuchar las temperaturas de los cuerpos\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si quieres escuchar las temperaturas en Kelvin\t\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si quieres escuchar las temperaturas en Celsius\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 3 si quieres escuchar las temperaturas en Fahrenheit\t\t\t\t\t\t_}\r\n\r\n\r\n\r\n{_ =========== Preferencias: Body mapped ========================================================================== _}\r\n{_ Este script se ejecuta al finalizar un mapeado de superficie\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ AVISO: Preferencias sólo para naves configuradas con el rol de exploración o de multipropósito\t\t\t\t\t_}\r\n\r\n{_ En todas las opciones de \"frecuencia\": 0 desactiva esa opción y 1 aplica esa opción\t\t\t\t\t\t\t\t_}\r\n\r\n{set reportEficiencia to 4}\t\t\t\t{_ Frecuencia (1 entre X) del informe de bonos de eficiencia\t\t\t\t_}\r\n{set reportPrimerMapeo to 1}\t\t\t{_ Frecuencia (1 entre X) del informe de los bonos por primer mapeado\t\t_}\r\n{set reportValue to 1}\t\t\t\t\t{_ 1 si quieres ser informado del valor total conseguido del cuerpo mapeado\t_} \r\n\r\n{set bodyReport to 2}\t\t\t\t\t{_ Configura que tipo de informe deseas escuchar al finalizar un mapeo\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 0 si no quieres ningún informe\t\t\t\t\t\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si quieres el informe corto de excepcionalidades\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si quieres el informe completo detallado\t\t\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 3 si quiere ambos informes\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 4 si quieres un informe aleatorio\t\t\t\t\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ Cualquier otro número si quieres un informe aleatorio incluido ninguno\t_}\r\n\r\n{set recommendOtherMapping to 1}\t \t{_ 1 si quieres un recordatorio de los valiosos que te faltan por mapear\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ al finalizar un mapeo\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n\r\n{_ =========== Preferencias: Body materials report ================================================================ _}\r\n{_ Ejecutado (según nuestras preferencias) por:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ Body report summary (informe de excepcionalidades) y Body report (informe completo detallado)\t\t\t\t\t_}\r\n{_ Mirar pestaña de \"Monitor de Materiales\" de EDDI para entender cuales son los valores \"mínimos\" y \"deseados\"\t\t_}\r\n\r\n{set reportMats to 2}\t\t\t\t\t{_ 0 si quieres un aviso si el material está por debajo del \"mínimo\"\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si quieres un aviso si el material está por debajo de lo \"deseado\"\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si siempre quieres informe sin importar el inventario\t\t\t\t\t_}\r\n\r\n{set reportMatConc to 2}\t\t\t\t{_ 0 si quieres escuchar concentraciones de materiales de alto nivel\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si quieres informe de concentraciones de materiales altos y medios\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si quieres informe de concentraciones de todos los materiales\t\t\t_}\r\n\r\n{set reportMatPercent to 1}\t\t\t\t{_ 0 si NO quieres oir el porcentaje de los materiales\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si solo quieres oir el porcentaje de materiales de alta calidad\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si quieres oir el porcentaje de los materiales altos y medios\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 3 si quieres oir el porcentaje de todos los materiales presentes\t\t\t_}\r\n\r\n{_ =========== Preferencias: Body report ========================================================================== _}\r\n{_ Informe completo detallado de un cuerpo invocable a voluntad durante un escaneado, un mapeado o mediante VA\t\t_}\r\n\r\n{set reportGravity to 1}\t\t\t\t{_ 1 se deseas información sobre de la gravedad\t\t\t\t\t\t\t\t_} \r\n{set reportRings to 1}\t\t\t\t\t{_ 1 si deseas información sobre los anillos\t\t\t\t\t\t\t\t_}\r\n{set reportTerraformState to 1}\t\t\t{_ 1 si deseas información sobre el estado de terraformación\t\t\t\t_}\r\n{set reportLandable to 1}\t\t\t\t{_ 1 si deseas información sobre si es o no aterrizable\t\t\t\t\t\t_}\r\n{set reportRotation to 1}\t\t\t\t{_ 1 si deseas información sobre la rotación\t\t\t\t\t\t\t\t_}\r\n{set reportVolcanism to 1}\t\t\t\t{_ 1 si deseas información sobre si tiene vulcanismo\t\t\t\t\t\t_}\r\n{set reportAtmosphere to 1}\t\t\t\t{_ 1 si deseas información sobre la atmósfera\t\t\t\t\t\t\t\t_}\r\n\r\n{set reportMaterials to 2}\t\t\t\t{_ 0 si no deseas un informe sobre los materiales\t\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si deseas un informe sobre los materiales\t\t\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si sólo deseas el informe de materiales si el cuerpo tiene vulcanismo\t_}\r\n\r\n{set reportScanValue to 1}\t\t\t\t{_ 1 si deseas saber el valor actual aproximado del cuerpo\t\t\t\t\t_}\r\n\r\n\r\n{_ =========== Preferencias: Body report summary ================================================================== _}\r\n{_ Informe corto de características y de excepcionalidades de un cuerpo invocable a voluntad al terminar un\t\t\t_}\r\n{_ escaneado, un mapeado o mediante VoiceAttack\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n{set reportSummaryPlanetTypes to 1}\t\t{_ 1 para informar de si es tipo tierra o acuáticos\t\t\t\t\t\t\t_}\r\n{set reportSummaryTerraformables to 1}\t{_ 1 para informar del estado de terraformación\t\t\t\t\t\t\t\t_}\r\n{set reportNotableMass to 1}\t\t\t{_ 1 para informar de masas notables (en masas terrestres)\t\t\t\t\t_}\r\n{set reportNotableRadius to 1}\t\t\t{_ 1 para informar de radios notables (en kilómetros)\t\t\t\t\t\t_}\r\n{set reportNotableDensity to 1}\t\t\t{_ 1 para informar de densidades notables (en kilogramos por metro cúbico)\t_}\r\n{set reportNotableGravity to 1}\t\t\t{_ 1 para informar de gravedades notables (en G) para cuerpos aterrizables\t_}\r\n{set reportSummaryMaterials to 0}\t\t{_ 1 para informar de materiales según preferencias\t\t\t\t\t\t\t_}\r\n{set reportSummaryVolcanism to 1}\t\t{_ 1 para informar del vulcanismo en planetas aterrizables\t\t\t\t\t_}\r\n{set reportSummaryRings to 1}\t\t\t{_ 1 para informar de los detalles de los anillos\t\t\t\t\t\t\t_}\r\n{set reportInterestingOrbits to 1}\t\t{_ 1 para informar de órbitas interesantes\t\t\t\t\t\t\t\t\t_}\r\n{set reportRapidRotation to 1}\t\t\t{_ 1 para informar de cuerpos con rotaciones muy rápidas\t\t\t\t\t_}\r\n\r\n{set reportSummaryTemperature to 2}\t\t{_ 1 para escuchar la temperatura del cuerpo en Kelvin\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 para escuchar la temperatura del cuerpo en Celsius\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 3 para escuchar la temperatura del cuerpo en Fahrenheit\t\t\t\t\t_}\r\n\r\n{set reportExtremes to 1}\t\t\t\t{_ 0 si no quieres ser informado de las características notables\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si quieres un informe de los cuerpos extremadamente raros\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si quieres un informe de los cuerpos realmente raros\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 3 si quieres un informe de cualquiera que se salga de la media\t\t\t_}\r\n\r\n\r\n{_ =========== Preferencias: Body scanned ========================================================================= _}\r\n{_ Este script se ejecuta al finalizar un escaneado con el ECS o al descubrir un cuerpo al acercarte a él\t\t\t_}\r\n{_ AVISO: Preferencias sólo para naves configuradas con el rol de exploración o de multipropósito\t\t\t\t\t_}\r\n\r\n{set reportPlanetType to 0}\t\t\t\t{_ 0 si sólo quieres escuchar el nombre corto del cuerpo escaneado\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si siempre deseas escuchar el tipo de cuerpo escaneado\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si quieres cualquiera de las opciones anteriores aleatoriamente\t\t_}\r\n\r\n{set reportSummary to 1}\t\t\t\t{_ 1 si deseas un informe de las rarezas del cuerpo tras ser escaneado\t\t_}\r\n\r\n\r\n{_ =========== preferencias: Commodity sold ======================================================================= _}\r\n{_ Este script se ejecuta al vender mercancías\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n{set antiSlavery to 1}\t\t\t\t\t{_ 1 si quieres cambiar el mensaje de venta de esclavos por \"liberación\"\t_}\r\n\r\n\r\n{_ =========== Preferencias: Crime check station ================================================================== _}\r\n{_ Se ejecuta al entrar en las proximidades de una stación o al entrar en el juego estando aparcado en una\t\t\t_}\r\n\r\n{set suggestSurrender to 0}\t\t\t\t{_ 1 para que Shirka sugiera tu entrega si estás buscado por la policía\t\t_}\r\n\r\n{_ =========== Preferencias: Discovery scan ======================================================================= _}\r\n{_ Se ejecuta al usar el escaner de systema (el Honk)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n{set reportMaterials to 1}\t\t\t\t{_ 1 para avisar de los lugares en los que recolectar materiales\t\t\t_}\r\n\r\n{_ =========== Preferencias: Report last scan value =============================================================== _}\r\n{_ Ejecutado al escanear estrellas y cuerpos, o mediante VoiceAttack\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n{set reportMaxValue to 1}\t\t\t\t{_ 1 para saber el valor máximo (con mapeo) del cuerpo recién escaneado \t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 0 para saber el valor actual (solo escaneo) del cuerpo recién escaneado\t_}\r\n\r\n\r\n{_ =========== Preferencias: Signal detected ====================================================================== _}\r\n{_ Ejecutado al detectar una señal\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ AVISO: Por limitaciones de la versión actual de EDDI no funciona muy bien y repite los mensajes demasiadas veces\t_}\r\n\r\n{_ Pon a true aquellas señales de las que deseas ser avisado cuando son detectadas por primera vez en un sistema.\t_}\r\n{_ De lo contrario, sólo se anunciarán las fuentes detectadas durante los modos ECS y Superficie.\t\t\t\t\t_}\r\n{set spokenSources to [\r\n    \"Anomalía\": true,\r\n    \"Baliza comercial\": false,\r\n    \"Baliza de comunicaciones no registrada\": true,\r\n    \"Baliza de navegación\": false,\r\n    \"Baliza de navegación comprometida\": false,\r\n    \"Comunicaciones ceremoniales\": false,\r\n    \"Emisiones codificadas\": false,\r\n    \"Emisiones degradadas\": false,\r\n    \"Emisiones de alta calidad\": true,\r\n    \"Fenómeno Estelar Notable\": true,\r\n    \"Llamada de auxilio\": true,\r\n    \"Lugar de extracción\": false,\r\n    \"Lugar de extracción de alta densidad\": false,\r\n    \"Lugar de extracción de baja densidad\": false,\r\n    \"Lugar de extracción peligroso\": false,\r\n    \"Nave Capital\": false,\r\n    \"Objetivo de la misión\": true,\r\n    \"Patrón de convoy\": false,\r\n    \"Puesto de escucha\": true,\r\n    \"Restos recuperables\": true,\r\n    \"Resultado de combate\": false,\r\n    \"Señal Biológica de Superficie\": true,\r\n    \"Señal Geológica de Superficie\": true,\r\n    \"Señal de Superficie Guardián\": true\r\n    \"Señal de Superficie Humana\": false,\r\n    \"Señal de Superficie Thargoide\": true,\r\n    \"Señal no humana\": true,\r\n    \"Señal no identificada\": false,\r\n    \"Uso de armas\": false,\r\n    \"Zona de combate de alta intensidad\": false,\r\n    \"Zona de combate de baja intensidad\": false,\r\n    \"Zona de combate de intensidad media\": false,\r\n    \"Zona de conflicto AX\": true,\r\n]}\t\t\t\t\t\t\t\t\t\t\r\n\r\n\r\n{_ =========== Preferencias: Star report ========================================================================== _}\r\n{_ Ejecutado al finalizar el escaneo/detección de una estrella o mediante VoiceAttack\t\t\t\t\t\t\t\t_}\r\n{_ AVISO: Preferencias sólo para naves configuradas con el rol de exploración o de multipropósito\t\t\t\t\t_}\r\n\r\n{_ En todas las opciones de \"frecuencia\": 0 desactiva esa opción y 1 aplica esa opción\t\t\t\t\t\t\t\t_}\r\n\r\n{set reportAge to 2}\t\t\t\t\t{_ Frecuencia (1 entre X) del informe de la edad de la estrella\t\t\t\t_}\r\n{set reportChromaticity to 5}\t\t\t{_ Frecuencia (1 entre X) del informe del color de la estrella\t\t\t\t_}\r\n{set reportNotables to 1}\t\t\t\t{_ Frecuencia (1 entre X) del informe de características de la estrella\t\t_}\r\n{set reportScanValue to 8}\t\t\t\t{_ Frecuencia (1 entre X) del informe del valor de la estrella\t\t\t\t_}\r\n{set reportHabZone to 5}\t\t\t\t{_ Frecuencia (1 entre X) del informe de la zona habitable del sistema\t\t_}\r\n{set mainSequenceFrequency to 2}\t\t{_ Frecuencia (1 entre X) del mensaje de estrella de secuencia principal\t_}\r\n\r\n{_ =========== Preferencias: System materials report ============================================================== _}\r\n{_ Ejecutado (según nuestras preferencias) por:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ Discovery scan (cuando se escanea el sistema) y System scan complete (cuando se completa de escanear un sistema)\t_}\r\n{_ Mirar pestaña de \"Monitor de Materiales\" de EDDI para entender cuales son los valores \"mínimos\" y \"deseados\"\t\t_}\r\n\r\n{set reportSystemMats to 2} \t\t\t{_ 0 si quieres un aviso si el material está por debajo del \"mínimo\"\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si quieres un aviso si el material está por debajo de lo \"deseado\"\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si siempre quieres informe sin importar el inventario\t\t\t\t\t_}\r\n\r\n{set reportSystemMatConc to 0}\t\t\t{_ 0 si quieres escuchar concentraciones de materiales de alto nivel\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si quieres informe de concentraciones de materiales altos y medios\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si quieres informe de concentraciones de todos los materiales\t\t\t_}\r\n\r\n{_ =========== Preferencias: System scan complete ================================================================= _}\r\n{_ Ejecutado al finalizar el escaneo de un sistema\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n{_ AVISO: Preferencias sólo para naves configuradas con el rol de exploración o de multipropósito\t\t\t\t\t_}\r\n\r\n{set reportGreenSystems to 1} \t\t\t{_ 1 para avisar si el sistema contiene elementos para sintesis de salto\t_}\r\n{set reportGoldSystems to 1}  \t\t\t{_ 1 para avisar si el sistema contiene todos los elementos disponibles\t\t_}\r\n{set reportMaterials to 1}\t\t\t\t{_ 1 para recomendar lugares para recolección de materiales\t\t\t\t\t_}\r\n{set reportBodiesToMap to 1}\t\t\t{_ 1 para recomendar cuerpos para mapear\t\t\t\t\t\t\t\t\t_}\r\n\r\n\r\n{_ =========== Preferencias: Touchdown ============================================================================ _}\r\n{_ Ejecutado al aterrizar en un planeta\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_}\r\n\r\n{set reportCoordinates to 1}\t\t\t{_ 1 para reportar las coordenadas de la nave\t\t\t\t\t\t\t\t_}\r\n{set reportTemperature to 2}\t\t\t{_ 0 para no reportar la temperatura esterna (para misiones a pie)\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 1 si quieres escuchar las temperaturas en Kelvin\t\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 2 si quieres escuchar las temperaturas en Celsius\t\t\t\t\t\t_}\r\n\t\t\t\t\t\t\t\t\t\t{_ 3 si quieres escuchar las temperaturas en Fahrenheit\t\t\t\t\t\t_}\r\n\r\n\r\n\r\n\r\n\r\n{_ ============= Preferencias: Preajustes ========================================================================= _}\r\n{_ Como puedes ver los resets no son más que un conjunto de variables ajustadas de cierta manera.\t\t\t\t\t_}\r\n{_ Puedes añadir tu propio preset o modificar los actuales a tu gusto añadiendo variables o editando las existentes\t_}\r\n\r\n{set presetExploracion to lcase(presetExploracion)}\r\n\r\n{if presetExploracion = \"rápida\" || presetExploracion = \"rapida\":\r\n{_ Preset orientado a exploración de Road2Riches, por ejemplo. Desactiva informes e información no necesaria\t\t_}\r\n\r\n\t{set reportEficiencia to 0}\r\n\t{set reportPrimerMapeo to 0}\r\n\t{set reportValue to 1}\r\n\t{set bodyReport to 0}\r\n\t{set recommendOtherMapping to 1}\r\n\t{set reportPlanetType to 0}\r\n\t{set reportSummary to 0}\r\n\t{set reportAge to 0}\r\n\t{set reportChromaticity to 0}\r\n\t{set reportNotables to 0}\r\n\t{set reportScanValue to 1}\r\n\t{set reportHabZone to 0}\r\n\t{set mainSequenceFrequency to 0}\r\n\t\r\n|elif presetExploracion = \"turista\":\r\n{_ Preset pensado para hacer turismo. Activa todos los informes y da toda la información posible de los sistemas\t_}\r\n\r\n\t{set reportEficiencia to 0}\r\n\t{set reportPrimerMapeo to 0}\r\n\t{set reportValue to 0}\r\n\t{set bodyReport to 4}\r\n\t{set recommendOtherMapping to 0}\r\n\t{set reportPlanetType to 2}\r\n\t{set reportSummary to 1}\r\n\t{set reportExtremes to 3}\r\n\t{set reportAge to 1}\r\n\t{set reportChromaticity to 1}\r\n\t{set reportNotables to 1}\r\n\t{set reportScanValue to 0}\r\n\t{set reportHabZone to 1}\r\n\t{set mainSequenceFrequency to 1}\r\n}\r\n",
      "default": false,
      "includes": null
    },
    ".Runtime": {
      "name": ".Runtime",
      "description": "Script con funciones de apoyo para otros scripts",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Script que añade funciones usadas por varios scripts    _}\r\n\r\n{_ esFemenino(texto)                                    _}\r\n{_    Usa la primera palabra de texto                        _}\r\n{_    true = femenino        false = masculino                _}\r\n\r\n{_ esPlural(texto)                                        _}\r\n{_    Usa la primera palabra de texto                        _}\r\n{_    true = plural        false = singular                _}\r\n\r\n{_ creaArticulos(texto)                                    _}\r\n{_  Coge la primera palabra de texto y crea    las            _}\r\n{_    siguientes variables según el género y el número    _}\r\n{_  del / el / o / s / n / e                            _}\r\n\r\n{_ humaniza(número, femenino)                            _}\r\n{_  Convierte número en una cadena de texto                _}\r\n{_  si femenino está a true, el texto será en femenino    _}\r\n{_  pone la variable \"de\" según convenga                _}\r\n\r\n\r\n{_ esValioso(cuerpo)                                    _}\r\n{_  Devuelve true si el cuerpo encaja con las            _}\r\n{_  preferencias para considerarlo valioso                _}\r\n\r\n\r\n{_ esTerraformable(cuerpo)                                _}\r\n{_  Devuelve true si el cuerpo es terraformable            _}\r\n{_  o está terraformado                                    _}\r\n\r\n{_ getBodyValue(cuerpo, [mapeado])                        _}\r\n{_  Devuelve el valor del cuerpo teniendo en cuenta        _}\r\n{_  el valor proporcionado en mapeado, de no darse,        _}\r\n{_  se usa el estado actual del cuerpo                    _}\r\n\r\n{_ getMaxBodyValue(cuerpo)                                _}\r\n{_  Devuelve el valor máximo obtenible del cuerpo        _}\r\n{_  No da el valor actual, si no el máximo posible        _}\r\n\r\n{_ corrigeTexto(texto)                            _}\r\n{_  Devuelve texto modificado para que la voz lo lea    _}\r\n{_  correctamente                                         _}\r\n\r\n\r\n{_ --------------------- Funciones --------------------- _}\r\n{SetState('shirka_context_last_word_feminine', false)}\r\n{SetState('shirka_context_last_word_plural', false)}\r\n\r\n{set esPlural(texto) to:\r\n{_ Nos fijamos en la primera palabra _}\r\n    {set itemobj to lcase(token(texto, \" \", 0))}\r\n\r\n    {if len(itemobj) > 0: {_ Comprobamos que tenemos una palabra con suficientes letras para procesar _}\r\n        {_ Miramos primero si es plural mirando si acaba en 's' _}\r\n        {set plural to slice(itemobj, len(itemobj)-1) = \"s\"}\r\n        {SetState('shirka_context_last_word_plural', plural)}\r\n        {return plural}\r\n    }\r\n}\r\n\r\n{set esFemenino(texto) to:\r\n    {_ Nos fijamos en la primera palabra _}\r\n    {set itemobj to lcase(token(texto, \" \", 0))}\r\n    {SetState('shirka_context_last_word_feminine', false)}\r\n\r\n    {if len(itemobj) > 1: {_ Comprobamos que tenemos una palabra con suficientes letras para procesar _}\r\n        {_ Miramos primero si es plural _}\r\n        {if esPlural(itemobj):\r\n            {if find(excepcionesM, itemobj) !=- 1:\r\n                {return false}\r\n            |else:\r\n                {_ comprobamos si la siguiente letra es una A o si tenemos una excepción _}\r\n                {set femenino to (find(itemobj, \"a\", len(itemobj) - 2) != -1 || find(excepcionesF, itemobj) !=- 1)}\r\n                {SetState('shirka_context_last_word_feminine', femenino)}\r\n                {return femenino}\r\n            }\r\n        |else:\r\n            {if find(excepcionesM, itemobj) !=- 1:\r\n                {return false}\r\n            |else:\r\n                {set femenino to (find(itemobj, \"a\", len(itemobj) - 1) != -1 || find(excepcionesF, itemobj) !=- 1)}\r\n                {SetState('shirka_context_last_word_feminine', femenino)}\r\n                {return femenino}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set creaArticulos(texto) to:\r\n    {if esPlural(texto):\r\n        {if esFemenino(texto):\r\n            {_ femenino plural _}\r\n            {set del to \"de las\"} {set l to \" las\"} {set el to \"las\"} {set o to \"a\"} {set s to \"s\"} {set es to \"es\"} {set n to \"n\"} {set un to \"unas\"} {set e to \"a\"}\r\n        |else:\r\n            {_ masculino plural _}\r\n            {set del to \"de los\"} {set l to \" los\"} {set el to \"los\"} {set o to \"o\"} {set s to \"s\"} {set es to \"es\"} {set n to \"n\"} {set un to \"unos\"} {set e to \"o\"}\r\n        }\r\n    |else:\r\n        {if esFemenino(texto):\r\n            {_ femenino singular _}\r\n            {set del to \"de la\"} {set l to \" la\"} {set el to \"la\"} {set o to \"a\"} {set s to \"\"} {set es to \"\"} {set n to \"\"} {set un to \"una\"} {set e to \"a\"}\r\n        |else:\r\n            {_ masculino singular _}\r\n            {set del to \"del\"} {set l to \"l\"} {set el to \"el\"} {set o to \"o\"} {set s to \"\"} {set es to \"\"} {set n to \"\"} {set un to \"un\"} {set e to \"e\"}\r\n        }\r\n    }\r\n}\r\n\r\n\r\n{_ Script que sustituye la función Humanize() adaptado al español _}\r\n\r\n{set NumeroALetras(value, b) to:\r\n    {if GetState('shirka_context_last_word_feminine'):\r\n        {set a to 'a'}\r\n    |else:\r\n        {set a to 'o'}\r\n    }\r\n\r\n    {if value = 0: {return \"cero\"}\r\n    |elif value = 1:\r\n        {if GetState('shirka_context_last_word_feminine'):\r\n            {return \"una\"}\r\n        |else:\r\n            {if decimales:\r\n                {if b = 1: {return \"un\"}\r\n                    |else: {return \"uno\"}}\r\n                |elif b = 1:\r\n                    {return \"ún\"}\r\n            |else:\r\n                {return \"un\"}\r\n            }\r\n        }\r\n    |elif value = 2:\r\n        {if b = 1:\r\n            {return \"dós\"}\r\n        |else:\r\n            {return \"dos\"}\r\n        }\r\n    |elif value = 3: {return \"tres\"}\r\n    |elif value = 4: {return \"cuatro\"}\r\n    |elif value = 5: {return \"cinco\"}\r\n    |elif value = 6: {return \"seis\"}\r\n    |elif value = 7: {return \"siete\"}\r\n    |elif value = 8: {return \"ocho\"}\r\n    |elif value = 9: {return \"nueve\"}\r\n    |elif value = 10: {return \"diez\"}\r\n    |elif value = 11: {return \"once\"}\r\n    |elif value = 12: {return \"doce\"}\r\n    |elif value = 13: {return \"trece\"}\r\n    |elif value = 14: {return \"catorce\"}\r\n    |elif value = 15: {return \"quince\"}\r\n    |elif value < 20: {return cat(\"dieci\", NumeroALetras(value - 10, b))}\r\n    |elif value = 20: {return \"veinte\"}\r\n    |elif value < 30: {return cat(\"veinti\", NumeroALetras(value - 20, 1))}\r\n    |elif value = 30: {return \"treinta\"}\r\n    |elif value = 40: {return \"cuarenta\"}\r\n    |elif value = 50: {return \"cincuenta\"}\r\n    |elif value = 60: {return \"sesenta\"}\r\n    |elif value = 70: {return \"setenta\"}\r\n    |elif value = 80: {return \"ochenta\"}\r\n    |elif value = 90: {return \"noventa\"}\r\n    |elif value < 100: {return cat(NumeroALetras(floor(value / 10) * 10, b), \" y \", NumeroALetras(value % 10, b))}\r\n    |elif value = 100: {return \"cien\"}\r\n    |elif value < 200: {return cat(\"ciento \", NumeroALetras(value - 100, b))}\r\n    |elif value = 200 || value = 300 || value = 400 || value = 600 || value = 800: {return cat(NumeroALetras(floor(value / 100), b), \"cient\", a, \"s\")}\r\n    |elif value = 500: {return cat(\"quinient\", a, \"s\")}\r\n    |elif value = 700: {return cat(\"setecient\", a, \"s\")}\r\n    |elif value = 900: {return cat(\"novecient\", a, \"s\")}\r\n    |elif value < 1000: {return cat(NumeroALetras(floor(value / 100) * 100, b), \" \", NumeroALetras(value % 100, b))}\r\n    |elif value = 1000: {return \"mil\"}\r\n    |elif value < 2000: {return cat(\"mil \", NumeroALetras(value % 1000, b))}\r\n    |elif value < pow(10,6):\r\n        {if (value % 1000) > 0:\r\n            {return cat(NumeroALetras(floor(value / 1000), b), \" mil \", Pause(25),  NumeroALetras(value % 1000, b))}\r\n        |else:\r\n            {return cat(NumeroALetras(floor(value / 1000), b), \" mil\")}\r\n        }\r\n    |elif value = pow(10,6): {return \"un millón\"}\r\n    |elif value < 2 * pow(10,6): {return cat(\"un millón\", Pause(150), NumeroALetras(value % pow(10,6), b))}\r\n    |elif value < pow(10,12):\r\n        {if (value - floor(value / pow(10,6)) * pow(10,6)) > 0:\r\n            {return cat(NumeroALetras(floor(value / pow(10,6)), b), \" millones\", Pause(150), NumeroALetras(value - floor(value / pow(10,6)) * pow(10,6), b))}\r\n        |else:\r\n            {return cat(NumeroALetras(floor(value / pow(10,6)), b), \" millones\")}\r\n        }\r\n    |elif value = pow(10,12): {return \"un bíllón\"}\r\n    |elif value < 2 * pow(10,12): {return cat(\"un bíllón\", Pause(150), NumeroALetras(value -  floor(value / pow(10,12)) * pow(10,12), b))}\r\n    |elif value < pow(10, 18):\r\n        {if (value - floor(value / pow(10,12)) * pow(10,12)) > 0:\r\n            {return cat(NumeroALetras(floor(value / pow(10,12)), b), \" bíllónes\", Pause(150), NumeroALetras(value - floor(value / pow(10,12)) * pow(10,12), b))}\r\n        |else:\r\n            {return cat(NumeroALetras(floor(value / pow(10,12)), b), \" bíllónes\")}\r\n        }\r\n    |elif value = pow(10,18): {return \"un trillón\"}\r\n    |elif value < 2 * pow(10,18): {return cat(\"un trillón\", Pause(150), NumeroALetras(value -  floor(value / pow(10,18)) * pow(10,18), b))}\r\n    |elif value < pow(10, 24):\r\n        {if (value - floor(value / pow(10,18)) * pow(10,18)) > 0:\r\n            {return cat(NumeroALetras(floor(value / pow(10,18)), b), \" trillones\", Pause(150), NumeroALetras(value - floor(value / pow(10,18)) * pow(10,18), b))}\r\n        |else:\r\n            {return cat(NumeroALetras(floor(value / pow(10,18)), b), \" trillones\")}\r\n        }\r\n    |elif value = pow(10,24): {return \"un cuatrillón\"}\r\n    |elif value < 2 * pow(10,24): {return cat(\"un cuatrillón\", Pause(150), NumeroALetras(value -  floor(value / pow(10,24)) * pow(10,24), b))}\r\n    |elif value < pow(10, 30):\r\n        {if (value - floor(value / pow(10,24)) * pow(10,24)) > 0:\r\n            {return cat(NumeroALetras(floor(value / pow(10,24)), b), \" cuatrillones\", Pause(150), NumeroALetras(value - floor(value / pow(10,24)) * pow(10,24), b))}\r\n        |else:\r\n            {return cat(NumeroALetras(floor(value / pow(10,24)), b), \" cuatrillones\")}\r\n        }\r\n    |else:\r\n        {_ nunca vamos a llegar aquí porque nos salimos del rango de un número entero. Pero me hacía gracia =) }\r\n        {return cat(\"muchiiiiisim\", a, \"s\")}\r\n    }\r\n}\r\n\r\n{set LeeNumero(numberAsString) to:\r\n    {set entero to floor(numberAsString)}\r\n    {set decimales to token(numberAsString, \".\", 1)}\r\n    \r\n    {if decimales:\r\n        {if rand(3) = 0:\r\n            {set anotacion to \" punto \"}\r\n        |elif rand(3) = 0:\r\n            {set anotacion to \" con \"}\r\n        |else:\r\n            {set anotacion to \" coma \"}\r\n        }\r\n                {return cat(NumeroALetras(entero), anotacion, decimales))}\r\n    |else:\r\n        {if m: {set decimales to 1}}\r\n        {return NumeroALetras(entero)}\r\n    }\r\n    {return fin}\r\n}\r\n\r\n{set log10(n) to:\r\n    {set log to 0}\r\n    {while n >= 10:\r\n        {set n to div(n, 10)}\r\n        {set log to log + 1}\r\n    }\r\n    {return log}\r\n}\r\n\r\n{set normalize(inputValue, orderMultiplierVal) to:\r\n    {return [floor(inputValue / orderMultiplierVal), floor((inputValue % orderMultiplierVal) / (orderMultiplierVal / 10))]}\r\n}\r\n\r\n{set humaniza(numero) to:\r\n    {set numeroarray to []}\r\n\r\n    {_ Nos quedamos sólo con 2 decimales _}\r\n    {set numero to round(numero, 2)}\r\n\r\n    {if numero = 0:\r\n        {return \"cero\"}\r\n    |elif numero < 0:\r\n        {set maybeMinus to \"menos \"}\r\n        {_ Nos quedamos con la parte positiva y tratamos el número _}\r\n        {set numero to abs(numero)}\r\n    }\r\n\r\n    {_ Calculamos la magnitud del número }\r\n    {_ numero = 21524685 }\r\n    {set magnitude to log10(numero)}\r\n    {_ magnitude = 7 }\r\n\r\n    {set orderMultiplier to pow(10, floor(magnitude / 3) * 3)}\r\n    {_ orderMultiplier = 1.000.000 }\r\n\r\n    {set numeroarray to normalize(numero, orderMultiplier)}\r\n    {_ numero[0] = 21  numero[1] = 5 }\r\n\r\n    {if magnitude = 2: {set numeroarray to normalize(numero, 1)}}\r\n    {_ elif magnitude = 3: set numero to normalize(numero, 100)}\r\n\r\n    {set number to numeroarray[0]}\r\n    {set nextDigit to numeroarray[1]}\r\n\r\n    {_ See if we have a whole number that is fully described within the largest order _}\r\n    {_ Si el número es un número redondo (o es mas pequeño que 99.999), lo leemos directamente, sin redondear }\r\n    {if (number * orderMultiplier = numero) || magnitude < 6:\r\n        {set retorna to cat(maybeMinus, LeeNumero(numero)))}\r\n\r\n    |elif number < 100:\r\n        {_ See if we have a number whose numero can be expressed with a short decimal (i.e 1.3 million) _}\r\n        {set shortDecimal to (number + (nextDigit / 10))}\r\n        {if shortDecimal = round(numero / orderMultiplier,  1) && nextDigit != 0 && magnitude > 10:\r\n            {if rand(3) = 0:\r\n                {set anotacion to \" punto \"}\r\n            |elif rand(3) = 0:\r\n                {set anotacion to \" con \"}\r\n            |else:\r\n                {set anotacion to \" coma \"}\r\n            }\r\n            {set retorna to cat(\"alrededor de \", maybeMinus, LeeNumero(number), anotacion, LeeNumero(nextDigit), Pause(30), \" \", LeeNumero(orderMultiplier))}\r\n        }\r\n\r\n        {_ Describe values for complex numbers where the largest order number does not exceed one hundred _}\r\n        {if magnitude >= 9:\r\n            {set andahalf to \" y medio\"}\r\n        |else:\r\n            {if rand(2):\r\n                {set andahalf to \" y medio\"}\r\n            |else:\r\n                {set andahalf to cat(\" \", LeeNumero(500 * (orderMultiplier / 1000)))}\r\n            }\r\n        }\r\n\r\n        {if nextDigit = 0:\r\n            {_ the figure we are saying is round enough already _}\r\n            {set retorna to cat(\"alrededor de \", maybeMinus, LeeNumero(number * orderMultiplier))}\r\n        |elif nextDigit = 1:\r\n            {set retorna to cat(\"un poco más de \", maybeMinus, LeeNumero(number * orderMultiplier))}\r\n        |elif nextDigit = 2:\r\n            {set retorna to cat(\"más de \", maybeMinus, LeeNumero(number * orderMultiplier))}\r\n        |elif nextDigit = 3:\r\n            {set retorna to cat(\"mucho más de \", maybeMinus, LeeNumero(number * orderMultiplier))}\r\n        |elif nextDigit = 4:\r\n            {set retorna to cat(\"cerca de \", maybeMinus, LeeNumero(number * orderMultiplier), andahalf)}\r\n        |elif nextDigit = 5:\r\n            {set retorna to cat(\"alrededor de \", maybeMinus, LeeNumero(number * orderMultiplier), andahalf)}\r\n        |elif nextDigit = 6:\r\n            {set retorna to cat(\"un poco más de \", maybeMinus, LeeNumero(number * orderMultiplier), andahalf)}\r\n        |elif nextDigit = 7:\r\n            {set retorna to cat(\"más de \", maybeMinus, LeeNumero(number * orderMultiplier), andahalf)}\r\n        |elif nextDigit = 8:\r\n            {set retorna to cat(\"mucho más de \", maybeMinus, LeeNumero(number * orderMultiplier), andahalf)}\r\n        |elif nextDigit = 9:\r\n            {set retorna to cat(\"cerca de \", maybeMinus, LeeNumero((number + 1) * orderMultiplier))}\r\n        }\r\n        \r\n    |else:\r\n        {_ Round largest order numbers in the hundreds to the nearest 10, except where the number after the hundreds place is 20 or less _}\r\n        {if (number - (number/100) * 100) >= 20:\r\n            {set number to normalize(number, 10)}\r\n            {set number to numero[0]}\r\n            {set nextDigit to numero[1]}\r\n            {set number to number * 10}\r\n        }\r\n\r\n        {if nextDigit = 0:\r\n            {_ the figure we are saying is round enough already _}\r\n            {set retorna to cat(\"alrededor de \", maybeMinus, LeeNumero(number * orderMultiplier))}\r\n        |elif nextDigit < 3:\r\n            {set retorna to cat(\"un poco más de \", maybeMinus, LeeNumero(number * orderMultiplier))}\r\n        |elif nextDigit < 5:\r\n            {set retorna to cat(\"un poco menos de \", maybeMinus, LeeNumero(number * orderMultiplier), \" y medio\")}\r\n        |elif nextDigit = 5:\r\n            {set retorna to cat(\"alrededor de \", maybeMinus, LeeNumero(number * orderMultiplier), \" y medio\")}\r\n        |elif nextDigit < 8:\r\n            {set retorna to cat(\"más de \", maybeMinus, LeeNumero(number * orderMultiplier), \" y medio\")}\r\n        |elif nextDigit < 10:\r\n            {set retorna to cat(\"cerca de \", maybeMinus, LeeNumero((number + 1) * orderMultiplier))}\r\n        }\r\n    }\r\n    \r\n    {if find(retorna,\"ón\",len(retorna)-3)!=-1 || find(retorna,\"nes\",len(retorna)-4)!=-1 || find(retorna,\"dio\",len(retorna)-4)!=-1: {set de to \"de\"}}\r\n    {return retorna}\r\n}\r\n\r\n{set reemplazaTexto(texto, word, replace) to:\r\n    {return join(split(texto, word), replace)}\r\n}\r\n\r\n{set corrigeTexto(texto) to:\r\n    {set texto to lcase(texto)}\r\n    {for palabra in flip(palabrasErroneas):\r\n        {set texto to reemplazaTexto(texto, palabra, palabrasErroneas[palabra])}\r\n    }\r\n    {return texto}\r\n}\r\n\r\n{set leeTexto(texto) to:\r\n    {if vehicle = \"On Foot\":\r\n        {Transmit(corrigeTexto(texto))}\r\n    |else:\r\n        {corrigeTexto(texto)}\r\n    }\r\n}\r\n\r\n{_ valores fijos usados para la funcion de getbodyvalue    _}\r\n{set valuePlanetTypes to [\r\n    \"Mundo de amoníaco\": 96932,\r\n    \"Mundo similar a la Tierra\": 64831,\r\n    \"Gigante gaseoso con vida basada en el amoníaco\": 300,\r\n    \"Gigante gaseoso con vida basada en el agua\": 300,\r\n    \"Gigante gaseoso de Helio\": 300,\r\n    \"Gigante gaseoso rico en Helio\": 300,\r\n    \"Mundo de alto contenido metálico\": 9654,\r\n    \"Cuerpo helado\": 300,\r\n    \"Cuerpo con alto contenido metálico\": 21790,\r\n    \"Mundo helado rocoso\": 300,\r\n    \"Cuerpo rocoso\": 300,\r\n    \"Gigante gaseoso de Clase 1\": 1656,\r\n    \"Gigante gaseoso de Clase 2\": 9654,\r\n    \"Gigante gaseoso de Clase 3\": 300,\r\n    \"Gigante gaseoso de Clase 4\": 300,\r\n    \"Gigante gaseoso de Clase 5\": 300,\r\n    \"Gigante acuático\": 300,\r\n    \"Gigante acuático con vida\": 300,\r\n    \"Mundo acuático\": 64831,\r\n]}\r\n\r\n\r\n{set getBodyValue(cuerpo, isMapped) to:\r\n\r\n    {if cuerpo.bodytype = \"Estrella\":  {return cuerpo.estimatedvalue}}\r\n    \r\n    {if !defined(isMapped): {set isMapped to cuerpo.mapped}}\r\n\r\n    {set k to valuePlanetTypes[cuerpo.planettype]}\r\n    {if (cuerpo.terraformstate = \"Candidato para terraformación\" ||cuerpo.terraformstate = \"Terraformado\"):\r\n        {if cuerpo.planettype = \"Cuerpo con alto contenido metálico\":\r\n            {set k to k + 100677}\r\n        |elif cuerpo.planettype = \"Mundo acuático\" || cuerpo.planettype = \"Mundo similar a la Tierra\":\r\n            {set k to k + 116295}\r\n        |else:\r\n            {set k to k + 93328}\r\n        }\r\n    }\r\n\r\n    {set q to 0.56591828}\r\n    {set mappingMultiplier to 1}\r\n\r\n    {if isMapped:\r\n        {if !cuerpo.alreadydiscovered && !cuerpo.alreadymapped:\r\n            {set mappingMultiplier to 3.699622554}\r\n        |elif !cuerpo.alreadymapped:\r\n            {set mappingMultiplier to 8.0956}\r\n        |else:\r\n            {set mappingMultiplier to 3.3333333333}\r\n        }\r\n    }\r\n    \r\n    {set value to (k + k * q * pow(cuerpo.earthmass,0.2)) * mappingMultiplier}\r\n    {if isMapped:\r\n        {if odyssey:\r\n            {if (value * 0.3) > 555:\r\n                {set value to value + (value * 0.3)}\r\n            |else:\r\n                {set value to value + 555}\r\n            }\r\n        }\r\n    }\r\n    {set value to max(500, value)}\r\n    {if !cuerpo.alreadydiscovered: {set value to value * 2.6}}\r\n\r\n    {return round(value)}\r\n}\r\n\r\n{set getMaxBodyValue(cuerpo) to:\r\n    {return round(getBodyValue(cuerpo, true) * 1.25)}\r\n}\r\n\r\n{set esTerraformable(cuerpo) to:\r\n    {return cuerpo.terraformState.invariantName != \"Not terraformable\"}\r\n}\r\n\r\n{set esValioso(cuerpo) to:\r\n    {return (recommendAlreadyMapped || !cuerpo.alreadymapped) && ((esTerraformable(cuerpo) && reportTerraformables) || reportPlanetTypes[cuerpo.planettype] || (getMaxBodyValue(cuerpo) > highValueThreshold))}\r\n}\r\n\r\n{_ Pone la variable hasSRV a true si llevamos un hangar de vehículo planetario en la nave _}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.invariantName = \"Planetary Vehicle Hangar\":\r\n        {set hasSRV to true}\r\n    }\r\n}\r\n\r\n{_ Pone la variable hasDSS a true si llevamos un escaner detallado de superficie en la nave _}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.invariantName = \"Detailed Surface Scanner\":\r\n        {set hasDSS to true}\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "includes": ".Preferencias"
    },
    "AFMU repairs": {
      "name": "AFMU repairs",
      "description": "Activado al reparar módulos utilizando la Unidad de automantenimiento (AFMU)",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Correcciones de traducción _}\r\n{if event.item = \"Auto Field-Maintenance Unit\":\r\n\t{set modulo to \"Unidad de automantenimiento\"}\r\n|elif event.item = \"Disruptor\":\r\n\t{set modulo to \"Disrruptor\"}\r\n|else:\r\n\t{set modulo to event.item}\r\n}\r\n\r\n\r\n{creaArticulos(modulo)}\r\n\r\n{set random to rand(2)}\r\n{if random:\r\n\t{el} {modulo}\r\n}\r\n{if event.repairedfully:\r\n\t{if random:\r\n\t\t{OneOf(\"ha{n} sido reparad{o}{s} {OneOf('totalmente', 'completamente', '')}\", \"está{n} totalmente reparad{o}{s}\")}\r\n\t|else:\r\n\t\tSe ha{n} reparado {OneOf('totalmente', 'completamente', '')} {el} {modulo}\r\n\t}\r\n|else:\r\n\t{if random:\r\n\t\t{Occasionally(2, \"ha sido\")} {OneOf(\"parcialmente reparad{o}{s}\", \"reparad{o}{s} parcialmente\")}\r\n\t|else:\r\n\t\t{OneOf(\"Se ha{n} reparado parcialmente {el}\", \"Reparación parcial {del}\")} {modulo}\r\n\t}\r\n\t{Occasionally(2, cat(OneOf('al', 'en un'), \" \", Humanise(event.health * 100), \" porciento de su funcionalidad\"))}\r\n}\r\n\r\n{Occasionally(2, OneOf(\r\n\tcat(OneOf(\". \", \" y está{n} \"), ' list{o}{s} para su reactivación'),\r\n\t\", recuerde activarl{o}{s}\")\r\n)}.\r\n\r\n{if modulo = \"Soporte vital\":\r\n\t{OneOf(\r\n\t\t\"Compruebe también {Occasionally(2, Pause(70))} el oxígeno restante\",\r\n\t\t\"Recuerde {Occasionally(2, \\\"{F('Honorific')} {Pause(50)}\\\")} que la reparación no rellena el tanque de oxígeno\"\r\n\t\t)}.\r\n}\r\n\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Asteroid cracked": {
      "name": "Asteroid cracked",
      "description": "Triggered when you break up a 'Motherlode' asteroid for mining",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Asteroid prospected": {
      "name": "Asteroid prospected",
      "description": "Triggered when using a prospecting drone",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if ship.Role.edname = \"Mining\" || ship.Role.edname = \"Multipurpose\":\r\n\r\n\t{if len(event.motherlode) > 0 && spokenCores[event.motherlode]:\r\n\t\t{OneOf(\r\n\t\t\t\"Veta{Occasionally(2, '-madre')} detectada de {event.motherlode}.\",\r\n\t   \t\t\"Detectada {Occasionally(2, 'una')} veta{Occasionally(2, '-madre')} de {event.motherlode}.\",\r\n\t   \t\t\"Núcleo de {event.motherlode} detectado.\",\r\n\t   \t\t\"{Occasionally(2, 'Se ha')} detectado {Occasionally(2 'un')} núcleo de {event.motherlode}.\"\r\n\t   \t)}\r\n\t}\r\n\r\n\t{set minerals to []}\r\n\t{for mineral in event.commodities:\r\n\t    {if mineral.percentage > minimumPercent && spokenMinerals[mineral.commodity]:\r\n\t        {set mineral_desc to: \r\n\t            {round(mineral.percentage)} porciento de {mineral.commodity}\r\n\t        }\r\n\t        {set minerals to cat(minerals, [mineral_desc])}\r\n\t    }\r\n\t}\r\n\t{if len(minerals) > 0:\r\n\t    El asteroide contiene {List(minerals)}\r\n\t    {if event.materialcontent = \"High\":\r\n\t        , y una alta concentración de materiales de ingeniería\r\n\t    }.\r\n\t    {if event.remaining < 100:\r\n\t    \t{OneOf(\r\n\t    \t\t\"Cantidad {Occasionally(2, 'de material')} {Occasionally(2, 'aproximada')} restante {Occasionally(2, 'en el asteroide')}: {event.remaining} porciento.\",\r\n\t        \t\"Queda un {event.remaining} porciento {Occasionally(2, 'de material')} {OneOf('por extraer', 'por minar', '')} {Occasionally(2, 'en el asteroide')}.\",\r\n\t        \t\"{Occasionally(2, 'Al asteroide')} le queda {Occasionally(2, 'aproximadamente,')} un {event.remaining} porciento {Occasionally(2, 'de material')} {OneOf('por extraer','por minar', 'hasta agotarse')}.\",\r\n        \t\t\"{Occasionally(2, 'Está')} agotado en un {100 - event.remaining} porciento {Occasionally(2, 'aproximadamente')}.\",\r\n\t        \t\"Se le puede {OneOf('extraer', 'minar')} {Occasionally(2, 'aproximadamente,')} un {event.remaining} porciento {Occasionally(2, 'de material')}.\"\r\n    \t    )}\r\n    \t}\r\n\t}\r\n}",
      "default": false,
      "includes": ".Preferencias"
    },
    "Backpack": {
      "name": "Backpack",
      "description": "Lists the contents of your backpack when you disembark",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Backpack changed": {
      "name": "Backpack changed",
      "description": "Triggered when there is any change to the contents of the suit backpack",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Blueprint make report": {
      "name": "Blueprint make report",
      "description": "Informa de la cantidad que puedes hacer de un plano en particular",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'blueprint')}\r\n    \r\n{_ Fetch from context / state _}\r\n{set blueprintname to GetState(\"eddi_context_blueprint_name\")}\r\n{set blueprintgrade to GetState(\"eddi_context_blueprint_grade\")}\r\n\r\n{if blueprintname && blueprintgrade:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname, blueprintgrade)}\r\n}\r\n\r\n{_ Function to obtain current inventory of a material}\r\n{set GetMaterialFromInventory(requiredMaterialName) to:\r\n    {for material in materials:\r\n        {if material.material = requiredMaterialName:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set materialInventory to GetMaterialFromInventory(blueprint.materials[cur].material)}\r\n        {if !materialInventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if materialInventory.amount < canbemade:\r\n                {set canbemade to materialInventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        {set report to OneOf(\"No podemos fabricar ningún {blueprintname} de grado {blueprintgrade}\", \"No puedes fabricar ningún {blueprintname}\")}\r\n    |elif canbemade = 1:\r\n        {set report to OneOf(\"Podemos fabricar una unidad de {blueprintname} grado {blueprintgrade}\", \"Podrías fabricar un {blueprintname}\")}\r\n    |else:\r\n        {set report to OneOf(\"Podemos fabricar {blueprintname} de {blueprintgrade} hasta {Humanise(canbemade)} veces.\", \"Podrías fabricar {canbemade} {blueprintname}\")}\r\n    }\r\n    \r\n|else:\r\n    {set report to \"No dispongo de información suficiente.\"}\r\n}\r\n\r\n{leeTexto(report)}.\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Blueprint material report": {
      "name": "Blueprint material report",
      "description": "Informa de los materiales requeridos de un plano",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'blueprint')}\r\n\r\n{_ Fetch from context / state _}\r\n{set blueprintname to GetState(\"eddi_context_blueprint_name\")}\r\n{set blueprintgrade to GetState(\"eddi_context_blueprint_grade\")}\r\n\r\n{if blueprintname && blueprintgrade:\r\n    {_ Fetch full blueprint details _}\r\n    {set blueprint to BlueprintDetails(blueprintname, blueprintgrade)}\r\n}\r\n\r\n{if blueprint:\r\n    {set blueprintMaterials to []}\r\n    {for material in blueprint.materials:\r\n         {set blueprintMaterials to cat(blueprintMaterials, [material.material])}\r\n    }\r\n    {set report to cat(blueprintname, \" de grado \", blueprintgrade, \" requiere \")}\r\n    {set report to cat(report, List(blueprintMaterials))}\r\n|else:\r\n    {set report to \"No dispongo de información suficiente.\"}\r\n}\r\n\r\n{leeTexto(report)}.\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Bodies mapped": {
      "name": "Bodies mapped",
      "description": "Informa de todos los cuerpos mapeados hasta ahora en este sistema",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from Context, if a context is set _}\r\n{if GetState(\"eddi_context_system_name\"):\r\n    {set reportSystem to SystemDetails(GetState(\"eddi_context_system_name\"))}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{_ Build a list of scanned bodies _}\r\n\r\n{set mappedList to []}\r\n{for body in reportSystem.bodies:\r\n   {if body.mapped:\r\n       {set mappedList to cat(mappedList, [P(body.shortname, \"body\")])} \r\n   }\r\n}\r\n\r\n{_ Begin speaking _}\r\n\r\n{if len(mappedList) > 0:\r\n    {if len(mappedList) = 1: El cuerpo |else: Los cuerpos}\r\n    {List(mappedList)},\r\n    {Occasionally(2, \"ya\")}\r\n    {if len(mappedList) = 1: ha sido mapeado |else: han sido mapeados}.\r\n|else:\r\n\t{OneOf(\"Aún\", \"Todavía\", \"\")} no {OneOf(\"has\", \"tienes\")} {OneOf(\"mapeado\", \"escaneado\")} ningún cuerpo {OneOf(\"de este sistema\", \"en este sistema\", \"aquí\", \"\")}.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Bodies to map": {
      "name": "Bodies to map",
      "description": "Informa de todos los cuerpos no asignados en el sistema que vale la pena mapear",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from Context, if a context is set _}\r\n{if GetState(\"eddi_context_system_name\"):\r\n\t{set reportSystem to SystemDetails(GetState(\"eddi_context_system_name\"))}\r\n|else:\r\n\t{set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{_ Identify bodies worth mapping _}\r\n{set toMapList to []}\r\n{set mappedBodies to 0}\r\n{set totalBodies to 0}\r\n{set valueCount to 0}\r\n\r\n{if hasDSS:\r\n    {for body in reportSystem.bodies:\r\n        {set totalBodies to totalBodies + 1}\r\n        {if body.bodytype.invariantName != \"Star\":\r\n            {if body.mapped: {set mappedBodies to mappedBodies + 1}}\r\n            {if esValioso(body):\r\n                {set valueCount to valueCount + 1}\r\n                {if !body.mapped:\r\n                    {if !toMapList[P(body.shortname, \"body\")]: \r\n                        {set toMapList to cat(toMapList, [P(body.shortname, \"body\")])}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set toMapCount to len(toMapList)}\r\n\r\n{_ Begin speaking _}\r\n{if toMapCount > 0:\r\n\r\n    {if event.type = \"Body mapped\": \r\n    \t{_ Mi easter egg dedicado a mis compañeros de Explorers of the Anarchy CMDT Nuredunna y CMDT Giordano Albino ;) _}\r\n    \t{if ShirkaSarcastica && !rand(30):\r\n    \t\t{set ademas to Emphasize(\"A más a más\",\"strong\")}\r\n\t\t|else:\r\n    \t\t{set ademas to OneOf(\"además,\", \"también\")}\r\n    \t}\r\n    }\r\n\r\n\t{if toMapCount = 1:\r\n\t\t{set report to cat(\"El cuerpo \", List(toMapList), \" es \", ademas)}\r\n\t\t{OneOf(\r\n\t\t\t\"{report} un {OneOf('recomendado', 'buen')} candidato {OneOf('para mapear', 'para cartografiar')}.\"\r\n\t\t\t\"{report} un {OneOf('objeto', 'cuerpo')} {OneOf('valioso', 'mapeáble')}.\"\r\n\t\t)}\r\n\t|else:\r\n\t\t{set report to cat(\"Los cuerpos \", List(toMapList), \" son \", ademas)}\r\n\t\t{OneOf(\r\n\t\t\t\"{report} {Occasionally(3, 'unos')} {OneOf('recomendados', 'buenos')} candidatos {OneOf('para mapear', 'para cartografiar')}.\"\r\n\t\t\t\"{report} {OneOf('objetos', 'cuerpos')} {OneOf('valiosos', 'mapeábles')}.\"\r\n\t\t)}\r\n\t}\r\n\r\n|elif valueCount > 0 && mappedBodies >= valueCount && reportSystem.totalbodies = reportSystem.scannedbodies:\r\n\t{_ Ponemos a cero el contador de sistemas no valiosos para la personalidad de Shirka _}\r\n\t{_ Lo hacemos sólo cuando se han mapeado todos los cuerpos de un sistema, y no cuando encontramos un valioso, porque puede ser que esté muy alejado y no compense el viaje, por lo que ese sistema cuenta como malo _}\r\n\t{SetState(\"eddi_context_system_not_worthy\", 0)}\r\n\r\n   \t{OneOf(\r\n       \t\"{Occasionally(2, 'Ya')} has mapeado todos los cuerpos {if valueCount: {OneOf('valiosos', 'interesantes', 'que valen la pena')}} {Occasionally(2, 'de este sistema')}.\",\r\n       \t\"{Occasionally(2, 'Todos')} los cuerpos {if valueCount: {OneOf('valiosos', 'interesantes', 'que valen la pena')}} {Occasionally(2, 'de este sistema, ')} {Occasionaly(2, 'ya')} {OneOf('han sido', 'están')} {OneOf('mapeados', 'cartografiados')}.\"\r\n   \t)}\r\n\r\n|elif !valueCount && reportSystem.scannedbodies = reportSystem.totalbodies && GetState(\"eddi_context_last_action\") != 'honk':\r\n\t{set enEsteSistema to Occasionally(2, \"en este sistema\")}\r\n\t{if !enEsteSistema:\r\n\t\t{set deEsteSistema to Occasionally(2, \"{OneOf('en este sistema', 'de este sistema')}\")}\r\n\t}\r\n\t{set random to rand(4)}\r\n\t{if random = 0:\r\n\t\t{set report to cat('Ningún cuerpo ', deEsteSistema, ' ', OneOf(\"cumple con\", \"encaja con\", \"sigue\"), ' los ', OneOf('parametros', 'valores'), \" \", OneOf('proporcionados', 'definidos', 'establecidos', 'indicados', ''), \" para ser mapeado \", enEsteSistema)}\r\n\t|elif random = 1:\r\n\t\t{set report to cat('Este sistema no tiene ningún cuerpo que ', OneOf(\"cumpla con\", \"encaje con\", \"siga\"), ' los ', OneOf('parametros', 'valores'), \" \", OneOf('proporcionados', 'definidos', 'establecidos', 'indicados', ''), \" \", OneOf('que lo considere valioso', 'que lo considere mapeáble', 'para ser mapeado'))}\r\n\t|elif random = 2:\r\n\t\t{set report to cat('Los sensores no ', OneOf(\"han {OneOf('encontrado', 'detectado')}\", OneOf(\"encuentran\", \"detectan\")), ' cuerpos ', enEsteSistema)}\r\n\t\t{set random to rand(3)}\r\n\t\t{if !random:\r\n\t\t\t{set report to cat(report, 'que ', OneOf('cumplan', 'sigan'), ' los ', OneOf('parametros', 'valores'), \" \", OneOf('proporcionados', 'definidos', 'establecidos', 'indicados', ''), \" \", OneOf('que los consideren valiosos', 'que los consideren mapeábles','para ser mapeados'))}\r\n\t\t|else:\r\n\t\t\t{set report to cat(report, OneOf(\"valiosos\", \"mapeábles\", \"que valgan la pena {Occasionally(2, 'mapear')}\"))}\r\n\t\t}\r\n\t|else:\r\n\t\t{set report to cat('No ', OneOf(\"se han {OneOf('encontrado', 'detectado')}\", OneOf(\"he encontrado\", \"encuentro\", \"he detectado\", \"detecto\", \"hay\")), ' cuerpos ', deEsteSistema)}\r\n\t\t{set random to rand(3)}\r\n\t\t{if !random:\r\n\t\t\t{set report to cat(report, 'que ', OneOf('cumplan', 'sigan'), ' los ', OneOf('parametros', 'valores'), \" \", OneOf('proporcionados', 'definidos', 'establecidos', 'indicados', ''), \" \", OneOf('que los consideren valiosos', 'que los consideren mapeábles', 'para ser mapeados'), \" \", enEsteSistema)}\r\n\t\t|else:\r\n\t\t\t{set report to cat(report, OneOf(\"valiosos\", \"mapeábles\", \"que valgan la pena {Occasionally(2, 'mapear')}\"), \" \", enEsteSistema)}\r\n\t\t}\r\n\t}\r\n\t{report}.\r\n\t\r\n\t{_ Activamos a la Shirka sarcástica si el sistema tiene más de 35 cuerpos y ninguno es valioso\t_}\r\n\t{_ o cuando nos hemos encontrado muchos sistemas seguidos sin ningún valioso\t\t\t\t\t_}\r\n\t{if ShirkaSarcastica:\r\n\t\t{if reportSystem.totalbodies > 35:\r\n\t\t\t{set report to OneOf(\"Tanto cuerpo y ninguno {OneOf('valioso', 'vale la pena')}.\", \"Con {reportSystem.totalbodies} cuerpos... {OneOf('Menuda decepción...', 'ya es mala suerte...', 'esto {Pause(30)} estadísticamente, es mala suerte.')}\", \" \")}\r\n\t\t\t{Transmit(report)}\r\n\t\t|else:\r\n\t\t\t{if !GetState(\"eddi_context_system_not_worthy\"): {SetState(\"eddi_context_system_not_worthy\", 0)}}\r\n\t\t\t{SetState(\"eddi_context_system_not_worthy\", GetState(\"eddi_context_system_not_worthy\") + 1)}\r\n\t\t\t{if GetState(\"eddi_context_system_not_worthy\") > 8:\r\n\t\t\t\t{set random to rand(6)}\r\n\t\t\t\t{if !random:\r\n\t\t\t\t\t{SetState(\"eddi_context_system_not_worthy\", 0)}\r\n\t\t\t\t\t{set report to OneOf(\"¡Vaya racha de sistemas de mierda!\", \"¡Otro sistema que no vale para nada!\", \"¿Cuantos sistemas sin nada interesante van ya?\", \"Como el próximo sistema sea igual de malo, me desconecto.\", \"¡Esto es desesperante...!\", \"¡Increible! ¿Otro más?\")}\r\n\t\t\t\t\t{Transmit(report)}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n|elif reportSystem.scannedbodies < reportSystem.totalbodies && GetState(\"eddi_context_last_action\") != 'honk' && len(reportSystem.factions) = 0:\r\n\t{set faltan to reportSystem.totalbodies - reportSystem.scannedbodies}\r\n\t{if faltan > 1: {set s to \"s\"}{set n to \"n\"}\r\n\t|else: {set s to \"\"}{set n to \"\"}\r\n\t}\r\n\tAviso:\r\n\t{OneOf(\"Falta{n} {faltan} cuerpo{s} por escanear en este sistema {Occasionally(2,'estelar')}\", \"Este sistema {Occasionally(2,'estelar')} no está completamente escaneado\")}.\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Body atmosphere report": {
      "name": "Body atmosphere report",
      "description": "Informa de la atmósfera del cuerpo contextual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Define functions for converting temperature scales _}\r\n{set ToCelsius(kelvin) to: {round(kelvin - 273)}}\r\n{set ToFahrenheit(kelvin) to: {round((kelvin-273)*9/5 + 32)}}\r\n{set TempCalc(kelvin) to: \r\n    {if reportAtmoTemperature = 1: {round(kelvin)}}\r\n    {if reportAtmoTemperature = 2: {ToCelsius(kelvin)}}\r\n    {if reportAtmoTemperature = 3: {ToFahrenheit(kelvin)}}\r\n}\r\n\r\n{_ Name our temperature scale _}\r\n{set tempscale() to:\r\n\t{if reportAtmoTemperature = 1: Kelvin}\r\n\t{if reportAtmoTemperature = 2: {cat(\"grado\", s, \" \", OneOf('Celsius', 'centígrados', ''))}}\r\n\t{if reportAtmoTemperature = 3: {cat(\"grado\", s,\" Fahrenheit\")}}\r\n}\r\n{set s to \"s\"}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"))}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    Lo siento, no me queda claro a que cuerpo estelar te refieres.\r\n\r\n|else:\r\n    {if find(reportbody.planettype, \"Gigante\") >= 0:\r\n        {if find(reportbody.planettype, \"Clase\") >= 0: \r\n            {set sudarsky to Occasionally(3, \"Sud-dar-eskai\")}\r\n        }\r\n        {set planetdesc to cat(\"Este gigante gaseoso de clase \", Occasionally(3, \"Sud-dar-eskai {Pause(50)}\"))}\r\n        {if find(reportbody.planettype, \"Clase 5\") >= 0:\r\n            {planetdesc} 5 {Pause(50)} tiene\r\n            {if reportAtmoTemperature: \r\n                {set tempmin to: {TempCalc(1373)}}\r\n                temperaturas por encima de {humaniza(round(tempmin))} {tempscale()}, {OneOf(\"y\", \"con\", \"formando\")}\r\n            }\r\n            una densa capa de nubes de {OneOf(\"hierro y silicatos en forma de vapor\", \"vapores de hierro y silicatos\", \"silicatos y hierro vaporizados\")}.\r\n            \r\n        |elif find(reportbody.planettype, \"Clase 4\") >= 0:\r\n            {planetdesc} 4 {Pause(50)} tiene\r\n            {if reportAtmoTemperature: \r\n                {set tempmin to TempCalc(354)}\r\n                {set tempmax to TempCalc(903)}\r\n                temperaturas {OneOf(\"de\", \"que oscilan\")} entre {humaniza(round(tempmin))} y {humaniza(round(tempmax))} {tempscale()}, {OneOf(\"y\", \"con\", \"formando\")}\r\n            }\r\n            una densa capa de nubes de {OneOf(\"vapores metálicos alcalinos\", \"metales alcalinos en forma de vapor\", \"metales alcalinos vaporizados\")}.   \r\n            \r\n        |elif find(reportbody.planettype, \"Clase 3\") >= 0:\r\n            {planetdesc} 3 {Pause(50)} tiene\r\n            {if reportAtmoTemperature: \r\n                {set tempmin to TempCalc(251)}\r\n                {set tempmax to TempCalc(353)}\r\n                temperaturas de superficie {OneOf(\"de\", \"que oscilan\")} entre {humaniza(round(tempmin))} y {humaniza(round(tempmax))} {tempscale()},\r\n            }\r\n            una temperatura en la que {OneOf(\"ningún elemento gaseoso puede formar nubes\", \"no están disponibles los químicos necesarios para formar una capa de nubes\", \"la atmósfera no puede sostener una capa de nubes persistente\")}.\r\n            \r\n        |elif find(reportbody.planettype, \"Clase 2\") >= 0:\r\n            {planetdesc} 2 {Pause(50)} tiene\r\n            {if reportAtmoTemperature: \r\n                {set tempmin to TempCalc(154)}\r\n                {set tempmax to TempCalc(250)}\r\n                temperaturas de superficie {OneOf(\"de\", \"que oscilan\")} entre los {humaniza(round(tempmin))} y los {humaniza(round(tempmax))} {tempscale()}, {OneOf(\"y\", \"con\", \"formando\")}\r\n\t\t\t}\r\n\t\t\tuna densa capa de nubes de {OneOf(\"vapor de agua\", \"agua en forma de vapor\")}.\r\n\t\t\t\r\n        |elif find(reportbody.planettype, \"Clase 1\") >= 0:\r\n            {planetdesc} 1 {Pause(50)} tiene\r\n            {if reportAtmoTemperature: \r\n                {set tempmin to TempCalc(153)}\r\n                {set tempmax to TempCalc(83)}\r\n                temperaturas de superficie de {Occasionally(2, OneOf(\"por lo menos\", \"un máximo de\"))} {humaniza(round(tempmax))} {tempscale()} {OneOf(\"y\", \"con\", \"formando\")}\r\n\t\t\t}\r\n\t\t\tuna densa capa de nubes de {OneOf(\"amoníaco\", \"vapores de amoníaco\")}.\r\n\t\t}\r\n\r\n\t|elif reportbody.atmosphere = \"Sin atmósfera\" || !reportbody.atmosphere:\r\n        {Occasionally(3, OneOf(\"No hay atmósfera.\", \"Está carente de cualquier tipo de atmósfera.\", \"los años han limpiado cualquier rastro de atmósfera.\"))}\r\n        {if reportbody.temperature && reportAtmoTemperature:\r\n            Las temperaturas de superficie {OneOf(\"se mueven en los\", \"oscilan alrededor de los\", \"varían entorno los\")} {humaniza(round(TempCalc(reportbody.temperature)))} {tempscale()}.\r\n\t\t}\r\n\r\n    |elif reportbody.pressure: \r\n        {if reportbody.pressure < 0.1:\r\n            {set pressdesc to OneOf(\"casi inapreciable\", \"extremadamente delgada\")}\r\n        |elif reportbody.pressure < 0.25:\r\n            {set pressdesc to \"muy delgada\"}\r\n        |elif reportbody.pressure < 0.5:\r\n            {set pressdesc to \"delgada\"}\r\n        |elif reportbody.pressure < 2:\r\n            {set pressdesc to \"afable\"}\r\n        |elif reportbody.pressure < 10:\r\n            {set pressdesc to \"amplia\"}\r\n        |elif reportbody.pressure < 50:\r\n            {set pressdesc to OneOf(\"densa\", \"muy amplia\")}\r\n        |elif reportbody.pressure < 100:\r\n            {set pressdesc to OneOf(\"muy densa\", \"extremadamente amplia\")}\r\n        |elif reportbody.pressure >= 100:\r\n            {set pressdesc to OneOf(\"aplastante\", \"extremadamente densa\")}\r\n        }\r\n        \r\n        {if find(reportbody.atmosphere, \"Rica\") >= 0:\r\n            {set desc to OneOf(\"Detecto una \", \"Hay una \", \"Los sensores detectan una\")}\r\n            {OneOf(\"{desc} atmósfera {pressdesc} {reportbody.atmosphere}\", \"La atmósfera de este planeta es {pressdesc} y {reportbody.atmosphere}\", \"La {pressdesc} atmósfera de este planeta es {reportbody.atmosphere}\")}\r\n            \r\n        |elif find(reportbody.atmosphere, \"vapor\") >= 0:\r\n            {OneOf(\"Su {pressdesc} atmósfera es de {reportbody.atmosphere}\", \"Su atmósfera es {pressdesc} y está compuesta de {reportbody.atmosphere}\", \"Su {pressdesc} atmósfera se compone de {reportbody.atmosphere}\")}\r\n            \r\n\t\t|elif reportbody.planettype = \"Mundo similar a la Tierra\":\r\n            La atmósfera es {OneOf(\"similar\", \"parecida\")} a la de la Tierra, \r\n            \r\n\t\t|else:\r\n            {set mostly to OneOf(\"principalmente\", \"sobre todo\", \"esencialmente\", \"mayoritariamente\")}\r\n            {OneOf(\"La {pressdesc} atmósfera está compuesta {mostly} de\", \"El componente principal de esta atmósfera {pressdesc} es\")} \r\n            {reportbody.atmosphere}\r\n        }\r\n        \r\n        {if reportAtmoPressure:\r\n        \t{set y to \"y\"}\r\n        \t{set reportAtmoPressure to humaniza(reportbody.pressure, 1)}\r\n       \t\t{if round(reportbody.pressure, 2) = 1: {set s to \"\"} |else: {set s to \"s\"}}\r\n      \t\t{Occasionally(2,Pause(30))}con una presión {Occasionally(2, \"en superficie\")} de {reportAtmoPressure} {de} atmósfera{s} {Occasionally(2, \"terrestre{s}\")}\r\n        }\r\n        \r\n        {if reportbody.temperature && reportAtmoTemperature:\r\n            {set temp to: {round(TempCalc(reportbody.temperature))}}\r\n            {if abs(temp) = 1: {set s to \"\"} |else: {set s to \"s\"}}\r\n            {if find(temp, \"-\") >= 0:\r\n                {set temp to humaniza(abs(temp))}\r\n\t\t\t\t{set temp to cat(temp, \" \", tempscale(), \" bajocero\")}\r\n            |else:\r\n                {set temp to humaniza(temp)}\r\n\t\t\t\t{set temp to cat(temp, \" \", tempscale())}\r\n            }\r\n            {Occasionally(2,Pause(30))}\r\n\t\t\t{if y: {y} {Occasionally(2, \"con\")}\r\n\t\t\t|else: {Pause(30)} con }\r\n\t\t\tuna media de temperatura {Occasionally(2, \"en superficie\")} de {temp}\r\n        }.\r\n\t}\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Body mapped": {
      "name": "Body mapped",
      "description": "Se activa después de mapear un cuerpo con el EAAS",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', getBodyValue(BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))))}\r\n{SetState('eddi_context_last_scan_max_value', getMaxBodyValue(BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))))}\r\n\r\n{_ Process the event _}\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n\t{set scanValue to GetState(\"eddi_context_last_scan_estimated_value\")}\r\n\r\n\t{set report to cat(OneOf(\r\n\t\t'{OneOf(\"Mapeado\", \"Mapeo\", \"Análisis\")} {Occasionally(2, \"de superficie\")}\t{OneOf(\"finalizado\", \"completado\", \"terminado\", \"realizado\")}.'\r\n\t\t'{OneOf(\"Finalizado\", \"Completado\", \"Terminado\", \"Realizado\")} {OneOf(\"mapeado\", \"mapeo\", \"análisis\")} {Occasionally(2, \"de superficie\")}.'\r\n\t))}\r\n\t\r\n\t{if event.probesused <= event.efficiencytarget:\r\n\t\t{set scanValue to round(scanValue * 1.25)}\r\n\t\t{if reportEficiencia && !rand(reportEficiencia):\r\n\t\t\t{set eficiencia to OneOf(\r\n    \t\t\t'Bonificación {OneOf(\"de\", \"por\")} eficiencia {OneOf(\"concedida\", \"obtenida\")}.',\r\n    \t\t\t'{OneOf(\"concedida\", \"obtenida\")} bonificación {OneOf(\"de\", \"por\")} eficiencia.'\r\n    \t\t\t'Bono {OneOf(\"de\", \"por\")} eficiencia {OneOf(\"concedido\", \"obtenido\")}.',\r\n    \t\t\t'{OneOf(\"Concedido\", \"Obtenido\")} bono {OneOf(\"de\", \"por\")} eficiencia.'\r\n    \t\t)}\r\n    \t}\r\n\t}\r\n\r\n\t{if event.alreadymapped:\r\n\t\t{if eficiencia:\r\n\t\t\t{set report to OneOf(\r\n\t\t\t\t'{report} {eficiencia}',\r\n\t\t\t\t'{OneOf(\"Mapeado\", \"Mapeo\", \"Análisis\")} {Occasionally(2, \"de superficie\")} con eficiencia {OneOf(\"finalizado\", \"completado\", \"terminado\", \"realizado\")}.'\r\n\t\t\t\t'{OneOf(\"Finalizado\", \"Completado\", \"Terminado\", \"Realizado\")} {OneOf(\"mapeado\", \"mapeo\", \"análisis\")} {Occasionally(2, \"de superficie\")} con eficiencia.'\r\n\t\t\t)}\r\n\t\t}\r\n\t|else:\r\n\t\t{_ Añadimos un poco de sarcasmo a Shirka _}\r\n\t\t{if ShirkaSarcastica && !rand(5) && scanValue > 1800000:\r\n\t\t\t{set shirka to Transmit(OneOf(\r\n\t\t\t\t'Ahora vas, y te estrellas...',\r\n\t\t\t\t'¡No te estrelles!',\r\n\t\t\t\t'Recuerda que si me pasa algo, lo pierdes todo.',\r\n\t\t\t\t'Ya sabes: Si no lo entregas, no hay premio.',\r\n\t\t\t\t'Entrégalo antes de que te lo quiten.',\r\n\t\t\t\t'¡No es justo que sólo pongan tu nombre!'\r\n\t\t\t))}\r\n\t\t}\r\n\r\n\t\t{if reportPrimerMapeo && !rand(reportPrimerMapeo):\r\n\t\t\t{if eficiencia:\r\n\t\t\t\t{set report to cat(OneOf(\r\n\t\t\t\t\t'{OneOf(\"Has sido el primero\", \"Hemos sido los primeros\")} en {OneOf(\"finalizar\", \"completar\", \"terminar\", \"realizar\")} este {OneOf(\"mapeado\", \"mapeo\", \"análisis\")} {Occasionally(2, \"de superficie\")} y {OneOf(\"además,\", \"encima\", \"este\", \"\")} ha sido {OneOf(\"de forma eficiente\", \"eficientemente\")}.',\r\n\t\t\t\t\t'{report} Bonificaciones {OneOf(\"de\", \"por\")} primer {OneOf(\"mapeado\", \"mapeo\")} y {OneOf(\"de\", \"por\")} eficiencia {OneOf(\"concedidas\", \"obtenidas\")}.',\r\n\t\t\t\t\t'{report} {OneOf(\"concedidas\", \"obtenidas\")} bonificaciones {OneOf(\"de\", \"por\")} primer {OneOf(\"mapeado\", \"mapeo\")} y {OneOf(\"de\", \"por\")} eficiencia.'\r\n\t\t\t\t\t'{report} Bonos {OneOf(\"de\", \"por\")} primer {OneOf(\"mapeado\", \"mapeo\")} y {OneOf(\"de\", \"por\")} eficiencia {OneOf(\"concedidos\", \"obtenidos\")}.',\r\n\t\t\t\t\t'{report} {OneOf(\"Concedidos\", \"Obtenidos\")} bonos {OneOf(\"de\", \"por\")} primer {OneOf(\"mapeado\", \"mapeo\")} y {OneOf(\"de\", \"por\")} eficiencia.'\r\n\t\t\t\t\t))}\r\n\t\t\t|else:\r\n\t\t\t\t{set report to cat(OneOf(\r\n\t\t\t\t\t'{OneOf(\"Has sido el primero\", \"Hemos sido los primeros\")} en {OneOf(\"finalizar\", \"completar\", \"terminar\", \"realizar\")} este {OneOf(\"mapeado\", \"mapeo\", \"análisis\")} {Occasionally(2, \"de superficie\")}.',\r\n\t\t\t\t\t'{report} Bonificación {OneOf(\"de\", \"por\")} primer {OneOf(\"mapeado\", \"mapeo\")} {OneOf(\"concedida\", \"obtenida\")}.',\r\n\t\t\t\t\t'{report} {OneOf(\"concedida\", \"obtenida\")} bonificación {OneOf(\"de\", \"por\")} primer {OneOf(\"mapeado\", \"mapeo\")}.'\r\n\t\t\t\t\t'{report} Bono {OneOf(\"de\", \"por\")} primer {OneOf(\"mapeado\", \"mapeo\")} {OneOf(\"concedido\", \"obtenido\")}.',\r\n\t\t\t\t\t'{report} {OneOf(\"Concedido\", \"Obtenido\")} bono {OneOf(\"de\", \"por\")} primer {OneOf(\"mapeado\", \"mapeo\")}.'\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t{_ Leemos el informe _}\r\n\t{Pause(3000)}\r\n\t{report}\r\n\r\n\t{_ Leemos cuanto hemos ganado _}\r\n\t{if reportValue:\r\n\t\t{set scanValue to humaniza(scanValue)}\r\n\t\t{OneOf(\r\n\t\t\t'{scanValue} {de} créditos {OneOf(\"otorgados\", \"obtenidos\", \"reservados\", \"adjudicados\", \"abonados\", \"adquiridos\")}.',\r\n\t\t\t'{OneOf(\"otorgados\", \"obtenidos\", \"reservados\", \"adjudicados\", \"abonados\", \"adquiridos\")} {scanValue} {de} créditos.'\r\n\t\t)}\r\n\t\t{shirka}\r\n\t}\r\n\r\n\t{_ Recomendamos otros cuerpos según preferencias _}\r\n    {if recommendOtherMapping: {F(\"Bodies to map\")}}\r\n    \r\n    {_ Leemos otros informes del cuerpo según preferencias _}\r\n    {if bodyReport = 1:\r\n        {F(\"Body report summary\")}\r\n\t|elif bodyReport = 2:\r\n\t\t{F(\"Body report\")}\r\n\t|elif bodyReport = 3:\r\n    \t{F(\"Body report summary\")}\r\n    \t{F(\"Body report\")}\r\n    |elif bodyReport = 4:\r\n    \t{OneOf(F(\"Body report summary\"), F(\"Body report\"))}\r\n    |elif bodyReport > 4:\r\n    \t{OneOf(F(\"Body report summary\"), F(\"Body report\"), \"\")}\r\n    }\r\n\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Body materials report": {
      "name": "Body materials report",
      "description": "Informa de los materiales disponibles en el cuerpo objetivo",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from context _}\r\n{set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"))}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n\t{_ If it's still not possible to get the body name...  _}\r\n\t{Occasionally(2,\"Lo siento. \")}\r\n\t{OneOf(\"Hay interferencias en el sistema electrónico, y no consigo resultados óptimos en el escaneo de este cuerpo estelar\",\r\n\t\t\"No consigo datos claros del escáner\",\r\n\t\t\"Los datos del escáner se han corrompido antes de su recepción\",\r\n\t\t\"Parece que hay interferencias solares que no nos permiten el correcto escaneo de este planeta\"\r\n\t)}\r\n\r\n\r\n|else:\r\n\t{_ Define a function to obtain a material from inventory}\r\n\t{set _inventory(required) to:\r\n\t\t{for material in materials:\r\n\t\t\t{if material.material = required:\r\n\t\t\t\t{return material}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t{if reportbody.landable:\r\n\r\n\t\t{set goodmaterials to []}\r\n\t\t{set greatmaterials to []}\r\n\t\t{set othermaterials to []}\r\n\r\n\t\t{for material in reportbody.materials:\r\n\t\t\t{set inventoryMat to _inventory(material.material)}\r\n\t\t\t{if (reportMats >= 0 && inventoryMat.amount < inventoryMat.minimum && inventoryMat.minimum > 0)\r\n\t\t\t\t|| (reportMats >= 1 && inventoryMat.amount < inventoryMat.desired && inventoryMat.desired > 0)\r\n\t\t\t\t|| (reportMats >= 2):\r\n\t\t\t\t{if material.percentage >= material.definition.greatpctbody && reportMatConc > -1:\r\n\t\t\t\t\t{set greatmaterials to cat(greatmaterials, [material])}\r\n\t\t\t\t|elif material.percentage >= material.definition.goodpctbody && reportMatConc > 0:\r\n\t\t\t\t\t{set goodmaterials to cat(goodmaterials, [material])}\r\n\t\t\t\t|elif reportMatConc > 1:\r\n\t\t\t\t\t{set othermaterials to cat(othermaterials, [material])}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t{_ Start speaking _}\r\n\r\n\t\t{if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(othermaterials) > 0:\r\n\t\t\t{if reportbody.name = reportbody.shortname:\r\n\t\t\t\t{P(reportbody.shortname, \"body\")}\r\n\t\t\t|else:\r\n\t\t\t\t{OneOf(\"Este planeta\", cat(\"El cuerpo \", P(reportbody.shortname, \"body\"),\",\"))} \r\n\t\t\t}\r\n\t\t\t{OneOf(\"contiene\", \"tiene\")}\r\n\t\t}\r\n\r\n\t\t{if len(greatmaterials) > 0:\r\n\t\t\t{OneOf(\"niveles muy altos\", \"muy altos niveles\", \"niveles muy elevados\", \"muchísimos depósitos\")} de\r\n\t\t\t{set cur to 0}\r\n\t\t\t{set length to len(greatmaterials) - 1}\r\n\t\t\t{while cur < len(greatmaterials):\r\n\t\t\t\t{P(greatmaterials[cur].definition.name)}\r\n\t\t\t\t{if reportMatConc > 0: en un {round(greatmaterials[cur].percentage, 1)}% }\r\n\t\t\t\t{set cur to cur + 1}\r\n\t\t\t\t{if cur = length: y\r\n\t\t\t\t|elif cur < length:,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t{if len(goodmaterials) > 0 && len(othermaterials) = 0:\r\n\t\t\t\ty\r\n\t\t\t|elif len(goodmaterials) > 0 || len(othermaterials) > 0:\r\n\t\t\t\t,\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t{if len(goodmaterials) > 0:\r\n\t\t\t{OneOf(\"altos niveles\", \"niveles altos\", \"niveles elevados\", \"multitud de depósitos\")} de\r\n\t\t\t{set cur to 0}\r\n\t\t\t{set length to len(goodmaterials) - 1}\r\n\t\t\t{while cur < len(goodmaterials):\r\n\t\t\t\t{P(goodmaterials[cur].definition.name)}\r\n\t\t\t\t{if reportMatPercent > 1: en un {round(goodmaterials[cur].percentage, 1)}% }\r\n\t\t\t\t{set cur to cur + 1}\r\n\t\t\t\t{if cur = length: y\r\n\t\t\t\t|elif cur < length:,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t{if len(othermaterials) > 0:\r\n\t            y\r\n\t\t\t|else:\r\n\t\t\t\t,\r\n\t        }\r\n\t\t}\r\n\r\n\t\t{if len(othermaterials) > 0:\r\n            {OneOf(\"niveles moderados\", \"niveles bajos\", \"bajas concentraciones\", \"una cantidad modesta de depósitos\")} de\r\n            {set cur to 0}\r\n            {set length to len(othermaterials) - 1}\r\n            {while cur < len(othermaterials):\r\n                {P(othermaterials[cur].definition.name)}\r\n                {if reportMatPercent > 2: en un {round(othermaterials[cur].percentage, 0)}% }\r\n                {set cur to cur + 1}\r\n                {if cur = length: y\r\n                |elif cur < length:,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t{if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(othermaterials) > 0:\r\n            .\r\n        }\r\n    }\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Body Name Tidy": {
      "name": "Body Name Tidy",
      "description": "Function to shorten body names, and pronounce body name letters (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Body Name Tidy _}\r\n{_ Tidy up body names _}\r\n{_ If the body name contains the system name, it is removed _}\r\n{_ Adds Star, Planet, or Moon depending on body location within the system _}\r\n{_ Corrects pronunciation of letters in body names. No more 'hour' for 'h' with some TTS voices _}\r\n{_ Returns 'body' and 'body_type 'for use in other scripts _}\r\n\r\n\r\n{if len(reportbody.shortname) = 0:\r\n    {if event:\r\n        {if !event.name:\r\n            {_ For events that have different variables _}\r\n            {set reportbody to BodyDetails(event.body, event.system)}\r\n        |else:\r\n            {set reportbody to BodyDetails(event.name, system.name)}\r\n        }\r\n    |elif reportbody.stellarclass:\r\n        {set reportbody to BodyDetails(GetState(\"eddi_context_star_name\"), GetState(\"eddi_context_star_system\"))}\r\n    |else:\r\n        {set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_system_system\"))}\r\n    }\r\n}\r\n\r\n{set body to reportbody.name}\r\n{set system to reportbody.systemname}\r\n\r\n{if body = system:\r\n    {set body to \"The primary star\"}\r\n    {set body_type to \"Star\"}\r\n\r\n|elif find(body, system) > -1:\r\n\r\n    {set parent to split(body, \" \")}\r\n    {set p_body to parent[len(parent)-2]}\r\n    {set parent to join(except(parent, [len(parent)-1:\"\", len(parent)-1:\"\"]), \" \")}\r\n\r\n    {if (parent != system) && len(p_body) = 1:\r\n        {set parent to BodyDetails(parent, system).type}\r\n    }\r\n\r\n    {_ Remove system name from the body name _}\r\n    {if reportbody.shortname:\r\n        {set body to reportbody.shortname}\r\n    |else:\r\n        {set body to slice(body, len(system)+1)}\r\n    }\r\n\r\n    {set type to reportbody.type}\r\n    {set body_type to type}\r\n\r\n    {_ Remove Ring designation if it's a ring _}\r\n    {if find(body, \"Ring\") > -1:\r\n        {set body to split(body, \" \")}\r\n        {set body to join(except(body, [len(body)-1:\"\", len(body)-2:\"\"]), \" \")}\r\n    }\r\n\r\n    {_ Replacing spaces with dashes makes all letters spoken as alphabetic letters _}\r\n    {set body to ucase(join(split(body, \" \"), \"-\"))}\r\n\r\n    {if find(body, \"+\") > -1:\r\n        {_ For scans that list two planets. Probably redundant with the new scanning. _}\r\n        {set body to List(split(body, \"+\"))}\r\n        {set body_type to \"Planets\"}\r\n    |elif type = \"Planet\" && (parent = \"Planet\" || ord(slice(body, len(body)-1)) > 64):\r\n        {set body_type to \"Moon\"}\r\n    }\r\n\r\n    {set body to cat(body_type, \"-\", body)}\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Body report": {
      "name": "Body report",
      "description": "Informa sobre el contenido del cuerpo estelar",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from context _}\r\n{set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"))}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    No consigo entender a que cuerpo estelar te refieres.\r\n\r\n|elif reportbody.planettype = \"Ninguno\":\r\n    Esto no es ningún planeta, Comandante.\r\n\r\n|else:\r\n\t{set report to []}\r\n\t{set cuerpo to \"El \"}\r\n    {if reportbody.shortname != reportbody.name: {set cuerpo to cat(cuerpo, OneOf(\"cuerpo\", \"cuerpo estelar\", \"objeto\"))} }\r\n    {set cuerpo to cat(cuerpo, \" \", P(reportbody.shortname, 'body'), \", es un \", P(reportbody.planettype, 'planettype'))}\r\n\t\r\n\t{if reportGravity:\r\n    \t{if reportbody.gravity < 0.5:\r\n        \t{set report to cat(report, [\"de baja gravedad\"])}\r\n    \t|elif reportbody.gravity <2:\r\n        \t{set report to cat(report, [\"de media gravedad\"])}\r\n    \t|elif reportbody.gravity <4:\r\n        \t{set report to cat(report, [\"de alta gravedad\"])}\r\n    \t|else:\r\n        \t{set report to cat(report, [\"de extrema gravedad\"])}\r\n    \t}\r\n    }\r\n\r\n\t{if reportRings:\r\n    \t{if len(reportbody.rings) = 1:\r\n    \t\t{set report to cat(report, [OneOf(\"con anillo de asteroides\", \"anillado\")])}\r\n\t    |elif len(reportbody.rings) > 1:\r\n    \t\t{set report to cat(report, [cat(\"con \", len(reportbody.rings), \" anillos de asteroides\")])}\r\n    \t}\r\n    }\r\n\r\n    {if reportTerraformState && reportbody.terraformstate != \"no terraformable\": \r\n\t\t{set report to cat(report, [reportbody.terraformstate])}\r\n    }\r\n\r\n\t{if reportLandable:\r\n    \t{if reportbody.landable:\r\n    \t\t{set report to cat(report, [OneOf(\"{OneOf('adecuado', 'apto')} para aterrizar\", \"aterrizable\")])}\r\n\t    |else:\r\n\t\t\t{set report to cat(report, [OneOf(\"{OneOf('inadecuado', 'no apto')} para aterrizar\", \"no aterrizable\")])}\r\n    \t}\r\n    }\r\n\r\n    {if reportRotation:\r\n    \t{set rotacion to cat(Occasionally(2, \"que\"), \" tiene un período de rotación \")}\r\n        {if reportbody.rotationalperiod < -20.0:\r\n        \t{set rotacion to cat(rotacion, OneOf(\"retrógrado\", \"inverso\"), \" \", OneOf(\" bajo\", \" lento\"))}\r\n        |elif reportbody.rotationalperiod < -0.5:\r\n            {set rotacion to cat(rotacion, OneOf(\"retrógrado\", \"inverso\"))}\r\n        |elif reportbody.rotationalperiod < 0:\r\n            {set rotacion to cat(rotacion, OneOf(\"retrógrado\", \"inverso\"), \" \", OneOf(\" alto\", \" rápido\"))}\r\n        |elif reportbody.rotationalperiod <= 0.5:\r\n            {set rotacion to cat(rotacion, OneOf(\"alto\", \"rápido\"))}\r\n        |elif reportbody.rotationalperiod > 20.0:\r\n            {set rotacion to cat(rotacion, OneOf(\"bajo\", \"lento\"))}\r\n        }\r\n        {set rotacion to cat(rotacion, \" de \")}\r\n        {if abs(reportbody.rotationalperiod) < 1:\r\n        \t{set horas to round(24 * (abs(reportbody.rotationalperiod)))}\r\n        \t{if horas != 1: {set s to \"s\"}}\r\n        \t{set rotacion to cat(rotacion, horas, \" hora\", s)}\r\n        |else:\r\n        \t{if floor(abs(reportbody.rotationalperiod)) != 1:\r\n        \t\t{set s to \"s\"}\r\n        \t\t{set rotacion to cat(rotacion, floor(abs(reportbody.rotationalperiod)), \" días\")}\r\n        \t|else:\r\n        \t\t{set rotacion to cat(rotacion, \" un dia\")}\r\n        \t}\r\n        \t{set horas to round(24 * (abs(reportbody.rotationalperiod) - floor(abs(reportbody.rotationalperiod))))}\r\n        \t{if horas:\r\n        \t\t{set s to \"\"}\r\n        \t\t{if horas != 1: {set s to \"s\"}}\r\n        \t\t{set rotacion to cat(rotacion, \" y \", horas, \" hora\", s)}\r\n        \t}\r\n        }\r\n        {set rotacion to cat(rotacion, \" terrestre\", s)}\r\n\t    {if reportbody.tidallylocked = true:\r\n    \t\t{set rotacion to cat(rotacion, \" con \", OneOf(\"acoplamiento de marea\", \"rotación sincrónica\"))}\r\n    \t}\r\n    \t{set report to cat(report, [rotacion])}\r\n    }\r\n    \r\n    {_ comienza el reporte _}\r\n\r\n\t{set reportCount to len(report)}\r\n\t{set cur to 0}\r\n    {while cur < reportCount:\r\n        {if cur = reportCount - 1:\r\n        \t{if find(report[cur + 1], \"i\") = 0:\r\n        \t\t{set reportReport to cat(reportReport, Pause(500), \" e \")}\r\n        \t|else:\r\n        \t\t{set reportReport to cat(reportReport, Pause(500), \" y \")}\r\n        \t}\r\n        |elif cur = floor(reportCount/2):\r\n        \t{set reportReport to cat(reportReport, \", \", Pause(200))}\r\n        |else:\r\n        \t{set reportReport to cat(reportReport, \", \")}\r\n\t\t}\r\n\t\t{set reportReport to cat(reportReport, report[cur])}\r\n        {set cur to cur + 1}\r\n\t}\r\n\t\r\n\t{cuerpo} {reportReport}.\r\n\t\r\n\t{if reportVolcanism: {F(\"Body volcanism report\")} }\r\n\r\n \t{if reportAtmosphere: {F(\"Body atmosphere report\")} }\r\n\r\n\t{if reportMaterials = 1 || (reportMaterials = 2 && reportbody.volcanism):\r\n\t\t{F(\"Body materials report\")}\r\n\t}\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Body report summary": {
      "name": "Body report summary",
      "description": "Función para informar sobre detalles resumidos del cuerpo contextual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Define functions for converting temperature scales _}\r\n{set ToCelsius(kelvin) to: {return kelvin - 273.15}}\r\n{set ToFahrenheit(kelvin) to: {return (kelvin-273.15)*9/5 + 32}}\r\n{set TempCalc(kelvin) to: \r\n    {if reportSummaryTemperature = 1:\r\n    \t{return round(kelvin))}\r\n    |elif reportSummaryTemperature = 2:\r\n    \t{return ToCelsius(round(kelvin))}\r\n    |elif reportSummaryTemperature = 3:\r\n    \t{return ToFahrenheit(round(kelvin))}\r\n    }\r\n}\r\n\r\n{_ Name our temperature scale _}\r\n{if reportSummaryTemperature = 1:\r\n\t{set tempscale to \"Kelvin\"}\r\n|elif reportSummaryTemperature = 2:\r\n\t{set tempscale to cat(\"grados \", Occasionally(2, 'centígrados'))}\r\n|elif reportSummaryTemperature = 3:\r\n\t{set tempscale to  \"grados Fahrenheit\"}\r\n}\r\n\r\n{_ Fetch from context _}\r\n{set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))}\r\n{if !reportbody: \r\n    {set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"))}\r\n}\r\n\r\n{_ Begin speaking _}\r\n{if !reportbody.name || reportbody.name = \"\":\r\n\r\n    No tengo claro a que cuerpo estelar se refiere.\r\n\r\n|else:\r\n{_ Begin processing _}\r\n\t{set notables to []}\r\n\t\r\n\t{if reportInterestingOrbits:\r\n\t    {set orbitNotables to []}\r\n\t    {if reportbody.eccentricityprobability > 99.9 && reportExtremes > 0:\r\n\t        {set orbitNotables to cat(orbitNotables, [cat(\"increiblemente \", OneOf(\"elíptica\", \"ovalada\", \"alargada\"))])}\r\n\t    |elif reportbody.eccentricityprobability > 99 && reportExtremes > 1:\r\n\t        {set orbitNotables to cat(orbitNotables, [cat(\"extremadamente \", OneOf(\"elíptica\", \"ovalada\", \"alargada\"))])}\r\n\t    |elif reportbody.eccentricityprobability > 97 && reportExtremes > 2:\r\n\t        {set orbitNotables to cat(orbitNotables, [cat(\"inusualmente \", OneOf(\"elíptica\", \"ovalada\", \"alargada\"))])}\r\n\t\t}\r\n\t\r\n\t    {if reportbody.inclinationprobability > 99.9 && reportExtremes > 0:\r\n\t        {set orbitNotables to cat(orbitNotables, [\"increiblemente inclinada\"])}\r\n\t    |elif reportbody.inclinationprobability > 99 && reportExtremes > 1:\r\n\t        {set orbitNotables to cat(orbitNotables, [\"extremadamente inclinada\"])}\r\n\t    |elif reportbody.inclinationprobability > 97 && reportExtremes > 2:\r\n\t        {set orbitNotables to cat(orbitNotables, [\"inusualmente inclinada\"])}\r\n\t    }\r\n\t\r\n\t    {if reportbody.orbitalperiod < 0:\r\n\t    \t{set orbitRetrograde to \" retrógrada\"}\r\n\t    }\r\n\t    {if reportbody.orbitalperiodprobability < 0.1 && reportExtremes > 0:\r\n\t        {set orbitNotables to cat(orbitNotables, [\"increiblemente rápida\"])}\r\n\t    |elif reportbody.orbitalperiodprobability < 1 && reportExtremes > 1:\r\n\t        {set orbitNotables to cat(orbitNotables, [\"extremadamente rápida\"])}\r\n\t    |elif reportbody.orbitalperiodprobability < 3 && reportExtremes > 2:\r\n\t        {set orbitNotables to cat(orbitNotables, [\"inusualmente rápida\"])}\r\n\t\t}\r\n\r\n\t\t{if len(orbitNotables):\r\n\t\t\t{set notables to cat(notables, [cat(\"una órbita\" , orbitRetrograde, \" \", List(orbitNotables))])}\r\n\t\t}\r\n\t}\r\n\t\r\n\t{if reportRapidRotation:\r\n\t\t{if reportbody.rotationalperiod < 0:\r\n\t\t\t{set rotationRetrograde to \"retrógrado\"}\r\n\t\t}\r\n\t    {if reportbody.rotationalperiodprobability < 0.1 && reportExtremes > 0:\r\n\t        {set rotationNotables to cat(\"un período de rotación \", rotationRetrograde, \" increiblemente corto\")}\r\n\t    |elif reportbody.rotationalperiodprobability < 1 && reportExtremes > 1:\r\n\t        {set rotationNotables to cat(\"un período de rotación \", rotationRetrograde, \" extremadamente corto\")}\r\n\t    |elif reportbody.rotationalperiodprobability < 3 && reportExtremes > 2:\r\n\t        {set rotationNotables to cat(\"un período de rotación \", rotationRetrograde, \" inusualmente corto\")}\r\n\t    }\r\n\t    {if rotationNotables:\r\n\t        {set rotationalperiod to humaniza(abs(reportbody.rotationalperiod))}\r\n\t    \t{set notables to cat(notables, [cat(rotationNotables, \" \", Occasionally(2, \"de {rotationalperiod} días\"))])}\r\n\t    }\r\n\t}\r\n\t\r\n\t{if reportNotableMass:\r\n\t    {if reportbody.massprobability < 0.1 && reportExtremes > 0:\r\n\t        {set massNotables to cat(\"una masa \", OneOf('extremadamente pequeña', 'minúscula muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.massprobability < 1 && reportExtremes > 1:\r\n\t        {set massNotables to cat(\"una masa \", OneOf('inusualmente pequeña', 'muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.massprobability < 3 && reportExtremes > 2:\r\n\t        {set massNotables to cat(\"una masa \", OneOf('relativamente pequeña', 'por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.massprobability > 99.9 && reportExtremes > 0:\r\n\t        {set massNotables to cat(\"una masa \", OneOf('extremadamente grande', 'enorme muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.massprobability > 99 && reportExtremes > 1:\r\n\t        {set massNotables to cat(\"una masa \", OneOf('inusualmente grande', 'muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.massprobability > 97 && reportExtremes > 2:\r\n\t        {set massNotables to cat(\"una masa \", OneOf('relativamente grande', 'por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    }\r\n\t    {if massNotables:\r\n\t        {set earthmass to humaniza(round(reportbody.earthmass, 1))}\r\n\t        {set notables to cat(notables, [cat(massNotables, \" \", Occasionally(2, \"de {earthmass} veces la de la Tierra\"))])}\r\n\t    }\r\n\t}\r\n\r\n\t{if reportNotableRadius:\r\n\t\t{if reportbody.radiusprobability < 0.1 && reportExtremes > 0:\r\n\t        {set radiusNotables to cat(\"un radio \", OneOf('extremadamente pequeño', 'minúsculo muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.radiusprobability < 1 && reportExtremes > 1:\r\n\t        {set radiusNotables to cat(\"un radio \", OneOf('inusualmente pequeño', 'muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.radiusprobability < 3 && reportExtremes > 2:\r\n\t        {set radiusNotables to cat(\"un radio \", OneOf('relativamente pequeño', 'por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.radiusprobability > 99.9 && reportExtremes > 0:\r\n\t        {set radiusNotables to cat(\"un radio \", OneOf('extremadamente grande', 'enorme muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.radiusprobability > 99 && reportExtremes > 1:\r\n\t        {set radiusNotables to cat(\"un radio \", OneOf('inusualmente grande', 'muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.radiusprobability > 97 && reportExtremes > 2:\r\n\t        {set radiusNotables to cat(\"un radio \", OneOf('relativamente grande', 'por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    }\r\n\t    {set radiusValue to humaniza(round(reportbody.radius))}\r\n\t\t{if radiusNotables:\r\n\t\t\t{set notables to cat(notables, [cat(radiusNotables, \" \", Occasionally(2, \"de {radiusValue} {de} kilómetros\"))])}\r\n\t    }\r\n\t}\r\n\t\r\n\t{if reportSummaryTemperature:\r\n\t    {if reportbody.tempprobability < 0.1 && reportExtremes > 0:\r\n\t        {set tempNotables to cat(\"una temperatura \", Occasionally(2, 'superficial'), \" \", OneOf('extremadamente baja', 'extrema muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.tempprobability < 1 && reportExtremes > 1:\r\n\t        {set tempNotables to cat(\"una temperatura \", Occasionally(2, 'superficial'), \" \", OneOf('inusualmente baja', 'muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.tempprobability < 3 && reportExtremes > 2:\r\n\t        {set tempNotables to cat(\"una temperatura \", Occasionally(2, 'superficial'), \" \", OneOf('relativamente baja', 'por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.tempprobability > 99.9 && reportExtremes > 0:\r\n\t        {set tempNotables to cat(\"una temperatura \", Occasionally(2, 'superficial'), \" \", OneOf('extremadamente alta', 'extrema muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.tempprobability > 99 && reportExtremes > 1:\r\n\t        {set tempNotables to cat(\"una temperatura \", Occasionally(2, 'superficial'), \" \", OneOf('inusualmente alta', 'muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.tempprobability > 97 && reportExtremes > 2:\r\n\t        {set tempNotables to cat(\"una temperatura \", Occasionally(2, 'superficial'), \" \", OneOf('relativamente alta', 'por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    }\r\n\t    {if tempNotables:\r\n\t        {set temperature to humaniza(TempCalc(reportbody.temperature))}\r\n\t    \t{set notables to cat(notables, [cat(tempNotables, \" \", Occasionally(2, \"de {temperature} {tempscale}\"))])}\r\n\t    }\r\n\t}\r\n\t\r\n\t{if reportNotableGravity && reportbody.landable:\r\n\t    {if reportbody.gravityprobability < 0.1 && reportExtremes > 0:\r\n\t        {set gravNotables to cat(\"una gravedad \", OneOf('extremadamente baja', 'ínfima muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.gravityprobability < 1 && reportExtremes > 1:\r\n\t        {set gravNotables to cat(\"una gravedad \", OneOf('inusualmente baja', 'muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.gravityprobability < 3 && reportExtremes > 2:\r\n\t        {set gravNotables to cat(\"una gravedad \", OneOf('relativamente baja', 'por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.gravityprobability > 99.9 && reportExtremes > 0:\r\n\t        {set gravNotables to cat(\"una gravedad \", OneOf('extremadamente alta', 'extrema muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.gravityprobability > 99 && reportExtremes > 1:\r\n\t        {set gravNotables to cat(\"una gravedad \", OneOf('inusualmente alta', 'muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.gravityprobability > 97 && reportExtremes > 2:\r\n\t        {set gravNotables to cat(\"una gravedad \", OneOf('relativamente alta', 'por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    }\r\n\t    {if gravNotables:\r\n\t        {set gravity to humaniza(reportbody.gravity, 1)}\r\n\t    \t{set notables to cat(notables, [cat(gravNotables, \" \", Occasionally(2, \"de {gravity} {OneOf('g', 'veces la de la tierra')}\"))])}\r\n\t    }\r\n\t}\r\n\t\r\n\t\r\n\t{if reportNotableDensity:\r\n\t    {if reportbody.densityprobability < 0.1 && reportExtremes > 0:\r\n\t        {set densityNotables to cat(\"una densidad \", OneOf('extremadamente baja', 'extrema muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.densityprobability < 1 && reportExtremes > 1:\r\n\t        {set densityNotables to cat(\"una densidad \", OneOf('inusualmente baja', 'muy por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.densityprobability < 3 && reportExtremes > 2:\r\n\t        {set densityNotables to cat(\"una densidad \", OneOf('relativamente baja', 'por debajo de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.densityprobability > 99.9 && reportExtremes > 0:\r\n\t        {set densityNotables to cat(\"una densidad \", OneOf('extremadamente alta', 'extrema muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.densityprobability > 99 && reportExtremes > 1:\r\n\t        {set densityNotables to cat(\"una densidad \", OneOf('inusualmente alta', 'muy por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    |elif reportbody.densityprobability > 97 && reportExtremes > 2:\r\n\t        {set densityNotables to cat(\"una densidad \", OneOf('relativamente alta', 'por encima de {OneOf(\"la media\", \"lo normal\", \"lo esperable\")}'))}\r\n\t    }\r\n\t    {if densityNotables:\r\n\t        {set density to humaniza(round(reportbody.density))}\r\n\t    \t{set notables to cat(notables, [cat(densityNotables, \" \", Occasionally(2, \"de {density} kilogramos por metro cúbico\"))])}\r\n\t    }\r\n\t}\r\n\t\r\n\t{if len(notables) > 1: {set prefijo to Occasionally(2, 'entre los de su tipo')}}\r\n\t\r\n\t{if reportSummaryVolcanism:\r\n\t    {if reportbody.volcanism && reportbody.landable:\r\n\t        {set notables to cat(notables, [cat(\"actividad \", OneOf(\"volcánica\", \"tectónica\"))])}\r\n\t    }\r\n\t}\r\n\t\r\n\t{if reportSummaryRings:\r\n\t    {if reportbody.rings:\r\n\t        {set ringcompositions to []}\r\n\t        {for ring in reportbody.rings:\r\n                {if find(ringcompositions, ring.composition) = -1:\r\n\t\t\t\t\t{set ringcompositions to cat(ringcompositions, [cat(ring.composition)])}\r\n\t            }\r\n\t        }\r\n\r\n\t        {if ringcompositions:\r\n\t            {if len(ringcompositions) = 1:\r\n                    {set un to \"un \"}\r\n\t                {set rings to \"anillo\"}\r\n\t            |else:\r\n\t            \t{set un to OneOf(\"varios\", \"unos\")}\r\n\t                {set rings to \"anillos\"}\r\n\t                {set anillos to []}\r\n\t\t\t\t\t{for composicion in ringcompositions:\r\n\t\t\t\t\t\t{set anillos to cat(anillos, [token(composicion, \" \", 0, cat(split(composicion, \" \")[0], \"s\"))])}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{set ringcompositions to anillos}\r\n\t            }\r\n\t            {if reportbody.reserves = \"Menor\":\r\n\t                {set reserves to \"reservas menores en \"}\r\n\t            |elif reportbody.reserves = \"Común\":\r\n\t                {set reserves to \"reservas comunes en \"}\r\n\t\t\t\t|elif reportbody.reserves = \"Mayor\":\r\n\t\t\t\t\t{set reserves to \"reservas mayores en \"}\r\n\t\t\t\t|elif reportbody.reserves = \"Prístina\":\r\n\t\t\t\t\t{set reserves to cat(\"reservas \", OneOf('prístinas', 'vírgenes'), \" en \")}\r\n\t\t\t\t|elif reportbody.reserves = \"Agotada\":\r\n\t\t\t\t\t{set reserves to \"reservas agotadas en \"}\r\n\t            }\r\n\t            {set notables to cat(notables, [cat(reserves, un, \" \", rings, \" \", List(ringcompositions))])}\r\n\t        }\r\n\t    }\r\n\t}\r\n\t\r\n\t{if reportSummaryTerraformables:\r\n\t    {if reportbody.terraformstate = \"Candidato para terraformación\":\r\n\t        {set notables to cat(notables, [OneOf(\"potencial para terraformación\", \"condiciones terraformables\")])}\r\n\t    |elif reportbody.terraformstate = \"Terraformed\":\r\n\t        {set notables to cat(notables, [\"condiciones terraformadas\"])}\r\n\t    }\r\n\t}\r\n\t\r\n\t{if reportSummaryPlanetTypes:\r\n\t    {if reportbody.planettype = \"Mundo similar a la Tierra\":\r\n\t    \t{if len(notables) > 1:\r\n\t    \t\t{set habitable to \"la Tierra\"}\r\n\t    \t|else:\r\n\t    \t\t{set habitable to OneOf('esta', 'ella')}\r\n\t    \t}\r\n\t    \t{set notables to cat(notables, [cat(\"condiciones \", OneOf('habitables', 'de habitabilidad'), \" como las de \", habitable)])}\r\n\t    |elif reportbody.planettype = \"Mundo acuático\":\r\n\t        {set notables to cat(notables, [OneOf(\"abundante agua líquida\", \"abundante agua líquida en la superficie\")])}\r\n\t    }\r\n\t}\r\n\r\n    {if len(notables):\r\n        {if reportbody.shortname != reportbody.bodyname:\r\n            {if reportbody.bodytype:\r\n             \t{if reportbody.bodytype = \"Luna\":\r\n             \t\t{set report to \"La\"}\r\n             \t|else:\r\n             \t\t{set report to \"El\"}\r\n             \t}\r\n             \t{set report to cat(report, \" \", reportbody.bodytype)}\r\n            |else:\r\n            \t{set report to \"El cuerpo\"}\r\n            }\r\n            {set report to cat(report, \" \", P(reportbody.shortname, \"body\"))}\r\n        |else:\r\n            {set report to P(reportbody.bodyname, \"body\")}\r\n        }\r\n\r\n\r\n\t\t{set sufijo to OneOf('al tener', 'que tiene', 'por tener')}\r\n\t\t{if len(notables) = 1:\r\n\t\t\t{set sufijo to OneOf('con', 'que tiene')}\r\n        |elif len(notables) = 2:\r\n            {set desc to OneOf(\"interesante\", \"a tener en cuenta\", \"remarcable\", \"a destacar\", \"destacable\", \"a remarcar\")}\r\n        |elif len(notables) = 3:\r\n            {set desc to OneOf(\"muy interesante\", \"muy a tener en cuenta\", \"muy remarcable\", \"muy destacable\")}\r\n        |elif len(notables) = 4:\r\n            {set desc to OneOf(\"excepcional\", \"como pocos\", \"extraordinario\", \"muy peculiar\")}\r\n        |elif len(notables) >= 5:\r\n            {set desc to OneOf(\"sin par\", \"único\", \"sin igual\")}\r\n        }\r\n        \r\n        {set pausa to OneOf(Occasionally(2,Pause(40)), ',')}\r\n        {set report to cat(report, \", es un \", P(reportbody.planettype,  \"planettype\"), \" \", desc, \" \", prefijo, pausa, \" \", sufijo, \" \", List(notables), \".\")}\r\n\r\n\t\t{_ Di el informe _}\r\n    \t{report}\r\n    }\r\n}\r\n    {if reportSummaryMaterials: {F(\"Body materials report\")}\r\n\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Body scanned": {
      "name": "Body scanned",
      "description": "Se activa cuando completas el escaneo de un cuerpo planetario",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'body')}\n{SetState('eddi_context_last_action', 'scan')}\n{SetState('eddi_context_body_system', event.systemname)}\n{SetState('eddi_context_body_name', event.bodyname)}\n{SetState('eddi_context_last_scan_estimated_value', getBodyValue(BodyDetails(event.bodyname, event.systemname)))}\n{SetState('eddi_context_last_scan_max_value', getMaxBodyValue(BodyDetails(event.bodyname, event.systemname)))}\r\n\r\n{if !GetState(\"eddi_context_body_lastscan_cooldown\"): {SetState('eddi_context_body_lastscan_cooldown', 0)}}\r\n\r\n\r\n{if ((SecondsSince(GetState(\"eddi_context_body_lastscan_timestamp\")) > GetState(\"eddi_context_body_lastscan_cooldown\")) && (system.totalbodies != system.scannedbodies)) || esValioso(event):\r\n\t{_ Establece espera entre escaneos _}\r\n\t{SetState('eddi_context_body_lastscan_timestamp', SecondsSince(0))}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t{set a to \"o\"}\r\n\t{set cuerpo to cat(OneOf(\"{event.bodytype} {if event.bodytype = 'Luna': {set a to 'a'}}\", \"cuerpo {Occasionally(4, OneOf('astronómico', 'estelar'))}\", \"objeto {Occasionally(4, OneOf('astronómico', 'estelar'))}\"), \" \", P(event.shortname, \"body\"))}\r\n\t{if reportPlanetType = 1:\r\n\t\t{set a to \"o\"}\r\n\t\t{set cuerpo to event.planettype}\r\n\t|elif reportPlanetType > 1:\r\n\t\t{set cuerpo to OneOf(\"{event.planettype}{set a to 'o'}\", cuerpo)}\r\n\t}\r\n\r\n\t{if event.alreadydiscovered:\r\n\t\t{set report to OneOf(\n\t\t\t'{cuerpo} {Pause(30)} {OneOf(\"identificad{a}\", \"analizad{a}\", \"escanead{a}\", \"explorad{a}\")}.',\n\t\t\t'{OneOf(\"Escanead{a}\", \"Identificad{a}\", \"Detectad{a}\", \"Analizad{a}\", \"Explorad{a}\")} {cuerpo}.',\n\t\t\t'{OneOf(\"Escaneo\", \"Análisis\")} de {cuerpo} {Pause(30)} {OneOf(\"completado\", \"terminado\", \"finalizado\", \"concluido\", \"realizado\")}.',\n\t\t\t'{OneOf(\"Identificación\", \"Detección\", \"Catalogación\", \"Exploración\")} de {cuerpo} {Pause(30)} {OneOf(\"completada\", \"terminada\", \"finalizada\", \"concluida\", \"realizada\")}.'\n\t\t)}\n\t|else:\n\t\t{set report to OneOf(\n\t\t\t'{cuerpo} {Pause(30)} {OneOf(\"descubiert{a}\", \"escanead{a} por primera vez\", \"catalogad{a}\", \"añadid{a} al mapa galáctico\", \"añadid{a} a la cartografía universal\")}.',\n\t\t\t'{OneOf(\"Descubiert{a}\", \"Catalogad{a}\")} {cuerpo}.',\n\t\t\t'{OneOf(\"Escanead{a}\", \"Identificad{a}\")} {cuerpo} {Pause(30)} por primera vez.',\n\t\t\t'Añadid{a} {cuerpo} {Pause(30)} {OneOf(\"al mapa galáctico\", \"a la cartografía universal\")}.',\n\t\t\t'Primer {OneOf(\"escaneo\", \"análisis\")} de {cuerpo} {Pause(30)} {OneOf(\"completado\", \"terminado\", \"finalizado\", \"concluido\", \"realizado\")}.',\n\t\t\t'Primera {OneOf(\"identificación\", \"detección\", \"catalogación\")} de {cuerpo} {Pause(30)} {OneOf(\"completada\", \"terminada\", \"finalizada\", \"concluida\", \"realizada\")}.'\n\t\t)}\n\t}\n\t\n\t{SetState('eddi_context_body_lastscan_cooldown', round(len(report) * 0.05))}\n\t{report}\n\t\n\t{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\n\t\t{if esValioso(event):\n\t\t\t{Pause(25)}\n\t\t\t{set report to F(\"Report last scan value\")}\n\t\t\t{_ Espera entre escaneos: 0,05 segundos por letra _}\n\t\t\t{SetState('eddi_context_body_lastscan_cooldown', round(GetState('eddi_context_body_lastscan_cooldown') + (len(report) * 0.05)))}\n\t\t\t{report}\n\t\t}\n\r\n\t\t{if reportSummary:\r\n\t\t\t{Pause(25)}\r\n\t\t\t{set report to F(\"Body report summary\")}\r\n\t\t\t{_ Espera entre escaneos: 0,05segundos por letra _}\r\n\t\t\t{SetState('eddi_context_body_lastscan_cooldown', round(GetState('eddi_context_body_lastscan_cooldown') + (len(report) * 0.05)))}\r\n\t\t\t{report}\r\n\t\t}\r\n\t}\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Body volcanism report": {
      "name": "Body volcanism report",
      "description": "Informa del vulcanismo del cuerpo contextual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"))}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    No se a que cuerpo estelar se refiere\r\n|else:\r\n    {if (reportbody.volcanism || len(reportbody.volcanism) > 0):\r\n        {OneOf(\"Se ha detectado\", \"Los sensores detectan\", \"Este {reportbody.planettype} tiene\")}\r\n        {if reportbody.volcanism.amount = 'Mayor':\r\n        \t{OneOf(\r\n        \t\t'un {OneOf(\"alto\", \"gran\")} número de',\r\n        \t\t'una {OneOf(\"alta\", \"gran\")} concentración de'\r\n        \t)}\r\n        |elif reportbody.volcanism.amount = 'Menor':\r\n        \t{OneOf(\r\n        \t\t'una {OneOf(\"pequeña\", \"baja\")} {OneOf(\"cantidad\", \"concentración\")} de',\r\n        \t\t'unos {OneOf(\"cuantos\", \"pocos\")}'\r\n        \t)}\r\n        }\r\n        {if reportbody.volcanism.type = \"Géiseres\":\r\n        \t{OneOf(\r\n        \t\t'géiseres',\r\n        \t\t'respiraderos'\r\n        \t)}\r\n        |else:\r\n        \t{OneOf(\r\n        \t\t'{Occasionally(2,\"puntos de\")} flujos',\r\n        \t\t'{OneOf(\"brotes\", \"volcanes\")}'\r\n        \t)}\r\n        }\r\n        de {reportbody.volcanism.composition} {Occasionally(2,\"activos\")} {Occasionally(2, \"en la superficie\")}.\r\n    }\r\n}",
      "default": false,
      "includes": null
    },
    "Bond awarded": {
      "name": "Bond awarded",
      "description": "Se activa cuando se otorga un bono de combate",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Bond awarded }\n{_ Triggered when you are awarded a combat bond }\n\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'award')}\n{SetState('eddi_context_bond_amount', event.reward)}\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\n\n{set reward to humaniza(event.reward)}\n\n{if event.victimfaction = \"Thargoid\":\n\t{set report to\n\t\tOneOf(\n\t\t\t'{OneOf(\"Derrotado\", \"Eliminado\", \"Derribado\", \"Abatido\")} Targoide',\n\t\t\t'Targoide  {OneOf(\"derrotado\", \"eliminado\", \"derribado\", \"abatido\")}',\n\t\t\t'Baja Targoide confirmada'\n\t\t)\n\t}\n|else:\n\t{set report to\n\t\tOneOf(\n\t\t\t'{OneOf(\"Derrotado\", \"Eliminado\", \"Derribado\", \"Abatido\")} {OneOf(\"enemigo\", \"rival\", \"adversario\", \"oponente\")}',\n\t\t\t'{OneOf(\"Enemigo\", \"Rival\", \"Adversario\", \"Oponente\")} {OneOf(\"derrotado\", \"eliminado\", \"derribado\", \"abatido\")}',\n\t\t\t'Baja confirmada'\n\t\t)\n\t}\n\t{set report to cat(report, Occasionally(4, \" de {Occasionally(2, 'la facción')} {P(event.victimfaction, 'faction')}\"))}\n}\n\n{set report to\n\tcat(report, \"; \",\n\t\tOneOf(\n\t\t\t'{OneOf(\"ganados\", \"otorgados\", \"recibidos\")} {reward} créditos',\n\t\t\t'{reward} créditos {OneOf(\"ganados \", \"otorgados \", \"recibidos \")}'\n\t\t),\n\t\t\" \", Occasionally(2, \"en bonos de combate \"), Occasionally(4, \" de {Occasionally(2, 'la facción')} {P(event.awardingfaction, 'faction')}\")\n\t)\n}\n\n{leeTexto(report)}.\n\n{set felicitacion to \"{OneOf(\n\t'Muy bien',\n\t'Sigue así',\n\t'Buen trabajo',\n\t'Bien hecho',\n\t'Así se hace',\n\t'No hay quién te pare',\n\t'A por ellos'\n\t)} {Occasionally(4, F('Honorific'))}\"\n}\n\n{if ShirkaSarcastica: {Occasionally(10, Transmit(\"¡{felicitacion}!\"))}}\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Bond redeemed": {
      "name": "Bond redeemed",
      "description": "Se activa cuando canjeas un bono de combate",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_bond_amount', event.amount)}\n\n{set amount to humaniza(event.amount)}\n\n{set report to cat(OneOf(\"Cobrados\", \"Entregados\", \"Reclamados\"), \" bonos de combate por valor de \", amount, \" \", de, \" créditos\")} \n\n{if rand(2):\n    {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n        {set report to cat(report, \"de \", P(event.rewards[0].faction))}\n    |else:\n        {set cur to 0}\n        {while cur < len(event.rewards):\n            {if len(event.rewards[cur].faction) > 0:\n                {if cur = 0:\n                    {set report to cat(report, \":\")}\n                |elif cur < len(event.rewards) - 1:\n                    {set report to cat(report, \",\")} \n                |else:\n                    {set report to cat(report, \" y\")}\n                }\n                {set report to cat(report, \" \", event.rewards[cur].amount, Occasionally(2,\" créditos\"), \" de \", P(event.rewards[cur].faction))}\n                {set cur to cur + 1}\n            }\n        }\n    }\n}\n\n{if event.brokerpercentage && event.brokerpercentage > 0:\n    {set report to cat(report, \"después de deducir \", OneOf('un pago', 'una comisión'), \" de \", round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0), \" créditos\")}\n}\n\n{leeTexto(report)}.",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Book transport": {
      "name": "Book transport",
      "description": "Triggered when booking a taxi or deployment for on foot combat",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Bookmark details": {
      "name": "Bookmark details",
      "description": "Triggered when a bookmark has been added or updated",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Bounty awarded": {
      "name": "Bounty awarded",
      "description": "Se activa cuando te sumas una recompensa",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{set reward to humaniza(event.reward)}\r\n{if len(event.rewards) = 1:\r\n    {set report to cat('Recibido bono de recompensa de ', reward, ' créditos por parte de la facción ', P(event.rewards[0].faction, \"faction\"))}\r\n|elif len(event.rewards) > 1:\r\n    {set report to cat('Recibidos ', len(event.rewards), ' bonos de recompensa por un total de ', reward, ' créditos')}\r\n}\r\n{if event.shared:\r\n    {set report to cat(report, ' a repartir entre sus compañeros de escuadrón y usted')}\r\n}\r\n\r\n{leeTexto(report)}.\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Bounty incurred": {
      "name": "Bounty incurred",
      "description": "Se activa cuando te ponen una recompensa",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\n{set msg to cat(Occasionally(2, \"La facción \"), event.faction, OneOf(\" nos acaba de {OneOf('poner', 'imponer')} \", \" nos ha {OneOf('puesto', 'impuesto')} \", \" acaba de emitir \"), \"una recompensa de \", event.bounty, \" créditos \", Occasionally(2, 'por nuestra cabeza'), \".\")}\r\n\r\n{leeTexto(msg)}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Bounty paid": {
      "name": "Bounty paid",
      "description": "Triggered when you pay a bounty",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\n{OneOf(\"Recompensa pagada de {Humanise(event.amount)} créditos\",\r\n\"Recompensa de {Humanise(event.amount)} créditos pagada\",\r\n\"Pagada recompensa de {Humanise(event.amount)} créditos\")}.\r\n",
      "default": false,
      "includes": null
    },
    "Bounty redeemed": {
      "name": "Bounty redeemed",
      "description": "Se activa cuando cobras una recompensa (TEST)",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_bond_amount', event.amount)}\n\n\n{OneOf(\"Cobradas\", \"Reclamadas\")} \nrecompensas por valor de {(event.amount)} créditos \n\n{Occasionally(2, \"\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n    de {P(event.rewards[0].faction)}\n  |else:\n    en total. \n    {set cur to 0}\n    {while cur < len(event.rewards):\n      {if len(event.rewards[cur].faction) > 0:\n        {if cur = 0:\n        |elif cur < len(event.rewards) - 1:\n            , \n        |else:\n            y\n        }\n        {(event.rewards[cur].amount)} créditos de {P(event.rewards[cur].faction)} \n        {set cur to cur + 1}\n      } \n    } \n  } \n\")} \n\n{if event.brokerpercentage && event.brokerpercentage > 0:\n    después de deducir \n    {OneOf(\"unas tasas\", \"una comisión\")}\n    {OneOf(\n    \t'de {round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0)} créditos',\n    \t'del {event.brokerpercentage} por ciento'\n    )}\n}.",
      "default": false,
      "includes": null
    },
    "Cancel transport": {
      "name": "Cancel transport",
      "description": "Triggered when canceling a taxi or deployment for on foot combat",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Cargo depot": {
      "name": "Cargo depot",
      "description": "Triggered when collecting or delivering cargo for a wing mission (TEST)",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Cargo depot }\r\n{_ Triggered when collecting or delivering cargo for a wing mission }\r\n\r\n{if event.updatetype = \"Collect\":\r\n\tSe han añadido {event.amount} tonelada{if event.amount != 1:s} de {event.commodity} para el {OneOf(\"depósito\", \"almacén\")} de la misión.\r\n|elif event.updatetype = \"Deliver\":\r\n\tHemos entregado {event.amount} tonelada{if event.amount != 1:s} de {event.commodity} al {OneOf(\"depósito\", \"almacén\")} de la misión.\r\n\r\n    {Pause(500)}\r\n    {set remaining to event.totaltodeliver - event.delivered}\r\n    {set mission to MissionDetails(event.missionid)}\r\n\r\n    Los {OneOf(\"requerimientos\", \"requisitos\")} de\r\n    {if find(mission.name, \"escuadrón\") > -1:\r\n        la misión {OneOf(\"de escuadrón\", \"en equipo\")}\r\n    |elif find(mission.name, \"Rank\") > -1:\r\n        la misión Naval\r\n    |else:\r\n        su misión\r\n    }\r\n\r\n    {if remaining = 0:\r\n         ya se han completado.\r\n    |else:\r\n        están en un {round(event.delivered / event.totaltodeliver * 100, 0)} porciento completados.\r\n    }\r\n}",
      "default": false,
      "includes": null
    },
    "Cargo report": {
      "name": "Cargo report",
      "description": "Informa de tu carga actual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Cargo report }\n{_ Report current cargo manifest }\n\n{set cargocarried to 0}\n{set haulage to 0}\n{set illegal to false}\n{set stolen to false}\n\n{if len(inventory) > 0:\n    {for cargo in inventory:\n        {set cargocarried to cargocarried + cargo.total}\n        {set haulage to haulage + cargo.haulage}\n        {if cargo.stolen > 0: {set stolen to true}}\n        {if status.docked:\n            {for prohibited in station.prohibited:\n                {if cargo.name = prohibited.name: {set illegal to true}}\n            }\n        }\n    }\n}\n\n\n{if cargocarried > 0:\n    {if cargocarried = ship.cargocapacity:\n        {OneOf(\"La bodega de carga está llena\", \"el compartimento de carga está lleno\")}.\n    |else:\n        {Occasionally(2, \"Ahora mismo\")} {OneOf(\"llevamos\", \"transportamos\")} \n    }\n\n    {if len(inventory) = 1:\n        {if inventory[0].name = \"Drón\":\n            {if cargocarried = 1:un |else:{cargocarried}} drón{if cargocarried != 1:es}.\n        |else:\n           {if cargocarried = 1:una |else:{cargocarried}} tonelada{if cargocarried != 1:s} de {inventory[0].name}.\n        }\n    |else:\n        {if cargocarried < ship.cargocapacity: de cargamento.}\n        {OneOf(\"la siguiente mercancía\",\"lo siguiente\")}.\n        {set position to 0}\n        {for cargo in inventory:\n            \n            {if cargo.name = \"Drón\":\n                 {if cargo.total = 1:un |else:{cargo.total}} drón{if cargo.total != 1:es}\n            |else:\n               {if cargo.total = 1:una |else:{cargo.total}} tonelada{if cargo.total != 1:s} de {cargo.name}\n            }\n            {set position to position + 1}\n            {if position = len(inventory) - 1: , y |else:,}\n        }\n    }.\n\n    {if cargocarried < ship.cargocapacity:\n        {set free to ship.cargocapacity - cargocarried}\n        Tienes {free} tonelada{if free != 1:s} {OneOf(\"\",\"de espacio libre\")}{if free != 1:s}.\n    }\n\n    {if stolen || illegal:\n        Atención: Llevamos carga\n        {if stolen: robada}\n        {if illegal:\n            {if stolen:, e }\n            ilegal en esta jurisdicción\n        }.\n    }\n\n|else:\n    {OneOf(\"Tu bahía de carga está vacía.\",\"Tu bodega de carga está vacía.\",\"No tienes carga.\",\"No llevas ninguna carga.\")}\n}\n\n",
      "default": true,
      "includes": null
    },
    "Cargo scoop": {
      "name": "Cargo scoop",
      "description": "Triggered when you deploy or retract your cargo scoop",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Cargo transfer": {
      "name": "Cargo transfer",
      "description": "Triggered when transferring commodities between your ship, SRV, or carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set up a simple function to create descriptions for each transferred commodity }\r\n\r\n{set parseItem(cargo) to:\r\n    {if cargo.amount = 1: \r\n        {set tonnes to \" tonne \"}\r\n    |else: \r\n        {set tonnes to \" tonnes \"}\r\n    }\r\n    {set item to cat(cargo.amount, tonnes, \" of \", cargo.commodity)}\r\n    {return item}\r\n}\r\n\r\n{_ Generate lists of transfer descriptions for each of the possible locations }\r\n\r\n{if len(event.toship) > 0:\r\n    {set toShip to []}\r\n    {for cargo in event.toship:\r\n        {set toShip to cat(toShip, [parseItem(cargo)])}\r\n    }\r\n}\r\n\r\n{if len(event.tocarrier) > 0:\r\n    {set toCarrier to []}\r\n    {for cargo in event.tocarrier:\r\n        {set toCarrier to cat(toCarrier, [parseItem(cargo)])}\r\n    }\r\n}\r\n\r\n{if len(event.tosrv) > 0:\r\n    {set toSRV to []}\r\n    {for cargo in event.tosrv:\r\n        {set toSRV to cat(toSRV, [parseItem(cargo)])}\r\n    }\r\n}\r\n\r\n{_ Begin speaking }\r\n\r\nYou have transferred\r\n\r\n{if len(toShip) > 0:\r\n    {List(toShip)} to {OneOf(ShipName(), \"your ship\")}\r\n}\r\n\r\n{if len(toCarrier) > 0:\r\n    {if len(toShip) > 0: and }\r\n    {List(toCarrier)} to {OneOf(carrier.name, \"your carrier\")}\r\n}\r\n\r\n{if len(toSRV) > 0:\r\n    {if len(toShip) > 0: and }\r\n    {List(toSRV)} to your SRV\r\n}.\r\n",
      "default": true,
      "includes": null
    },
    "Cargo wingupdate": {
      "name": "Cargo wingupdate",
      "description": "Triggered when a wing-mate collects or delivers cargo for a wing mission",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo wingupdate }\r\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    Tu compañero de {OneOf(\"escuadrón\", \"equipo\")} ha recogido {event.amount} tonelada{if event.amount != 1:s}\r\n    {if event.commodity != \"Desconocido\": de {event.commodity}} del {OneOf(\"depósito\", \"almacén\")} de la misión.\r\n|elif event.updatetype = \"Deliver\":\r\n    Tu compañero de {OneOf(\"escuadrón\", \"equipo\")} ha entregado {event.amount} tonelada{if event.amount != 1:s} \r\n    {if event.commodity != \"Desconocido\": de {event.commodity}} al {OneOf(\"depósito\", \"almacén\")} de la misión.\r\n}\r\n\r\n{Pause(500)}\r\n{set remaining to event.totaltodeliver - event.delivered}\r\n{if remaining = 0:\r\n    Los requisitos de la misión {OneOf(\"de escuadrón\", \"en equipo\")} han sido completados.\r\n|elif event.updatetype = \"Deliver\":\r\n    La misión {OneOf(\"de escuadrón\", \"en equipo\")} está a un {round(event.delivered / event.totaltodeliver * 100, 0)} porciento de ser completada.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Carrier bank transfer": {
      "name": "Carrier bank transfer",
      "description": "Triggered when you transfer money to or from your fleet carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Carrier cooldown": {
      "name": "Carrier cooldown",
      "description": "Triggered when you either were docked at a fleet carrier during a jump or are the fleet carrier owner and it completes its cooldown",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Tiempo de recuperación de la portanaves {OneOf(\"completado\", \"finalizado\")}.",
      "default": false,
      "includes": null
    },
    "Carrier decommission cancelled": {
      "name": "Carrier decommission cancelled",
      "description": "Triggered when you cancel the decommissioning of your fleet carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "El desmantelamiento de su portanaves {carrier.name} {OneOf(\"ha sido cancelado\", \"se ha cancelado\")}.",
      "default": false,
      "includes": null
    },
    "Carrier decommission scheduled": {
      "name": "Carrier decommission scheduled",
      "description": "Triggered when you request the decommissioning of your fleet carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\r\n\t\"Se ha programado el desmantelamiento de su portanaves {carrier.name}\",\r\n\t\"Su portanaves {carrier.name} {OneOf('ha sido programada para ser desmantelada', 'ha sido programada para el desmantelamiento')}\"\r\n)}\r\n{if event.days:\r\n   en {event.days} días\r\n}\r\n{if event.hours:\r\n   y {event.hours} horas\r\n}.\r\n\r\nSe le reembolsarán {humaniza(event.refund)} de créditos.",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Carrier docking permission": {
      "name": "Carrier docking permission",
      "description": "Triggered when changing the docking permission criteria at your fleet carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Órdenes transmitidas.\")}\r\nEl acceso a \r\n{if carrier && len(carrier.name) > 0: \r\n    {OneOf(\"su portanaves {Occasionally(2,carrier.name)}\", carrier.name)}\r\n|else: \r\n    su portanaves\r\n}\r\n{set open to OneOf(\"está permitido\", \"ha sido abierto\")}\r\n\r\n{if event.dockingAccess = \"none\":\r\n    ha sido restringido. \r\n    {Occasionally(2, \"Ningún comandante tiene permitido el {OneOf('atraque', 'aterrizaje')}.\")}\r\n|elif event.dockingAccess = \"squadronfriends\":\r\n    {open} {OneOf(\"sólo a\", \"para\")} {Occasionally(2, \"comandantes\")} amigos, y miembros de la flota,\r\n    {if !event.allowNotorious: {OneOf(\"que respeten la ley\", \"respetuosos de la ley\", \"que no tengan notoriedad\", \"sin notoriedad\")}}\r\n|elif event.dockingAccess = \"friends\":\r\n    {open} {OneOf(\"sólo a\", \"para\")} comandantes amigos \r\n    {if !event.allowNotorious: {OneOf(\"que respeten la ley\", \"respetuosos de la ley\", \"que no tengan notoriedad\", \"sin notoriedad\")}}\r\n|elif event.dockingAccess = \"all\":\r\n    {open} para todos los comandantes \r\n    {if !event.allowNotorious: {OneOf(\"que respeten la ley\", \"respetuosos de la ley\", \"que no tengan notoriedad\", \"sin notoriedad\")}}\r\n}.",
      "default": false,
      "includes": null
    },
    "Carrier finance": {
      "name": "Carrier finance",
      "description": "Triggered when changing tax rates or reserve funds at your fleet carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Carrier fuel deposit": {
      "name": "Carrier fuel deposit",
      "description": "Triggered when depositing fuel at your fleet carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{humaniza(event.amount, 1)} toneladas de tritio depositadas en\r\n{if carrier && len(carrier.name) > 0:\r\n    {carrier.name}\r\n|else:\r\n    su portanaves\r\n}.",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Carrier jump cancelled": {
      "name": "Carrier jump cancelled",
      "description": "Triggered when you cancel a scheduled fleet carrier jump",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Salto de la portanaves cancelado.",
      "default": false,
      "includes": null
    },
    "Carrier jump engaged": {
      "name": "Carrier jump engaged",
      "description": "Triggered when your fleet carrier performs a jump",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'carrier jump')}\r\n{SetState('eddi_context_last_action', 'start')}\r\n{SetState('eddi_context_system_name', event.systemname)}\r\n{SetState('eddi_context_system_lastvisit', system.lastVisitSeconds)}\r\n\r\n{if event.docked || (status.vehicle = \"On Foot\" && station.marketId = carrier.Market.marketId):\r\n\r\n    {_ Zero the 'remaining jump' context to only use values following this event _}\r\n    {SetState('eddi_context_remaining_jumps', 0)}\r\n\r\n    {set reportsystem to SystemDetails(event.systemname)}\r\n\r\n    {OneOf(\"Salto en progreso\", \"Entrando en hypersalto\")} hacia el sistema {P(reportsystem.systemname, \"starsystem\")}\r\n    {if len(event.shortname) > 0:\r\n        {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n        cerca\r\n        {if len(reportBody.bodytype) > 0: de {reportBody.bodytype} |else: del cuerpo}\r\n        {P(event.shortname, \"body\")}\r\n    }.\r\n\r\n    {if reportsystem.systemname = homesystem.systemname:\r\n        {OneOf(\"Hogar dulce hogar\", \"Bienvenido a casa\")}, {F(\"Honorific\")}\r\n    |else:       \r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"Ninguno\" && lastsystem.allegiance != \"Independiente\" && (!reportsystem.allegiance || reportsystem.allegiance = \"Ninguno\" || reportsystem.allegiance = \"Independiente\"):\r\n            {OneOf(\"estamos abandonando el espacio de\", \"hemos dejado\", \"ya no estamos en territorio de\")} {lastsystem.allegiance}.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != reportsystem.allegiance && reportsystem.allegiance && reportsystem.allegiance != \"Ninguno\":\r\n            {OneOf(\"ahora estamos en\", \"hemos llegado a un\", \"estamos entrando en\")} {OneOf(\"espacio\",\"territorio\")}\r\n            {if system.allegiance = \"Independiente\": de un gobierno independiente\r\n            |elif system.allegiance = \"La Alianza\": de la Alianza\r\n            |elif system.allegiance = \"El Imperio\": del Imperio\r\n            |elif system.allegiance = \"La Federación\": de La Federación\r\n            |elif system.allegiance = \"Pirata\": Pirata\r\n            |elif system.allegiance = \"Guardián\": Guardián\r\n            |elif system.allegiance = \"Thargoide\": Zargoide\r\n            |elif system.allegiance = \"Federación de Pilotos\": de La Federación de Pilotos\r\n            }.\r\n            {if cmdr.title != \"Comandante\":\r\n                 El Gobierno local le da la bienvenida {OneOf(\"como\", \"con el título de\")} {F(\"Honorific\")}.\r\n            }\r\n        }\r\n\r\n        {if reportsystem.visits = 0:\r\n            {OneOf(\"Es nuestra primera visita\", \"Es la primera vez que estamos\", \"Nunca antes habíamos estado\")} {OneOf(\"por aquí\", \"en este sistema\")}\r\n        |elif reportsystem.visits = 1:\r\n            {OneOf(\"Es nuestra segunda visita\", \"Es la segunda vez que estamos\")} {OneOf(\"por aquí\", \"en este sistema\")}\r\n        |elif reportsystem.visits = 2:\r\n            {Occasionally(2, \"{OneOf('Es nuestra tercera visita', 'Es la tercera vez que estamos')} {OneOf('por aquí', 'en este sistema')}\")}\r\n        |elif reportsystem.visits = 3:\r\n            {Occasionally(2, \"{OneOf('Es nuestra cuarta visita', 'Es la cuarta vez que estamos')} {OneOf('por aquí', 'en este sistema')}\")}\r\n        |else:\r\n            {Occasionally(3, \"Hemos {OneOf('visitado', 'estado en', 'pasado por')} este sistema {reportsystem.visits} veces\")}\r\n        }.\r\n\r\n        {if reportsystem.population && reportsystem.population > 0:\r\n            {if SecondsSince(reportsystem.lastVisitSeconds) > 3600:\r\n                {F(\"System report\")}\r\n            }\r\n        |else:\r\n            {OneOf(\"Este sistema está despoblado\", \"En este sistema no hay {OneOf('presencia humana', 'asentamientos humanos', 'ninguna colonia humana', 'colonias humanas')}\", \"No hay {OneOf('presencia humana', 'asentamientos humanos', 'ninguna colonia humana', 'colonias humanas')} en este sistema\", \"La Humanidad aún no ha colonizado este sistema\")}.\r\n\r\n        }\r\n\r\n        {if reportsystem.distancefromhome:\r\n            {set ReportDistanceFromHome() to:\r\n                {return cat(\r\n                    OneOf('Nos encontramos', 'La posición actual está', 'Actualmente estamos'), \" \",\r\n                    OneOf('a unos', 'aproximádamente a', 'a'), \" \",\r\n                    Humanise(reportsystem.distancefromhome), \" años luz de \",\r\n                    OneOf('casa', '{P(homesystem.name, \"starsystem\")}'), \".\"\r\n                )}\r\n            }\r\n            {Occasionally(7, ReportDistanceFromHome())}\r\n        }\r\n\r\n        {if reportsystem.comment:\r\n            {OneOf(\"Ha hecho\", \"Tiene\", \"He encontrado\")} {OneOf(\"una anotación\", \"un comentario\", \"una observación\")} {OneOf(\"sobre\", \"acerca de\", \"en relación a\")} este sistema. Dice así: {reportsystem.comment}. Fin de la {OneOf(\"nota\",\"cita\")}.\r\n        }\r\n    }\r\n    \r\n|else:\r\n\r\n    {OneOf('Su portanaves', 'Su carrier', 'Su portaflotas', carrier.name)} está llegando al sistema {P(event.systemname, \"starsystem\")}\r\n    {if event.bodyname != event.systemname && len(event.shortname) > 0:\r\n        {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n        cerca\r\n        {if len(reportBody.bodytype) > 0: de {reportBody.bodytype} |else: del cuerpo}\r\n        {P(event.shortname, \"body\")}\r\n    }.\r\n    \r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Carrier jump request": {
      "name": "Carrier jump request",
      "description": "Triggered when you request that your fleet carrier performs a jump",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Salto del portanaves programado. Curso trazado al sistema {P(event.systemname)}\r\n{if len(event.shortname) > 0:\r\n    {set reportBody to BodyDetails(event.bodyname, event.systemname)} \r\n    , cerca\r\n    {if len(reportBody.bodytype) > 0: de {reportBody.bodytype} |else: del cuerpo}\r\n    {P(event.shortname)}\r\n}.",
      "default": false,
      "includes": null
    },
    "Carrier jumped": {
      "name": "Carrier jumped",
      "description": "Triggered when you are docked at a fleet carrier as it completes a jump",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'carrier jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_carrier_system_name', event.systemname)}\r\n{SetState('eddi_context_system_name', event.systemname)}\r\n{SetState('eddi_context_wanted_list', \"\")}\r\n\r\nLa portanaves {Spacialise(event.carriername)} ha llegado al sistema {P(event.systemname, \"starsystem\")}\r\n{if event.bodyname && len(event.bodyname) > 0:\r\n    , cerca de {event.bodytype} {P(event.bodyname, \"body\")}\r\n}.\r\n{Pause(1000)}\r\n\r\n{_ Update if we have arrived at our route plotter's next destination. _}\r\n{if searchsystem && searchsystem.name != \"\":\r\n    {RouteDetails(\"update\")}\r\n}\r\n\r\n{_ Report faction states only if it's been more than an hour (3600 seconds) since our last visit. _}\r\n{if SecondsSince(GetState(\"eddi_context_system_lastvisit\")) / 3600 > 1:\r\n    {set state_report to F(\"System state report\")}\r\n}\r\n\r\n{set system_engineer to F(\"Engineer report\")}\r\n{set system_missions to F(\"Mission check system\")}\r\n{set system_crimes to F(\"Crime check system\")}\r\n\r\n{if state_report || system_engineer || system_missions || (system_crimes && find(system_crimes, \"Atención\") < 0):\r\n    {Pause(500)}\r\n    Información:\r\n}\r\n\r\n{if state_report:\r\n    {Pause(500)}\r\n    {state_report}\r\n}\r\n{if system_engineer:\r\n    {Pause(500)}\r\n    {system_engineer}\r\n}\r\n{if system_missions:\r\n    {Pause(500)}\r\n    {system_missions}\r\n}\r\n{if system_crimes:\r\n    {Pause(500)}\r\n    {system_crimes}\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Carrier name changed": {
      "name": "Carrier name changed",
      "description": "Triggered when your fleet carrier’s name is changed",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Nueva designación aceptada\", \"Nuevo nombre aceptado\")}.\r\n{OneOf(\"La portanaves {Pause(100)} {event.name} {Pause(100)}\", \"{event.name}\")} está {OneOf(\"lista para\", \"preparada para\", \"a la espera de\")} recibir sus órdenes.",
      "default": false,
      "includes": null
    },
    "Carrier pads locked": {
      "name": "Carrier pads locked",
      "description": "Triggered when your fleet carrier locks landing pads prior to a jump",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set portanaves to OneOf(\"de la portanaves\", \"de la portaflotas\", \"de la CARRIER\", \"\")}\r\n{OneOf(\"Bloqueados anclajes {portanaves}\", \"Plataformas de aterrizaje {portanaves} bloqueadas\")}.\r\n{OneOf(\"Iniciando preparativos finales para el salto\", \"Preparaciones finales para el salto iniciadas\")}.",
      "default": false,
      "includes": null
    },
    "Carrier purchased": {
      "name": "Carrier purchased",
      "description": "Triggered when you purchase a fleet carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Carrier service changed": {
      "name": "Carrier service changed",
      "description": "Triggered when you change the services available at your fleet carrier",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{set GetService() to:\r\n    {if event.invariantService = \"Bartender\":\r\n        {return OneOf(\"el bar\", \"el servicio de barra\", \"el servicio de camarero\")}\r\n    |elif event.invariantService = \"Black Market\":\r\n        {return OneOf(\"{Occasionally(2, 'los servicios comerciales d')}el mercado negro\", \"el mercado de {Occasionally(2, 'productos de')} contrabando\")}\r\n    |elif event.invariantService = \"Commodities\":\r\n        {return OneOf(\"el mercado de productos básicos\", \"los servicios de comercio de productos básicos\")}\r\n    |elif event.invariantService = \"Exploration\":\r\n        {return OneOf(\"el servicio de Cartografía {OneOf('Universal', 'Estelar')}\", \"los servicios de Cartografía {OneOf('Universal', 'Estelar')}\")}\r\n    |elif event.invariantService = \"Outfitting\":\r\n        {return OneOf(\"los servicios de equipamiento\", \"el servicio de equipamiento\")}\r\n    |elif event.invariantService = \"Pioneer Supplies\":\r\n        {return OneOf(\"Payoner Suplies\", \"los servicios de equipamiento personal\")}\r\n    |elif event.invariantService = \"Rearm\":\r\n        {return OneOf(\"el servicio de {OneOf('armería', 'rearme')}\", \"los servicios de {OneOf('la armería', 'rearme')}\")}\r\n    |elif event.invariantService = \"Redemption Office\":\r\n        {return cat(\"el servicio de \", OneOf('Redención', 'cobro'), \" de \", OneOf('Bonos', 'Vales'), \" de combate\")}\r\n    |elif event.invariantService = \"Repair\":\r\n        {return OneOf(\"el {OneOf('servicio', 'taller')} de reparaci{OneOf('ón', 'ones')}\", \"los servicios de reparaci{OneOf('ón', 'ones')}\")}\r\n    |elif event.invariantService = \"Shipyard\":\r\n        {return OneOf(\"el astillero para {OneOf('invitados', 'huéspedes')}\", \"los servicios de astillero para {OneOf('invitados', 'huéspedes')}\")}\r\n    |elif event.invariantService = \"Tritium Depot\":\r\n        {return OneOf(\"el depósito de Tritio\", \"los servicios de reabastecimiento de Tritio\")}\r\n    |elif event.invariantService = \"Vista Genomics\":\r\n        {return OneOf(\"Vista GENOMICS\", \"los servicios de Exobiología\")}\r\n    |else:\r\n        {return event.service}\r\n    }\r\n}\r\n\r\n{if event.operation = \"Replace\":\r\n    {_ This is a carrier crew reassignment }\r\n    {if event.invariantService = \"Captain\":\r\n        {event.crew} \r\n        {OneOf(\"ha tomado el mando de\", \"estará a cargo del puente de mando de\")}\r\n        {if carrier && len(carrier.name) > 0:\r\n            {carrier.name}\r\n        |else:\r\n            su {OneOf(\"portanaves\", \"portaflotas\", \"CARRIER\")}.\r\n        }\r\n    |else:\r\n    \t{set service to GetService()}\r\n    \t{if find(service, \"el\") = 0:\r\n        \t{set de to \"d\"}\r\n    \t|else:\r\n        \t{set de to \"de \"}\r\n    \t}\r\n        {event.crew} {OneOf(\"ha tomado el mando\", \"estará a cargo\")} {de}{service}\r\n    }     \r\n|elif len(event.operation) > 0:\r\n    {set service to GetService()}\r\n    {service}\r\n    {if find(service, \"servicios\") > -1:\r\n    \t{set s to \"s\"}\r\n        {OneOf(\"han sido\", \"se han{set s to ''}\")}\r\n    |else:\r\n    \t{set s to \"\"}\r\n        {OneOf(\"ha sido\", \"se ha\")}\r\n    }\r\n    {if event.operation = \"Activate\":\r\n        {OneOf(\"activado{s}\", \"abierto{s}\")}\r\n    |elif event.operation = \"Deactivate\":\r\n        {OneOf(\"desactivado{s}\", \"cerrado{s}\")}\r\n    |elif event.operation = \"Pause\":\r\n        {OneOf(\"pausado{s}\", \"suspendido{s}\")}\r\n    |elif event.operation = \"Resume\":\r\n        {OneOf(\"restaurado{s}\", \"restablecido{s}\")}\r\n    |else:\r\n        {event.operation}\r\n    }.\r\n}",
      "default": false,
      "includes": null
    },
    "Carrier stats": {
      "name": "Carrier stats",
      "description": "Triggered when you open the carrier management screen",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Cleared save": {
      "name": "Cleared save",
      "description": "Se activa cuando eliminas tu partida",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'save')}\n{SetState('eddi_context_last_action', 'clear')}\n\n{Transmit(\"Adiós {F('Honorific')}. Ha sido un verdadero honor.\")}",
      "default": false,
      "includes": null
    },
    "Cockpit breached": {
      "name": "Cockpit breached",
      "description": "Se activa cuando se rompe la cabina de la nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'cockpit')}\n{SetState('eddi_context_last_action', 'breach')}\n\n{OneOf(\n\tTransmit('Oye {Pause(100)} ¿No está empezando a refrescar?'),\n\tTransmit('Uy {Pause(100)} Parece que hace fresquito...'),\n\t\"Atención {Pause(100)} Cristal de cabina destruido. Activando módulo de supervivencia.\"\n)}",
      "default": false,
      "includes": null
    },
    "Commander continued": {
      "name": "Commander continued",
      "description": "Se activa cuando cargas una partida guardada",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Commander continued }\r\n{_ Triggered when you continue an existing game }\r\n\r\n\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{_ If VoiceAttack is not used, set Auto Route to no, and set default Routing system _}\r\n{if GetState(\"eddi_context_mission_route_useauto\") = \"\" || GetState(\"eddi_context_mission_route_useauto\") = null:\r\n    {SetState('eddi_context_mission_route_useauto', \"no\")}\r\n    {SetState('missionsrouteuseeddi', \"no\")}\r\n}\r\n\r\n{set time to token(format(SecondsSince(0), \"dl:yyyy-MM-dd HH:mm:ss\"), \" \", 1)}\r\n{set time to cast(token(time, \":\", 0), \"n\")}\r\n{if time > 5 && time < 13:\r\n    Buenos días\r\n|elif time >= 13 && time < 20:\r\n    Buenas tardes\r\n|else:\r\n   Buenas noches\r\n}\r\n\r\n{if cmdr.gender = \"Female\":\r\n    {set o to \"a\"}{set e to \"a\"}\r\n|else:\r\n    {set o to \"o\"}{set e to \"e\"}\r\n}\r\n\r\n{F(\"Honorific\")}{OneOf(\". Bienvenid{o} de nuevo\",\", l{e} estaba esperando\")}.\r\n\r\n{F(\"Mission check galaxy\")}\r\n{F(\"Mission check expiring\")}",
      "default": false,
      "includes": null
    },
    "Commander loading": {
      "name": "Commander loading",
      "description": "Triggered at the very beginning of loading a game",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Commander progress": {
      "name": "Commander progress",
      "description": "Se activa cuando se informa de tu progreso",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Commander promotion": {
      "name": "Commander promotion",
      "description": "Triggered when one of your commander ranks increases",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', lower(event.rank_type))}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n\r\n{if event.rank_type = \"Combat\":\r\n    Has sido reconocido por tu valor en el combate, {F(\"Honorific\")}.\r\n|elif event.rank_type = \"CQC\":\r\n    Has sido reconocido por tu valor en el combate cercano CQC, {F(\"Honorific\")}.\r\n|elif event.rank_type = \"Trade\":\r\n    Has sido reconocido por tu perspicacia comercial, {F(\"Honorific\")}.\r\n|elif event.rank_type = \"Exploration\":\r\n    Has sido reconocido por tus conquistas como explorador, {F(\"Honorific\")}.\r\n|elif event.rank_type = \"Mercenary\":\r\n    Has sido reconocido por tu trabajo como Mercenario, {F(\"Honorific\")}.\r\n|elif event.rank_type = \"Exobiologist\":\r\n    Has sido reconocido por tus decubrimientos como Exobiólogo, {F(\"Honorific\")}.\r\n|elif event.rank_type = \"Federation\":\r\n    {set plainHonorific to when(cmdr.gender = 'Female', 'Madam', 'Sir')}\r\n    Enhorabuena {OneOf('Comandante {CommanderName()}', plainHonorific)}! Has sido\r\n    {OneOf('Has sido ascendido a', 'Te han promocionado al', 'Te han dado el')}\r\n    rango de {event.rank}\r\n    {Occasionally(2, OneOf('en la Armada Federal', 'por sus servicios a la Federación'))}.\r\n    {if event.rating = 3:\r\n        Ya puedes adquirir una Nave de Descenso Federal.\r\n    |elif event.rating = 4:\r\n        Has recibido el permiso para ir al sistema {P('Sol', 'starsystem')}.\r\n    |elif event.rating = 5:\r\n        Ya puedes adquirir una Nave de Asalto Federal, y además ya tienes permiso para acceder a los sistemas estelares {P('Vega', 'starsystem')} y {P('Beta Hydri', 'starsystem')}.\r\n    |elif event.rating = 6:\r\n        Ya tienes permiso para acceder al sistema {P('PLX 695', 'starsystem')}.\r\n    |elif event.rating = 7:\r\n        Ya puedes adquirir La Cañonera Federal, y además ya tienes acceso al sistema {P('Ross 128', 'starsystem')}.\r\n    |elif event.rating = 8:\r\n        Ya tienes permiso para acceder al sistema {P('Exbeur', 'starsystem')}.\r\n    |elif event.rating = 10:\r\n        Te han dado permiso para acceder al sistema {P('Hors', 'starsystem')}.\r\n    |elif event.rating = 12:\r\n        Ya puedes adquirir una Corveta Federal.\r\n    |elif event.rating = 14:\r\n        Has adquirido el rango más alto disponible como miembro de la Reserva Naval Federal.\r\n    }   \r\n|elif event.rank_type = \"Empire\":\r\n    Enhorabuena {F(\"Empire honorific\")},\r\n    La Armada Imperial \r\n    {OneOf(\"te ha dado el rango de \", \"te ha promocionado a \", \"te ha concedido el rango de \", \"te ha nombrado \")}\r\n    {event.rank}\r\n    {Occasionally(2, \"por tus servicios prestados al Imperio\")}.\r\n    {if event.rating = 1:\r\n        Ya puedes adquirir la Íguel Imperial.\r\n    |elif event.rating = 3:\r\n        Ya puedes adquirir la Nave de Correo Imperial.\r\n    |elif event.rating = 4:\r\n        Te han dado el honor de poder acceder al sistema {P(\"Achenar\", \"starsystem\")}.\r\n    |elif event.rating = 7:\r\n        Ya puedes adquirir La Clíper Imperial. Además tienes el honor de poder acceder al sistema {P(\"Summerland\", \"starsystem\")}.\r\n    |elif event.rating = 10:\r\n        Te han dado el honor de acceder al sistema estelar {P(\"Facece\", \"starsystem\")}.\r\n    |elif event.rating = 12:\r\n        Ya puedes adquirir una flamante Cúter Imperial.\r\n    |elif event.rating = 14:\r\n        Te han reconocido el mayor {OneOf(\"rango\", \"honor\")} disponible como miembro de la Reserva Naval Imperial.\r\n    }\r\n}",
      "default": false,
      "includes": null
    },
    "Commander ratings": {
      "name": "Commander ratings",
      "description": "Se activa cuando se informa de tu clasificación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Commander reputation": {
      "name": "Commander reputation",
      "description": "Triggered when your reputation is reported",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ A note on thresholds... _}\r\n{_ -100.. -90: hostile _}\r\n{_ -90.. -35: unfriendly _}\r\n{_ -35..+ 4: neutral _}\r\n{_ +4..+35: cordial _}\r\n{_ +35..+90: friendly _}\r\n{_ +90..+100: allied _}\r\n",
      "default": true,
      "includes": null
    },
    "Commander started": {
      "name": "Commander started",
      "description": "Se activa cuando empiezas una partida nueva",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{_ If VoiceAttack is not used, set Auto Route to no, and set default Routing system _}\r\n{if GetState(\"eddi_context_mission_route_useauto\") = \"\" || GetState(\"eddi_context_mission_route_useauto\") = null:\r\n    {SetState('eddi_context_mission_route_useauto', \"no\")}\r\n    {SetState('missionsrouteuseeddi', \"no\")}\r\n}\r\n\r\n{if cmdr.gender = \"Female\":\r\n    {set o to \"a\"}\r\n|else:\r\n    {set o to \"o\"}\r\n}\r\n\r\n{set time to token(format(SecondsSince(0), \"dl:yyyy-MM-dd HH:mm:ss\"), \" \", 1)}\r\n{set time to cast(token(time, \":\", 0), \"n\")}\r\n\r\n{if time > 5 && time < 12:\r\n    Buenos días\r\n|elif time > 12 && time < 20:\r\n    Buenas tardes\r\n|else:\r\n   Buenas noches\r\n}\r\n\r\n{F(\"Honorific\")}, y bienvenid{o} a bordo. Soy Shirka. Su asistente de vuelo personal. Le acompañaré en sus viajes para informarle y asistirle en todo lo que necesite.\r\n\r\n{_ Clear Fines & Bounties}\r\n{F(\"FinesBounties_Initialise\")}\r\n",
      "default": false,
      "includes": null
    },
    "Commodity collected": {
      "name": "Commodity collected",
      "description": "Se activa cuando recoges mercancia con tu nave o VRS",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'collect')}\n{SetState('eddi_context_cargo_name', event.commodity)}\n\n{_ Correciones de malas pronunciaciones _}\n{set mercancia to corrigeTexto(event.commodity)}\n\n{creaArticulos(mercancia)}\n\n{OneOf(\n\t\"{OneOf('Obtenid{o}{s}', 'recuperad{o}{s}', 'almacenad{o}{s}')} {mercancia}\",\n\t\"{mercancia} {OneOf('Obtenid{o}{s}', 'recuperad{o}{s}', 'almacenad{o}{s}', 'a bordo.', 'en la bahía de carga')}\"\n)}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Commodity ejected": {
      "name": "Commodity ejected",
      "description": "Se activa cuando expulsas mercancia de tu nave o VRS",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n",
      "default": true,
      "includes": null
    },
    "Commodity purchase check": {
      "name": "Commodity purchase check",
      "description": "Verifica que mercancías son las mejores para adquirir",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{for commodity in station.commodities:\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\n        {set discount to commodity.avgprice - commodity.buyprice}\n        {if discount > best.avgprice - best.buyprice:\n            {set thirdbest to secondbest}\n            {set secondbest to best}\n            {set best to commodity}\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\n            {set thirdbest to secondbest}\n            {set secondbest to commodity}\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\n            {set thirdbest to commodity}\n        }\n    }\n}\n\n{if best:\n    El mercado local está vendiendo {best.name} al mejor precio\n    {if secondbest:\n       , además de {secondbest.name}\n        {if thirdbest:\n            y {thirdbest.name}\n        }\n    }\n.}\n",
      "default": false,
      "includes": null
    },
    "Commodity purchased": {
      "name": "Commodity purchased",
      "description": "Se activa cuando compras cualquier producto del mercado local",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{_ If cargo is full, wait for COVAS to inform you _}\r\n{set cargocarried to 0}\r\n{if len(inventory) > 0:\r\n    {for cargo in inventory:\r\n        {set cargocarried to cargocarried + cargo.total}\r\n\t}\r\n}\r\n{if cargocarried = ship.cargocapacity: {Pause(3500)}}\r\n\r\n{if event.amount > 1: {set s to \"s\"}}\r\n\r\n{_ Cambiamos las toneladas/unidades por lotes/grupos en el caso de que sean esclavos _}\r\n{if find(lcase(event.commodity), \"esclavos\") != -1:\r\n\t{set unidad to OneOf(\"grupo\", \"lote\")}\r\n\t{set unidades to OneOf(\"grupos\", \"lotes\")}\r\n\t{set un to \"un\"}{set la to \"el\"}\r\n\t{set report to OneOf('Acabas de adquirir', 'Has adquirido', 'Adquirido{s}')}\r\n|else:\r\n\t{set unidad to OneOf(\"tonelada\", \"unidad\")}\r\n\t{set unidades to OneOf(\"toneladas\", \"unidades\")}\r\n\t{set un to \"una\"}{set la to \"la\"}\r\n\t{set report to OneOf('Acabas de comprar', 'Has comprado', 'Comprada{s}')}\r\n}\r\n\r\n{if event.amount > 1:\r\n\t{set report to cat(report, \" \", event.amount, \" \", unidades, \" de \", corrigeTexto(event.commodity), \", a \", humaniza(event.price), \" \", de, \" créditos \", OneOf('por', la), \" \", unidad, \".\")}\r\n\t{set total to humaniza(event.amount * event.price)}\r\n\t{set random to rand(3)}\r\n\t{if random = 0:\r\n\t\t{set report to cat(report, \" El \", OneOf('importe', 'coste', 'valor'))}\r\n\t\t{if rand(1):\r\n            {set report to cat(report, \" total es de \", total, \" \", de, \" créditos\")}\r\n\t\t|else:\r\n            {set report to cat(report, \" es de \", total, \" \", de, \" créditos en total\")}\r\n\t\t}\r\n\t|elif random = 1:\r\n\t\t{set report to cat(report, \" \", OneOf('Con un', 'Por'), \" \", OneOf('importe', 'coste', 'valor'))}\r\n\t\t{if rand(1):\r\n            {set report to cat(report, \" \", Occasionally(2, 'total'), \" de \", total,\" \", de, \" créditos\")}\r\n\t\t|else:\r\n            {set report to cat(report, \" de \", total, \" \", de, \" créditos en total\")}\r\n\t\t}\r\n\t|elif random = 2:\r\n\t\t{set report to cat(report, \" Por un total de \", total, \" \", de, \" créditos\")}\r\n\t}\r\n|else:\r\n\t{set report to cat(report, \" \", un, \" \", unidad, \" de \", corrigeTexto(event.commodity), \" por \", humaniza(event.price), \" \", de, \" créditos\")}\r\n}\r\n\r\n{leeTexto(report)}.\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Commodity refined": {
      "name": "Commodity refined",
      "description": "Se activa cuando se refina un producto",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'refine')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n\n{set ore to corrigeTexto(event.commodity)}\n\n{creaArticulos(ore)}\n\n{OneOf(\n\t'{ore} {Occasionally(2,\"ha{n} sido\")} {OneOf(\"refinad{o}{s}.\", \"obtenid{o}{s}.\")}',\n\t'{Occasionally(2, \"Se ha{n}{set s to \\'\\'}\")} {OneOf(\"refinad{o}{s}\", \"obtenid{o}{s}\")} {ore}',\n\t'{OneOf(\"refinad{o}{s}\", \"obtenid{o}{s}\")} {ore}',\n\t'Se ha {OneOf(\"refinado\", \"obtenido\")} {Occasionally(2, \"una\")} tonelada de {ore}',\n\t'{OneOf(\"refinada\", \"obtenida\")} {Occasionally(2, \"una\")} tonelada de {ore}'\n)}\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Commodity sale check": {
      "name": "Commodity sale check",
      "description": "Comprueba que mercancías se pueden vender en el mercado local",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Function to find a given commodity in market}\n{set market(commodity) to:\n    {for marketcommodity in station.commodities:\n        {if marketcommodity.name = commodity.name:\n            {return marketcommodity}\n        }\n    }\n}\n\n{set totalprofit to 0}\n{set missioncommodities to []}\n{set profitablecommodities to []}\n{set stolencommodities to []}\n{set unknowncommodities to []}\n\n{for cargo in inventory:\n    {if cargo.name != 'Drón' && cargo.total > 0:\n        {set marketcommodity to market(cargo.commodity)}\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.owned}\n        {if cargo.owned > 0 && marketcommodity && profit > 0:\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\n            {set totalprofit to totalprofit + profit}\n        |elif cargo.owned > 0 && !marketcommodity && lcase(cargo.category) != \"powerplay\":\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\n        |elif cargo.stolen > 0:\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\n        |elif cargo.haulage > 0:\n            {set missioncommodities to cat(missioncommodities, [cargo.commodity])}\n        }\n    }\n}\n\n{_ Let the user know about any commodities they can sell here for a profit}\n{if len(profitablecommodities) > 0:\n\t{set cargocommodities to []}\n\t{for cargo in profitablecommodities:\n\t\t{set cargocommodities to cat(cargocommodities, [corrigeTexto(cargo.name)])}\n\t}\n\n\t{creaArticulos(profitablecommodities[0].name)}\n    Puede vender su{s} {List(cargocommodities)}\n    {set totalprofit to humaniza(totalprofit)}\n    {Occasionally(3, \",\")} con {OneOf(\"un beneficio\", \"una rentabilidad\")} {Occasionally(4, \"total\")} de {totalprofit} {de} créditos.\n}\n\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\n{if len(unknowncommodities) > 0:\n\t{set cargocommodities to []}\n\t{for cargo in unknowncommodities:\n\t\t{set cargocommodities to cat(cargocommodities, [corrigeTexto(cargo.name)])}\n\t}\n\t\n    {if len(profitablecommodities) > 0: {OneOf(\"Además\", \"también\")}}\n    {creaArticulos(unknowncommodities[0].name)}\n    Podría vender su{s} {List(cargocommodities)}\n    , aunque mejor verifique el margen de {OneOf(\"beneficio\", \"rentabilidad\")} de ést{e}{when(len(unknowncommodities) > 1, \"s\", \"o\")} antes de confirmar la transacción.\n}\n\n{_ Let the user know about any stolen commodities they can sell on the black market}\n{if len(stolencommodities) > 0:\n    {if station.hasblackmarket:\n    \t{set cargocommodities to []}\n\t\t{for cargo in stolencommodities:\n\t\t\t{set cargocommodities to cat(cargocommodities, [corrigeTexto(cargo.name)])}\n\t\t}\n        Aquí puede deshacerse de las mercancias robadas {List(cargocommodities)}.\n    |else:\n        Recuerde que llevamos a bordo {OneOf(\"mercancía robada\", \"bienes robados\", \"cargamento robado\", \"bultos marcados con propiedad ajena\")}.\n    }\n}\n\n{_ Let the user know about any mission related commodities they can sell on the black market}\n{if len(missioncommodities) > 0 && station.hasblackmarket:\n\t{set cargocommodities to []}\n\t{for cargo in missioncommodities:\n\t\t{set cargocommodities to cat(cargocommodities, [corrigeTexto(cargo.name)])}\n\t}\n    Puede {when(len(stolencommodities) > 0, \"además\")} {OneOf('descargar', 'entregar')} aquí sus paquetes de misión {List(cargocommodities)}.\n}\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Commodity sold": {
      "name": "Commodity sold",
      "description": "Se activa cuando vende mercancía.",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'sell')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n{SetState('eddi_context_commodity_amount', event.amount)}\n\n{if event.amount > 1: {set s to \"s\"}}\n\n{_ Cambiamos las toneladas/unidades por lotes/grupos en el caso de que sean esclavos _}\n{if find(lcase(event.commodity), \"esclavos\") != -1:\n\t{if slaver:\n\t\t{set unidades to OneOf(\"grupos\", \"lotes\")}\n\t\t{set unidad to OneOf(\"grupo\", \"lote\")}\n\t\t{set report to OneOf('Acabas de vender', 'Has vendido', 'Vendido{s}')}\n\t|else:\n\t\t{set unidades to \"grupos\"}\n\t\t{set unidad to \"grupo\"}\n\t\t{set report to OneOf('Acabas de liberar', 'Has liberado', 'Liberado{s}')}\n\t}\n\t{set un to \"un\"}{set la to \"el\"}\n|else:\n\t{set unidades to OneOf(\"toneladas\", \"unidades\")}\n\t{set unidad to OneOf(\"tonelada\", \"unidad\")}\n\t{set un to \"una\"}{set la to \"la\"}\n\t{set report to OneOf('Acabas de vender', 'Has vendido', 'vendida{s}')}\n}\n\n{set total to humaniza(event.amount * event.price)}\n\n{if s:\n\t{set report to cat(report, \" \", event.amount, \" \", unidades, \" de \", corrigeTexto(event.commodity))}\n\t{set random to rand(3)}\n\t{if random = 0:\n\t\t{set report to cat(report, \", el \", OneOf('importe', 'valor'))}\n\t\t{if rand(1): {set report to cat(report, \" total es de \", total, \" \", de, \" créditos\")}\n\t\t|else: {set report to cat(report, \" es de \", total, \" \", de, \" créditos en total\")}\n\t\t}\n\t|elif random = 1:\n\t\t{set report to cat(report, \", \", OneOf('con un', 'por'), \" \", OneOf('importe', 'valor'))}\n\t\t{if rand(1): {set report to cat(report, \" \", Occasionally(2, 'total'), \" de \", total, \" \", de, \" créditos\")}\n\t\t|else: {set report to cat(report, \" de \", total, \" \", de, \" créditos en total\")}\n\t\t}\n\t|elif random = 2:\n\t\t{set report to cat(report, \", por un total de \", total, \" \", de, \" créditos\")}\n\t}\n|else:\n\t{set report to cat(report, \" \", un, \" \", unidad, \" de \", corrigeTexto(event.commodity), \" por \", total, \" \", de, \" créditos\")}\n}\n\n{_ Report the profit, if any _}\n{if event.price != event.profit:\n\t{set beneficio to humaniza(abs(event.profit * event.amount))}\n    {if event.profit < 0:\n\t\t{set report to cat(report, \", con una pérdida en la \", OneOf('transacción', 'operación'), \" de \", beneficio, \" \", de, \" créditos.\")}\n    |elif event.profit = 0:\n\t\t{set report to cat(report, \", \", OneOf('al', 'el'), \" mismo \", OneOf('precio', 'coste'), \" que \", OneOf('su compra', 'se compró'))}\n    |else:\n    \t{set report to cat(report, \", \", Occasionally(2, 'y'), \" con \", OneOf('un beneficio', 'una rentabilidad'), \" \", Occasionally(2, 'final'), \" de \", beneficio, \" \", de, \" créditos\")}\n    }\n}\n\n{leeTexto(report)}.\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Community goal": {
      "name": "Community goal",
      "description": "Se activa cuando se comprueba el estado de los objetivos de la comunidad",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set Context _}\n{SetState('eddi_context_last_subject', 'community goal')}\n{_ Save goal location to context if there is only one goal present _}\n{if len(event.cgid) = 1:\n   {SetState('eddi_context_goal_system_name', event.system[0])}\n   {SetState('eddi_context_goal_station_name', event.station[0])}\n}\n\n{_ Localize percentile bands }\n{set ordinalPercentile(percentile) to:\n    {if percentile = 10:\n        décima\n    |elif percentile = 25:\n        vigésima quinta\n    |elif percentile = 50:\n        quincuagésima\n    |elif percentile = 75:\n        septuagésima quinta\n    |else:\n        centésima\n    }\n banda de porcentajes.\n}\n\n{F(\"Honorific\")}, hemos recibido una actualización del objetivo de la comunidad \"{event.name}\".\n\n{for update in event.updates:\n    {if update.type = \"Tier\":\n        El objetivo ha alcanzado el nivel {event.tier}.\n    |elif update.type = \"Percentile\":\n        {if event.toprank:\n            ¡Felicidades! Ahora eres uno de los principales contribuyentes de {event.topranksize}.   \n        |else:\n            {if update.direction = \"Increase\":\n                Has llegado a \n           |else: \n           Has caído en} \n           la {ordinalPercentile(event.percentileband)}.\n        }\n    }\n}\n\n{if event.contribution > 0:\n   {Occasionally(2, \"Actualmente,\")} Esperamos una recompensa de \n   {Humanise(event.tierreward)} {if (event.tierreward) > 999.999:de }créditos.\n}",
      "default": false,
      "includes": null
    },
    "Community goals": {
      "name": "Community goals",
      "description": "Triggered when checking the status of community goals",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Controlling fighter": {
      "name": "Controlling fighter",
      "description": "Se activa cuando cambias el control de tu nave al de tu caza.",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"enlace neural\", \"enlace\")} {Occasionally(2, \"con el caza\")} {OneOf(\"iniciado\", \"establecido\", \"fijado\")}.",
      "default": true,
      "includes": null
    },
    "Controlling ship": {
      "name": "Controlling ship",
      "description": "Se activa cuando cambias del control de tu caza al de tu nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Enlace neural\", \"enlace\", \"enlace\")} {OneOf(\"terminado\", \"desconectado\")}.",
      "default": true,
      "includes": null
    },
    "Crew assigned": {
      "name": "Crew assigned",
      "description": "Se activa cuando asignas a alguien a tu tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n    {event.name} está ahora en servicio activo.\r\n|else:\r\n    {event.name} retirandose del servicio activo.\r\n}",
      "default": true,
      "includes": null
    },
    "Crew fired": {
      "name": "Crew fired",
      "description": "Se activa cuando despides a alguien de tu tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'fire')}\n{SetState('eddi_context_crew_name', event.name)}\n\n{event.name} {OneOf(\"ha sido despedido\",\"ya no forma parte de la tripulación\")}.",
      "default": true,
      "includes": null
    },
    "Crew hired": {
      "name": "Crew hired",
      "description": "Se activa cuando contratas a alguien a tu tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'hire')}\n{SetState('eddi_context_crew_name', event.name)}\n\n{event.name} {OneOf(\"se ha unido a la tripulación\",\"ha sido contratado a su tripulación\")}.",
      "default": true,
      "includes": null
    },
    "Crew joined": {
      "name": "Crew joined",
      "description": "Se activa cuando te unes a una tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'join')}\n{SetState('eddi_context_crew_name', event.captain)}\n\nNos hemos unido a la tripulación del comandante {slice (event.captain,10)}. {OneOf(\"No se preocupe, yo me encargo de {ShipName()}\",\"\")}.",
      "default": true,
      "includes": null
    },
    "Crew left": {
      "name": "Crew left",
      "description": "Se activa cuando sales de una tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'leave')}\n{SetState('eddi_context_crew_name', event.captain)}\n\nHemos abandonado la tripulación del comandante {slice (event.captain,10)}.",
      "default": true,
      "includes": null
    },
    "Crew member joined": {
      "name": "Crew member joined",
      "description": "Se activa cuando un comandante se une a tu tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nEl comandante {slice (event.crew,10)} se ha unido a su tripulación.",
      "default": true,
      "includes": null
    },
    "Crew member launched": {
      "name": "Crew member launched",
      "description": "Se activa cuando un miembro de tu tripulación lanza el caza",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'launch')}\n{SetState('eddi_context_crew_name', event.crew)}\n\n{event.crew} ha lanzado un caza..",
      "default": true,
      "includes": null
    },
    "Crew member left": {
      "name": "Crew member left",
      "description": "Se activa cuando un comandante deja tu tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'leave')}\n{SetState('eddi_context_crew_name', event.crew)}\n\nEl comandante {slice (event.crew,10)} ha abandonado la tripulación.",
      "default": true,
      "includes": null
    },
    "Crew member removed": {
      "name": "Crew member removed",
      "description": "Se activa cuando despides a un comandante de tu tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'remove')}\n{SetState('eddi_context_crew_name', event.crew)}\n\nHa {OneOf(\"expulsado\",\"despedido\")} al comandante {slice (event.crew,10)} de la tripulación.",
      "default": true,
      "includes": null
    },
    "Crew member role changed": {
      "name": "Crew member role changed",
      "description": "Se activa cuando un miembro de tu tripulación cambia su rol",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'role')}\n{SetState('eddi_context_crew_name', event.crew)}\n{SetState('eddi_context_crew_role', event.role)}\n\n{if event.role = 'Idle':\n    {event.crew} está desocupado\n|elif event.role = 'Fighter':\n    {event.crew} está controlando un caza\n|elif event.role = 'Gunner':\n    {event.crew} está de artillero\n}.\n",
      "default": true,
      "includes": null
    },
    "Crew paid wage": {
      "name": "Crew paid wage",
      "description": "Triggered when npc crew receives a profit share",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Crew paid wage }\r\n{_ Triggered when npc crew receives a profit share }\r\n\r\n",
      "default": true,
      "includes": null
    },
    "Crew promotion": {
      "name": "Crew promotion",
      "description": "Triggered when crewmember combat rank increases",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Crew promotion }\r\n{_ Triggered when crewmember combat rank increases }\r\n\r\n\r\nEl miembro de tu tripulación {event.name}, ha sido promocionado a {event.combatrating}, en el ranking de combate.",
      "default": false,
      "includes": null
    },
    "Crew role changed": {
      "name": "Crew role changed",
      "description": "Se activa cuando cambia tu rol en una tripulación",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\n  {OneOf(\"Ha adoptado\",\"Se le ha asignado\")} la posición de artillero en esta tripulación.\n|elif event.role = 'Fighter':\n  {OneOf(\"Ha adoptado ser\",\"Se le ha asignado ser\")} piloto de caza en esta tripulación.\n|elif event.role = 'Idle':\n  Ha sido desasignado del servicio activo.\n}",
      "default": true,
      "includes": null
    },
    "Crew session ended": {
      "name": "Crew session ended",
      "description": "Triggered when you disband your crew and end the multicrew session",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Crime check station": {
      "name": "Crime check station",
      "description": "Consulta reclamaciones, multas y recompensas relacionadas con la estación actual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Crime check station _}\r\n{_ Check claims, fines & bounties related to the current station _}\r\n\r\n{set CheckPad(current_station) to:\r\n    {set largest_pad to lcase(current_station.largestpad)}\r\n    {if largest_pad != \"ninguno\":\r\n        {if largest_pad = \"grande\":\r\n        \t{return true}\r\n        |elif largest_pad = \"mediano\":\r\n            {if lcase(ship.size) = \"grande\":\r\n            \t{return false}\r\n            |else:\r\n            \t{return true}\r\n        \t}\r\n        }\r\n        {if lcase(ship.size) = \"pequeño\":\r\n        \t{return true}\r\n        }\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set HasService(service) to:\r\n    {if CheckPad(current_station):\r\n        {if find(current_station.stationservices, service) > -1:\r\n            {return true}\r\n        |else:\r\n            {return false}\r\n        }\r\n    |else: {return false}\r\n    }\r\n}\r\n\r\n{if GetState(\"eddi_context_body_type\") = 'Estación' && station.name && station.name != \"\":\r\n    {set current_station to StationDetails(station.name)}\r\n    {set system_claim_records to []}\r\n    {set system_claims to 0}\r\n    {set system_fine_records to []}\r\n    {set system_fines to 0}\r\n    {set system_bounty_records to []}\r\n    {set system_bounties to 0}\r\n    {set interstellar_fine_records to []}\r\n    {set interstellar_fines to 0}\r\n    {set interstellar_bounty_records to []}\r\n    {set interstellar_bounties to 0}  \r\n\r\n    {for record in criminalrecord:\r\n    \t{set factionMatched to false}\r\n        {for faction in system.factions:\r\n            {if record.faction = faction.name:\r\n            \r\n            \t{_ This record can be connected to a local faction }\r\n                {set factionMatched to true}\r\n\r\n                {if record.claims > 0:\r\n                    {set system_claim_records to cat(system_claim_records, [record.faction])}\r\n                    {set system_claims to system_claims + record.claims}\r\n                }\r\n\r\n\t\t\t\t{set reports to record.finesIncurred}\r\n                {if len(reports) > 0:\r\n                    {for report in reports:\r\n\t\t\t\t\t\t{set system_fines to system_fines + report.amount}\r\n\t\t\t\t\t\t{if find(system_fine_records, record.faction) < 0:\r\n\t\t\t\t\t\t\t{set system_fine_records to cat(system_fine_records, [record.faction])}\r\n                        }\r\n                    }\r\n                }\r\n\r\n                {set reports to record.bountiesIncurred}\r\n                {if len(reports) > 0:\r\n                    {for report in reports:\r\n\t\t\t\t\t\t{set system_bounties to system_bounties + report.amount}\r\n\t\t\t\t\t\t{if find(system_bounty_records, record.faction) < 0:\r\n\t\t\t\t\t\t\t{set system_bounty_records to cat(system_bounty_records, [record.faction])}\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\t\t{if !factionMatched:\r\n        \r\n            {_ This record requires interstellar factors }\r\n            \r\n\t\t\t{set reports to record.finesIncurred}\r\n\t\t\t{if len(reports) > 0:\r\n\t\t\t\t{for report in reports:\r\n\t\t\t\t\t{set interstellar_fines to interstellar_fines + report.amount}\r\n\t\t\t\t\t{if find(interstellar_fine_records, record.faction) < 0:\r\n\t\t\t\t\t\t{set interstellar_fine_records to cat(interstellar_fine_records, [record.faction])}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t{set reports to record.bountiesIncurred}\r\n\t\t\t{if len(reports) > 0:\r\n\t\t\t\t{for report in reports:\r\n\t\t\t\t\t{set interstellar_bounties to interstellar_bounties + report.amount}\r\n\t\t\t\t\t{if find(interstellar_bounty_records, record.faction) < 0:\r\n\t\t\t\t\t\t{set interstellar_bounty_records to cat(interstellar_bounty_records, [record.faction])}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    {set canPaySystemBounties to system_bounties > 0 && suggestSurrender && HasService(\"Contactos\")}\r\n    {set canPaySystemFines to system_fines > 0 && HasService(\"Contactos\")}\r\n    {set canPayInterstellarBounties to interstellar_bounties > 0 && HasService(\"Contacto de Interstellar Factors\")}\r\n    {set canPayInterstellarFines to interstellar_fines > 0 && HasService(\"Contacto de Interstellar Factors\")}\r\n    {set canRedeemClaims to system_claims > 0 && HasService(\"Contactos\")}\r\n    \r\n\t{if canPaySystemBounties || canPaySystemFines || canRedeemClaims || canPayInterstellarBounties || canPayInterstellarFines:\r\n        {set actions to []}\r\n        {if canPaySystemBounties || canPayInterstellarBounties:\r\n            {set action to:\r\n                {OneOf(\"limpiar\", \"redimir\")}\r\n                {if len(system_bounty_records) + len(interstellar_bounty_records) = 1:\r\n                \tsu recompensa \r\n                \t{set es to \"\"}{set s to \"\"}\r\n                |else:\r\n                \tsus recompensas \r\n                \t{set es to \"es\"}{set s to \"s\"}\r\n                }\r\n                {if canPaySystemBounties: local{es} }\r\n                {if canPaySystemBounties && canPayInterstellarBounties: e }\r\n                {if canPayInterstellarBounties: interestelar{es} }\r\n                {Occasionally(3, \"pendiente{s}\")} \r\n                \r\n            }\r\n            {set actions to cat(actions, [action])}            \r\n        }\r\n        {if canPaySystemFines || canPayInterstellarFines: \r\n            {set action to:\r\n                {OneOf(\"pagar\", \"redimir\")}\r\n                {if len(system_fine_records) + len(interstellar_fine_records) = 1:\r\n                \tsu multa\r\n                \t{set es to \"\"}{set s to \"\"}\r\n                |else:\r\n                \tsus multas\r\n                \t{set es to \"es\"}{set s to \"s\"}\r\n                }\r\n                {if canPaySystemFines: local{es} }\r\n                {if canPaySystemFines && canPayInterstellarFines: e }\r\n                {if canPayInterstellarFines: interestelar{es} }\r\n                {Occasionally(3, \"pendiente{s}\")}                \r\n            }\r\n            {set actions to cat(actions, [action])}            \r\n        }\r\n        {if canRedeemClaims:\r\n            {set action to:\r\n                {OneOf(\"cobrar\", \"reclamar\")}\r\n                {if len(system_claim_records) = 1:\r\n                \t{OneOf(\"su recompensa\", \"su retribución\", \"su remuneración\")}\r\n                \t{set s to \"\"}\r\n                |else:\r\n                \t{OneOf(\"sus recompensas\", \"sus retribuciones\", \"sus remuneraciones\")}\r\n                \t{set s to \"s\"}\r\n                }\r\n                {Occasionally(3, \"pendiente{s}{Pause(30)}\")} \r\n                por los {OneOf(\"servicios\", \"trabajos\")} {OneOf(\"prestados como\", \"de\")} cazarrecompensas\r\n            }\r\n            {set actions to cat(actions, [action])}\r\n        }\r\n        {OneOf(\"Hay instalaciones legales {OneOf('en esta estación', 'aquí', '')} para poder\",\r\n        \t\"{OneOf('en esta estación', 'aquí')} podría\",\r\n        \t\"{OneOf('Esta estación tiene', 'Aquí encontrará')} los servicios necesarios para\")\r\n        } {List(actions)}.\r\n    }\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Crime check system": {
      "name": "Crime check system",
      "description": "Consulta reclamaciones, multas y recompensas relacionadas con el sistema actual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Crime check system }\r\n{_ Check claims, fines & bounties related to the current system }\r\n\r\n{set system_claim_records to []}\r\n{set system_claims to 0}\r\n{set system_fine_records to []}\r\n{set system_fines to 0}\r\n{set system_bounty_records to []}\r\n{set system_bounties to 0}\r\n{set interstellar_fine_records to []}\r\n{set interstellar_fines to 0}\r\n{set interstellar_bounty_records to []}\r\n{set interstellar_bounties to 0}\r\n{set wanted_faction_count to 0}\r\n\r\n{for record in criminalrecord:\r\n    {set factionMatched to false}\r\n    {for faction in system.factions:\r\n        {if record.faction = faction.name:\r\n\r\n            {_ This record pertains to a faction which is present in the system }\r\n            {set factionMatched to true}\r\n                         \r\n            {if record.claims > 0:\r\n                {set system_claim_records to cat(system_claim_records, [record.faction])}\r\n                {set system_claims to system_claims + record.claims}\r\n            }\r\n\r\n            {set reports to record.finesIncurred}\r\n            {if len(reports) > 0:\r\n                {for report in reports:\r\n                    {set system_fines to system_fines + report.amount}\r\n                    {if find(system_fine_records, record.faction) < 0:\r\n                        {set system_fine_records to cat(system_fine_records, [record.faction])}\r\n                        {if find(system_bounty_records, record.faction) < 0:\r\n                            {set wanted_faction_count to wanted_faction_count + 1}\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            {set reports to record.bountiesIncurred}\r\n            {if len(reports) > 0:\r\n                {for report in reports:\r\n                    {set system_bounties to system_bounties + report.amount}\r\n                    {if find(system_bounty_records, record.faction) < 0:\r\n                        {set system_bounty_records to cat(system_bounty_records, [record.faction])}\r\n                        {if find(system_fine_records, record.faction) < 0:\r\n                            {set wanted_faction_count to wanted_faction_count + 1}\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    {if !factionMatched:\r\n\r\n        {_ This record pertains to a faction not present in the system }\r\n        {set reports to record.finesIncurred}\r\n        {if len(reports) > 0:\r\n            {for report in reports:\r\n                {set interstellar_fines to interstellar_fines + report.amount}\r\n                {if find(system_fine_records, record.faction) < 0:\r\n                    {set interstellar_fine_records to cat(interstellar_fine_records, [record.faction])}\r\n                }\r\n            }\r\n        }\r\n        {set reports to record.bountiesIncurred}\r\n        {if len(reports) > 0:\r\n            {for report in reports:\r\n                {set interstellar_bounties to interstellar_bounties + report.amount}\r\n                {if find(system_bounty_records, record.faction) < 0:\r\n                    {set interstellar_bounty_records to cat(interstellar_bounty_records, [record.faction])}\r\n                }\r\n            }\r\n        }\r\n    }    \r\n}\r\n\r\n{if wanted_faction_count > 0:\r\n\t{set system_total to humaniza(system_fines + system_bounties)}\r\n\t\r\n    {OneOf(\"Advertencia\", \"Cuidado\", \"Alerta\")}:\r\n    Está buscado {Occasionally(2, \"en este sistema\")} por {wanted_faction_count}\r\n    {if wanted_faction_count = 1: facción |else: facciones},\r\n    por \r\n    {if system_fines > 0 && system_bounties > 0:\r\n        multas y recompensas\r\n    |elif system_fines > 0:\r\n        multas\r\n    |else:\r\n        recompensas\r\n    }\r\n    de un total de {system_total} {de} créditos.\r\n}\r\n\r\n{if len(system_claim_records) > 0:\r\n\t{set system_claims to humaniza(system_claims)}\r\n\r\n    {if wanted_faction_count > 0: {OneOf(\"También tiene\", \"Tiene también\", \"Además, tiene\")} |else: Tiene}\r\n    por {OneOf(\"reclamar\", \"cobrar\")} {if len(system_claim_records) = 1: una {OneOf(\"recompensa\", \"retribución\", \"remuneración\")} |else: varias {OneOf(\"recompensas\", \"retribuciones\", \"remuneraciones\")} {set total to \"en total\"}} \r\n    de {system_claims} {de} créditos {total} por sus {OneOf(\"servicios\", \"trabajos\")} {OneOf(\"prestados como\", \"de\")} cazarrecompensas.\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Crime report": {
      "name": "Crime report",
      "description": "Informa sobre todas las reclamaciones, multas y recompensas pendientes",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Crime report}\r\n{_ Report on all pending claims, fines, and bounties }\r\n\r\n\r\n{set factions_claims to []}\r\n{set claims_count to 0}\r\n{set factions_fines to []}\r\n{set fines_count to 0}\r\n{set factions_bounties to []}\r\n{set systems_bounties to []}\r\n\r\n{for record in criminalrecord:\r\n    {set faction to FactionDetails(record.faction)}\r\n    {if faction:\r\n        {if record.bounties > 0:\r\n            {set factions_bounties to cat(factions_bounties, [record.faction])}\r\n            {for presence in faction.presences:\r\n                {if find(systems_bounties, presence.systemName) = -1:\r\n                    {set systems_bounties to cat(systems_bounties, [presence.systemName])}\r\n                }\r\n            }\r\n        }\r\n        {if record.fines > 0:\r\n            {set factions_fines to cat(factions_fines, [record.faction])}\r\n        }\r\n        {if record.claims > 0:\r\n            {set factions_claims to cat(factions_claims, [record.faction])}\r\n        }\r\n\r\n        {for report in record.factionReports:\r\n            {if !report.bounty && report.crimeEDName != \"none\":\r\n                {set fines_count to fines_count + 1}\r\n            }\r\n            {if report.crimeEDName = \"none\":\r\n                {set claims_count to claims_count + 1}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{set factions_count to len(factions_bounties)}\r\n{set systems_count to len(systems_bounties)}\r\n\r\n{if factions_count > 0:\r\n    Estás buscado por {factions_count} {if factions_count = 1: facción |else: facciones}\r\n    en {systems_count} {if systems_count = 1: sistema |else: sistemas} por un total de\r\n    {Humanise(bounties)} créditos.\r\n}\r\n\r\n{set factions_count to len(factions_fines)}\r\n{if factions_count > 0:\r\n    Tienes {fines_count} {if fines_count = 1: {set s to \"\"} |else: {set s to \"s\"}} multa{s} pendiente{s} de\r\n    {factions_count} {if factions_count = 1: facción |else: facciones},\r\n    de un total de {Humanise(fines)} créditos.\r\n}\r\n\r\n{set factions_count to len(factions_claims)}\r\n{if factions_count > 0:\r\n    Tienes {claims_count} {if claims_count = 1: recompensa |else: recompensas} sin recoger de\r\n    {factions_count} {if factions_count = 1: facción |else: facciones},\r\n    {if factions_count = 1: de |else: que suman} un total de {Humanise(claims)} créditos.\r\n}",
      "default": false,
      "includes": null
    },
    "Damage check": {
      "name": "Damage check",
      "description": "Comprueba los daños de tu nave",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Track if there is any damage}\n{set damaged to 0}\n\n{_ Announce hull health}\n{if ship.health < 100:\n    Casco al {Humanise(ship.health)} %.\n    {set damaged to 1}\n}\n\n{_ Announce critical module health}\n\n{set minordamage to []}\n{set majordamage to []}\n\n{if ship.powerplant.health < 60:\n    {set majordamage to cat(majordamage, [ship.powerplant])}\n|elif ship.powerplant.health < 100:\n    {set minordamage to cat(minordamage, [ship.powerplant])}\n}\n\n{if ship.thrusters.health < 60:\n    {set majordamage to cat(majordamage, [ship.thrusters])}\n|elif ship.thrusters.health < 100:\n    {set minordamage to cat(minordamage, [ship.thrusters])}\n}\n\n{if ship.frameshiftdrive.health < 60:\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\n|elif ship.frameshiftdrive.health < 100:\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\n}\n\n{if ship.powerdistributor.health < 60:\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\n|elif ship.powerdistributor.health < 100:\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\n}\n\n{if ship.lifesupport.health < 60:\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\n|elif ship.lifesupport.health < 100:\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\n}\n\n{if ship.sensors.health < 60:\n    {set majordamage to cat(majordamage, [ship.sensors])}\n|elif ship.sensors.health < 100:\n    {set minordamage to cat(minordamage, [ship.sensors])}\n}\n\n{if len(majordamage) > 0:\n    {set damaged to 1}\n    {OneOf(\"Grandes\", \"Graves\")} daños en\n    {if len(majordamage) = 1:\n        {majordamage[0].name}\n    |elif len(majordamage) = 2:\n        {majordamage[0].name} y {majordamage[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(majordamage):\n            {if cur = 0:\n                {majordamage[cur].name}\n            |elif cur < len(majordamage) - 1:\n                , {majordamage[cur].name}\n            |else:\n                , y {majordamage[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n}\n\n{if len(minordamage) > 0:\n    {set damaged to 1}\n    {OneOf(\"Desperfectos\", \"Daños\")} leves en\n    {if len(minordamage) = 1:\n        {minordamage[0].name}\n    |elif len(minordamage) = 2:\n        {minordamage[0].name} y {minordamage[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(minordamage):\n            {if cur = 0:\n                {minordamage[cur].name}\n            |elif cur < len(minordamage) - 1:\n                , {minordamage[cur].name}\n            |else:\n                , y {minordamage[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n}\n\n{_ Announce other module health}\n\n{set minordamage to []}\n{set majordamage to []}\n\n{for compartment in ship.compartments:\n    {if compartment.module.health < 60:\n        {set majordamage to cat(majordamage, [compartment.module.name])}\n    |elif hardpoint.module.health < 100:\n        {set minordamage to cat(minordamage, [compartment.module.name])}\n    }\n}\n\n{for hardpoint in ship.hardpoints:\n    {if hardpoint.module.health < 60:\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\n    |elif hardpoint.module.health < 100:\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\n    }\n}\n\n{if len(majordamage) > 0:\n    {set damaged to 1}\n    {if len(majordamage) = 1:\n       También hay algún otro componente de la nave con importantes desperfectos\n    |elif len(majordamage) > 1:\n       También hay otros {len(majordamage)} componentes de la nave con importantes desperfectos\n    }\n    {if len(minordamage) = 1:\n       y otro con algun desperfecto\n    |elif len(minordamage) > 1:\n       y otros {len(minordamage)} con daños menores\n    }.\n|elif len(minordamage) = 1:\n    {set damaged to 1}\n    También hay otro componente de la nave con daños menores.\n|elif len(minordamage) > 1:\n    {set damaged to 1}\n    También hay otros {len(minordamage)} componentes de la nave con daños menores.\n}\n\n{if damaged = 0:\n    {OneOf(\"Todos los sistemas completamente operativos.\", \"{ShipName()} está completamente operativa.\", \"{ShipName()} no presenta daños.\")}\n}",
      "default": false,
      "includes": null
    },
    "Data scanned": {
      "name": "Data scanned",
      "description": "Se activa cuando se escanean algunos tipos de enlaces de datos.",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\n{_ Triggered when scanning some types of data links }\n\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'scan')}\n{SetState('eddi_context_last_action', 'data')}\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\n\nAnálisis de {event.datalinktype} completado.",
      "default": true,
      "includes": null
    },
    "Data voucher awarded": {
      "name": "Data voucher awarded",
      "description": "Se activa cuando te otorgan un bono de datos.",
      "enabled": true,
      "priority": null,
      "responder": true,
      "script": "{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\nOtorgado bono de datos de {event.payeefaction} por {event.reward} créditos.\r\n",
      "default": true,
      "includes": null
    },
    "Data voucher redeemed": {
      "name": "Data voucher redeemed",
      "description": "Se activa cuando reclamas bonos de datos",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'data_voucher')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_data_voucher_amount', event.amount)}\n\n{if len event.rewards > 1: {OneOf(\"Reclamados\", \"Adquiridos\")} Bonos de datos\n|else: {OneOf(\"Reclamado\", \"Adquirido\")} un bono de datos} \npor {(event.amount)} créditos\n\n\n{Occasionally(2, \"\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n    {OneOf('de', 'por cortesía de')}\n    {P(event.rewards[0].faction)}\n  |else:\n    {if len(event.rewards[0].faction) > 0:\n       {OneOf('de', 'por cortesía de')}\n       {set cur to 0}\n       {while cur < len(event.rewards):\n          {if cur = 0:\n          |elif cur < len(event.rewards) - 1:\n              , \n          |else:\n              y\n          }\n          {P(event.rewards[cur].faction)}\n          {set cur to cur + 1}\n       }\n    }\n  }\n\")}.",
      "default": false,
      "includes": null
    },
    "Datalink message": {
      "name": "Datalink message",
      "description": "Se activa al completar un escaneo de un enlace de datos",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Destination arrived": {
      "name": "Destination arrived",
      "description": "Triggered when you drop into normal space at your selected destination",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.name = carrier.name:\r\n    {OneOf(\"Su carrier\", \"Su portanaves\", carrier.name)} le da la bienvenida\r\n    {F(\"Honorific\")}.\r\n|else:\r\n\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n    {if find(reportSystem.carriersignalsources, event.name) > -1:\r\n        {OneOf(\"La portanaves\", \"La carrier\")}\r\n        {event.name} \r\n        {OneOf(\r\n            \"{OneOf('se encuentra situada', 'está orbitando', 'está estacionada')} en este punto\",\r\n            \"{OneOf('está orbitando', 'está estacionada')} {OneOf('en este lugar', 'en esta zona', 'en este sector')}\",\r\n            \"{OneOf('se encuentra en rango', 'está estacionada en la zona')}\"\r\n        )}.\r\n    |else:\r\n        {set entering to OneOf(\"Llegando a \", \"Entrando en \")}\r\n        \r\n        {set warninglevel to:\r\n            {if event.threat < 2:\r\n                {entering}\r\n            |elif event.threat = 2:\r\n                Cuidado: {entering} zona de amenaza media.\r\n            |elif event.threat = 3:\r\n                Atención: {entering} zona de gran riesgo.\r\n            |elif event.threat = 4:\r\n                Peligro: {entering} zona de alto riesgo.\r\n            |elif event.threat = 5:\r\n                Peligro extremo: {Occasionally(2, entering)} zona de muy alto riesgo.\r\n            |elif event.threat = 6:\r\n                Peligro extremo: {Occasionally(2, entering)} zona de extremo riesgo.\r\n            |elif event.threat = 7:\r\n                Peligro extremo: {Occasionally(2, entering)} zona de riesgo extremadamente algo.\r\n            |else:\r\n                Peligro Extremo: {Occasionally(2, entering)} zona de amenaza de nivel {event.threat}.\r\n            }\r\n        }\r\n        \r\n        {warninglevel} {if event.isSignalSource: señal de} {event.name}.\r\n        \r\n        {if system.government = \"Anárquico\" && event.name = \"Emisiones degradadas\" && system.population > 0: \r\n            {if rand(2):\r\n                {Pause(1000)}\r\n                \r\n                {set local to OneOf('locales', 'de la zona')}\r\n                {set chatter to OneOf('cotilleos', 'habladurías', 'rumores')}\r\n                {set indicate to OneOf('comentan', 'sugieren', 'indican', 'reportan')}\r\n                {set where to OneOf('en esta zona', 'en las inmediaciones', 'en este sector', 'en este sistema')}\r\n                {set threat to:\r\n                    {OneOf('bastante', 'una elevada', 'una gran')}\r\n                    {OneOf('actividad', 'presencia')}\r\n                    {OneOf('criminal', 'de piratas', 'de {OneOf(\"grupos\", \"clanes\", \"sindicatos\")} {OneOf(\"piratas\", \"criminales\")}')}\r\n                }\r\n                \r\n                Cuidado:\r\n                {if rand(2):\r\n                    {OneOf(\r\n                        '{Occasionally(2, \"según\")} Transmisiones {local} {indicate} {Occasionally(3, \"que hay\")}',\r\n                        '{Occasionally(2, \"según\")} {chatter} {local} {indicate} {Occasionally(3, \"que hay\")}',\r\n                        'suele detectarse',\r\n                        'los sensores indican {Occasionally(3, \"que hay\")}'\r\n                    )}\r\n                    {threat}\r\n                    {where}.\r\n                |else:\r\n                    {where}\r\n                    {OneOf('suele detectarse', 'suele haber', 'es posible encontrar')}\r\n                    {threat}.\r\n                }\r\n                {Occasionally(3, F(\"Honorific\"))}\r\n                {OneOf('Extreme las precauciones', 'Tenga mucho cuidado', '{OneOf(\"Permanezca\", \"Esté\")} alerta', '{OneOf(\"Tenga\", \"Vaya con\")} {OneOf(\"cautela\", \"precaución\")}')}.\r\n           }\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Died": {
      "name": "Died",
      "description": "Se activa cuando mueres",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{if vehicle = \"Ship\":\n    {ShipName()} ha sido {OneOf(\"convertida en polvo\", \"eliminada\", \"destruida\")}\n|elif vehicle = \"Fighter\":\n    Tu caza ha sido {OneOf(\"destruido\", \"aniquilado\")}\n|elif vehicle = \"SRV\":\n    Tu {Spacialise(\"VRS\")} ha sido {OneOf(\"destruido\", \"aniquilado\")}\n    {SetState('eddi_context_srv_deployed', false)}\n|elif vehicle = \"Taxi\":\n    El Taxi en el que ibas ha sido alcanzado y {OneOf(\"destruido\", \"aniquilado\")}\n|elif vehicle = \"Multicrew\":   \n    La nave en la que ibas ha sido {OneOf(\"destruida\", \"aniquilada\")}\n|elif vehicle = \"On Foot\":\n    Has sido {OneOf(\"herido de gravedad\", \"incapacitado\")}\n}\n{if len(event.killers) > 0:\n    {set killerDescriptions to []}\n    {for killer in event.killers:\n        {set killerDescription to:\n            por\n            {if find(killer.name, \"Cmdr \") >= 0:\n                {_ Commander }\n                {token(killer.name, \" \", 0, \"el Comandante \")}\n                de rango {killer.rating}\n                en una {killer.equipment}\n            |else:\n                {_ Generic NPC }\n                una {leeTexto(killer.equipment)}\n                de rango {killer.rating}\n            }\n        }\n        {set killerDescriptions to cat(killerDescriptions, [killerDescription])}    \n    }\n\t{List(killerDescriptions)}\n}.\n\n{if vehicle = \"Ship\" || vehicle = \"Taxi\" || vehicle = \"Multicrew\":\n{leeTexto(\"Activada cápsula de escape. Emitiendo señal de socorro.\")} {OneOf(Transmit('Pronto vendrán a buscarte... O eso espero.'),\"\")}.\n}\n\n{if vehicle = \"On Foot\":\n{leeTexto(\"Activada baliza de socorro del traje.\")} {OneOf(Transmit('¡Aguanta, {CommanderName()}! Estoy aquí contigo.'),\"\")}.\n}\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Discovery scan": {
      "name": "Discovery scan",
      "description": "Triggered when performing a full system scan (honk)",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Fetch from Context, if a context is set _}\r\n{if GetState(\"eddi_context_system_name\"):\r\n\t{set reportSystem to SystemDetails(GetState(\"eddi_context_system_name\"))}\r\n|else:\r\n\t{set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{SetState('eddi_context_last_action', 'honk')}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\":\r\n    No tengo claro a que sistema de refiere.\r\n|else:\r\n\t{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n\t\t{if len(reportSystem.factions) = 0 || reportSystem.scannedbodies != 0:\r\n\t\t\t{set bodiesToScan to (event.totalbodies - reportSystem.scannedbodies)}\r\n\t\t\t{Pause(850)}\r\n\t\t\t{if bodiesToScan = 1:\r\n\t\t\t\tQueda un cuerpo para ser {OneOf(\"escaneado\", \"analizado\", \"descubierto\")}.\r\n\t\t\t|elif bodiesToScan > 1:\r\n\t\t\t\t{if reportSystem.scannedbodies != 1: {set s to \"s\"}{set n to \"n\"}}\r\n\t\t\t\t{OneOf(\r\n\t\t\t\t\t'{reportSystem.scannedbodies} cuerpo{s} de {Occasionally(3, \"un total de \")} {event.totalbodies}, {Occasionally(2, Pause(150))} ha{n} sido {OneOf(\"escaneado{s}\", \"analizado{s}\", \"explorado{s}\", \"catalogado{s}\")}', \r\n\t\t\t\t\t'Quedan {bodiesToScan} cuerpos para ser {OneOf(\"escaneados\", \"analizados\", \"explorados\", \"catalogados\")}'\r\n\t\t\t\t)}\r\n\t\t\t\t{Occasionally(3, \"en este sistema\")}.\r\n\t\t\t|else:\r\n\t\t\t\t{if reportMaterials && hasSRV:\r\n    \t    \t\t{set materialsReport to F(\"System materials report\")}\r\n    \t    \t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t{set bodiesToMap to F(\"Bodies to map\")}\r\n\t\t{if bodiesToMap: {if bodiesToScan > 0: {OneOf(\"De momento\", \"Por ahora\")}} {bodiesToMap}}\r\n   \t    {if materialsReport: {materialsReport}}\r\n\t}\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Disembark": {
      "name": "Disembark",
      "description": "Triggered when you transition from a ship or SRV to on foot",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Para hacer: Que apartir de desembarcar todo lo que diga Shirka sea a través de un Transmit. Como si hablará por el casco) _}",
      "default": false,
      "includes": null
    },
    "Docked": {
      "name": "Docked",
      "description": "Se activa cuando su nave aterriza en una estación espacial o puesto avanzado",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.state = \"Damaged\": Emergency}\r\nAnclaje completado.\r\n\r\n{if event.activefine || event.wanted:\r\n    Activados protocolos de anonimato.\r\n}\r\n\r\n{if event.cockpitbreached:\r\n    Recuerde reparar el cristal de la cabina.\r\n}",
      "default": true,
      "includes": null
    },
    "Docking cancelled": {
      "name": "Docking cancelled",
      "description": "Se activa cuando su nave cancela el aterrizaje solicitado en una estación espacial o puesto avanzado",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Solicitud de aterrizaje cancelada.",
      "default": true,
      "includes": null
    },
    "Docking denied": {
      "name": "Docking denied",
      "description": "Se activa cuando a su nave le es denegado el aterrizaje en una estación espacial o puesto avanzado",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{Pause(1500)}\n\n{_ Incluimos un poco de personalidad a Shirka _}\n{if GetState(\"eddi_context_landing_denies\") > 0:\n\t{SetState(\"eddi_context_landing_denies\", GetState(\"eddi_context_landing_denies\") + 1)}\n|else:\n\t{SetState(\"eddi_context_landing_denies\", 1)}\n}\n\n{if ShirkaSarcastica && GetState(\"eddi_context_landing_denies\") = 4:\n\t¡{Occasionally(2, \"Ya\")} le han {OneOf(\"avisado\", \"dicho\")} {Occasionally(2, \"{OneOf('varias veces', 'unas cuantas veces')}{Occasionally(2, ',')}\")} que no le dan el permiso {Occasionally(2, \"para aterrizar\")}!.\n|elif ShirkaSarcastica && GetState(\"eddi_context_landing_denies\") = 5:\n\t{OneOf(\"Por mucho que insista no le van a dar el permiso. {Transmit('Santa paciencia.')}\", \"Como siga insistiendo se van a cabrear. {Transmit('Y yo también.')}\")}\n|elif ShirkaSarcastica && GetState(\"eddi_context_landing_denies\") = 6:\n\t{Transmit('{OneOf(\"¿Está sordo?\", \"¿En serio?\")}')}\n|elif ShirkaSarcastica && GetState(\"eddi_context_landing_denies\") = 7:\n\t{Transmit(\"Me rindo...\")}\n|elif ShirkaSarcastica && GetState(\"eddi_context_landing_denies\") > 7:\n\t{_ ingnoramos al comandante... }\n|else:\n\t{OneOf('Hemos recibido una denegación del permiso de aterrizaje','Se nos ha denegado el permiso de aterrizaje','nos informan de que no pueden darnos permiso para aterrizar')}\n\n\t{if event.reason = \"ActiveFighter\":\n    \tporque nuestro caza está desplegado\n\t|elif event.reason = \"Distance\":\n\t    \t{OneOf('porque estamos demasiado lejos {Occasionally(2, \"de la estación\")}','Porque no hemos alcanzado la distancia mínima {Occasionally(2, \"a la estación\")}')}{Occasionally(3, '. Debemos acercarnos {OneOf(\"al menos a\", \"a menos de\")} siete mil quinientos metros')}\n\t|elif event.reason = \"Hostile\":\n    \t{OneOf('porque no le gustamos a la facción que controla la estación', 'porque la facción que controla la estación nos considera hostiles')}\n\t|elif event.reason = \"NoSpace\":\n    \t    {OneOf('porque no hay espacio disponible', 'porque todas las plataformas están ocupadas', 'porque no hay plataformas libres del tamaño adecuado')}{OneOf (' ',' ','. Debemos esperar a que quede una plataforma libre')}\n\t|elif event.reason = \"Offences\":\n\t    porque hemos cometido una ofensa contra ellos recientemente\n\t|elif event.reason = \"TooLarge\":\n    \tporque no hay pistas de aterrizaje de tamaño suficiente para albergar esta nave\n\t}.\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Docking granted": {
      "name": "Docking granted",
      "description": "Se activa cuando se te concede permiso a tu nave para aterrizar en una estación espacial o puesto avanzado",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_station_model', event.stationtype)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n{SetState(\"eddi_context_landing_denies\", 0)}\r\n\r\n{if event.stationDefinition.basename = \"Coriolis\" || \r\n    event.stationDefinition.basename = \"Orbis\" || \r\n    event.stationDefinition.basename = \"Bernal\" || \r\n    event.stationDefinition.basename = \"Ocellus\" || \r\n    event.stationDefinition.basename = \"AsteroidBase\":\r\n    {Pause(8000)}\r\n    {F(\"Landing pad report\")}\r\n|else:\r\n    {Pause(8000)}\r\n\t{set control to OneOf(\"Control {Occasionally(2, 'aéreo')} le ha\", \"La torre de control le ha\", \"Se le ha\", \"\")}\r\n\t{if control:\r\n\t\t{control} {OneOf('asignado', 'reservado', 'preparado')} la\r\n\t|else:\r\n\t\t{OneOf('Lista', 'Asignada', 'Reservada', 'Preparada')} {Occasionally(2, \"la\")}\r\n\t}\r\n\t{OneOf(\"plataforma\", \"pista\", \"zona\")} {Occasionally(2, \"de aterrizaje\")} {Occasionally(2, \"número\")} {event.landingpad}.    \r\n}",
      "default": false,
      "includes": null
    },
    "Docking requested": {
      "name": "Docking requested",
      "description": "Se activa cuando tu nave solicita el aterrizaje en una estación espacial o puesto avanzado",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Docking timed out": {
      "name": "Docking timed out",
      "description": "Se activa cuando tu solicitud de aterrizaje expira",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('No recibimos respuesta a nuestra solicitud de aterrizaje','la estación no ha respondido a nuestra solicitud de aterrizaje')}.",
      "default": true,
      "includes": null
    },
    "Dropship deployment": {
      "name": "Dropship deployment",
      "description": "Triggered when exiting a military dropship at an on-foot conflict zone",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Embark": {
      "name": "Embark",
      "description": "Triggered when you transition from on foot to a ship or SRV",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if !event.tosrv && GetState(\"eddi_context_srv_deployed_id\"):\r\n    Tu {Spacialise(\"VRS\")} sigue fuera, {F('Honorific')}. Si lo abandonas, se destruirá.\r\n}",
      "default": false,
      "includes": null
    },
    "Empire honorific": {
      "name": "Empire honorific",
      "description": "Función para proporcionar un tratamiento honorífico a su Comandante cuando se alinee con el Imperio",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\n{if cmdr.empirerating.rank <= 4: {_ Commoner }\n   Comandante\n|elif cmdr.empirerating.rank = 5: {_ Knight / Dame }\n    {if cmdr.gender = \"Hombre\": \n        señor\n    |elif cmdr.gender = \"Mujer\": \n        madám\n    |else: \n        Comandante\n    }\n|elif cmdr.empirerating.rank <= 11: {_ Peer / Peeress }\n    {if cmdr.gender = \"Hombre\": \n        {OneOf(\"señor\", \"su señoría\")}\n    |elif cmdr.gender = \"Mujer\": \n        {OneOf(\"madám\", \"su señoría\")}\n    |else: \n        Comandante\n    }\n|elif cmdr.empirerating.rank = 12:\n    su gracia\n|elif cmdr.empirerating.rank = 13:\n    su alteza real\n|elif cmdr.empirerating.rank = 14:\n    su majestad\n}\n",
      "default": true,
      "includes": null
    },
    "Engineer contributed": {
      "name": "Engineer contributed",
      "description": "Triggered when contributing resources to an engineer in exchange for access",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_subject', cat('engineer_', event.engineer))}\r\n{SetState('eddi_context_last_action', 'contributed')}\r\n\r\n{event.engineer} nos da las gracias por contribuir con\r\n{if event.contributiontype = \"Commodity\":\r\n   {event.amount} tonelada{if event.amount != 1:s} \r\n|elif event.contributiontype = \"Material\":\r\n   {if material.category = 'Data':\r\n       {event.amount} {OneOf(\"paquete\", \"registro\")}{if event.amount != 1:s}\r\n   |else:\r\n       {event.amount} {OneOf(\"muestra\", \"fragmento\")}{if event.amount != 1:s}\r\n   }\r\n}\r\nde {event.contribution}.",
      "default": false,
      "includes": null
    },
    "Engineer progressed": {
      "name": "Engineer progressed",
      "description": "Se activa cuando alcanza un nuevo rango con un Ingeniero",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if find(GetState(\"eddi_context_last_subject\"), event.engineer) = -1 && GetState(\"eddi_context_last_action\") != \"contributed\":\r\n\t{set ingeniero to event.engineer}\r\n}\r\n\r\n\r\n{SetState('eddi_context_last_subject', cat(\"engineer_\", event.engineer))}\r\n{SetState('eddi_context_last_action', 'progressed')}\r\n\r\n{if event.progresstype = \"Stage\":\r\n\r\n    {if event.stage = \"Known\":\r\n        El ingeniero {event.engineer} le ha mandado un mensaje.\r\n    |elif event.stage = \"Invited\":\r\n        Ha recibido una invitación al taller de {event.engineer}.\r\n    |elif event.stage = \"Unlocked\":\r\n        {ingeniero} le ha concedido acceso a las instalaciones de su taller.\r\n    |elif event.stage = \"Barred\":\r\n        {event.engineer} tiene {OneOf(\"prohibido\", \"restringido\")} que accedas a las instalaciones de su taller.\r\n    }\r\n\r\n|elif event.engineer:\r\n\r\n    {event.engineer} le ha {OneOf(\"dado\", \"concedido\")} acceso a sus planos de grado {event.rank}.\r\n\r\n}",
      "default": false,
      "includes": null
    },
    "Engineer report": {
      "name": "Engineer report",
      "description": "Report on the engineer in a contextual system",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from Context, if a context is set _}\r\n{if GetState(\"eddi_context_system_name\"):\r\n    {set systemname to GetState(\"eddi_context_system_name\")}\r\n|else:\r\n    {set systemname to system.systemname}\r\n}\r\n\r\n{if !systemname || systemname = \"\":\r\n\r\n    No tengo claro a que sistema te refieres.\r\n\r\n|else:\r\n\r\n    {set reportEngineer to EngineerDetails(systemname)}\r\n    {if reportEngineer:\r\n        {set report to cat(OneOf(\"Este sistema es el hogar\", \"En este sistema está la base\"), \" de \", reportEngineer.name)}\r\n        {if len(reportEngineer.majorspecialties) > 0:\r\n            {set reportMajor to cat(OneOf(\"{Occasionally(2, 'Quién está')} especializado\", \"{Occasionally(2, 'Que es')} especialista\"), \" en \", OneOf(\"mejorar\", \"actualizar\", \"modificar\"), \" \", List(reportEngineer.majorspecialties), \".\")}\r\n        }\r\n        {if len(reportEngineer.minorspecialties) > 0:\r\n        \t{set reportMinor to cat(OneOf(\"puede mejorar\", \"puede actualizar\", \"mejora\", \"actualiza\"), \" \", List(reportEngineer.minorspecialties), \" \", OneOf(\"pero\", \"aunque\"), \" \", OneOf(\"no es su fuerte\", \"no a su máximo grado\"), \".\")}\r\n        }\r\n        {if reportMajor:\r\n        \t{if reportMinor:\r\n                {set report to cat(report, \" \", reportMajor, \" \", OneOf(\"Además\", \"También\"), \" \", reportMinor)}\r\n            |else:\r\n            \t{set report to cat(report, \" \", reportMajor)}\r\n            }\r\n\t\t|else:\r\n\t\t\t{set report to cat(report, \" \", OneOf(\"Quién\", \"Que\"), \" \", reportMinor)}\r\n\t\t}\r\n\t\t{report}\r\n\t\t{OneOf(\"Podrás encontrar\", \"encontrarás\")} a {reportEngineer.name} en la estación {P(reportEngineer.stationname, \"\")}.\r\n    }\r\n}",
      "default": false,
      "includes": null
    },
    "Entered CQC": {
      "name": "Entered CQC",
      "description": "Se activa cuando entra en CQC",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "Entrando en combate de corta distancia.",
      "default": true,
      "includes": null
    },
    "Entered normal space": {
      "name": "Entered normal space",
      "description": "Se activa cuando su nave vuelve a espacio normal",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Entered normal space }\r\n{_ Triggered when your ship enters normal space }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.systemname)}\r\n{SetState('eddi_context_body_name', event.bodyname)}\r\n{SetState('eddi_context_body_type', event.bodytype)}\r\n{SetState('eddi_context_body_system', event.systemname)}\r\n\r\n{set station_notifications to:\r\n    {set station_missions to F(\"Mission check station\")}\r\n    {set station_crimes to F(\"Crime check station\")}\r\n    {if station_missions || station_crimes:\r\n        {_ Pause for station ATC before speaking again _}\r\n        {Pause(1000)}\r\n        {if station_missions:\r\n            {Pause(250)}\r\n            {station_missions}\r\n        }\r\n        {if station_crimes:\r\n            {Pause(250)}\r\n            {station_crimes}\r\n        }\r\n    }\r\n}\r\n\r\n{_ If following a glide event, pause is not required. _}\r\n{if !(status.near_surface && status.fsd_status = \"masslock\"):\r\n    {Pause(3000)}\r\n}\r\n\r\n{Pause(500)}\r\n\r\n{if rand(2):\r\n    {OneOf(\r\n        \"{ShipName()} ha\", \"Hemos\")} {OneOf(\"salido de {Occasionally(2, 'velocidad de')} supercrucero\",\r\n        \"{OneOf('pasado a', 'vuelto a', 'regresado a')} {OneOf('espacio', 'velocidad')} normal\"\r\n    )} \r\n|else:\r\n    {OneOf(\r\n        \"saliendo de {Occasionally(2, 'velocidad de')} supercrucero\",\r\n        \"{OneOf('pasando a', 'volviendo a', 'regresando a')} {OneOf('espacio', 'velocidad')} normal\"\r\n    )}\r\n}\r\n\r\n\r\n{if event.bodytype_invariant = 'Planet':\r\n    {set time to SecondsSince(0) - GetState(\"eddi_context_approach_time\")}\r\n    {if time < 60:\r\n    \t{set settlement to GetState(\"eddi_context_last_settlement\")}\r\n\t\t{set reportStation to StationDetails(settlement, event.systemname)}\r\n\t\t{set location to cat(OneOf(\"cerca\", \"en las proximidades\"), \" \", Occasionally(2, \"del espacio aéreo\"))}\r\n        {if reportStation:\r\n            {SetState('eddi_context_body_name', settlement)}\r\n            {if reportStation.model != \"Estación desconocida\":\r\n            \t{creaArticulos(reportStation.model)}\r\n                {set location to cat(location, \" \", del, \" \", P(reportStation.model, \"station\"), \", \")}\r\n            }\r\n            {set location to cat(location, \" de \", P(settlement, \"station\"), \".\")}\r\n   \t\t\t{set location to cat(location, \" \", station_notifications)}\r\n        |else:\r\n            {set location to cat(location, \" de \", P(settlement, \"station\"), \".\")}\r\n        }\r\n    |else:\r\n        {set reportBody to BodyDetails(event.bodyname , event.systemname)}\r\n    \t{creaArticulos(reportBody.bodytype)}\r\n    \t{set location to OneOf(\"en {Occasionally(2, 'la')} órbita\", \"cerca\", \"en las proximidades\")}\r\n        {set location to cat(location, \" \", del, \" \", reportBody.bodytype, \" \", P(reportBody.bodyname, \"body\"))}\r\n    }\r\n\r\n|elif event.bodytype_invariant = 'Star':\r\n    {set reportBody to BodyDetails(event.bodyname , event.systemname)}\r\n    {set location to cat(OneOf(\"en {Occasionally(2, 'la')} órbita\", \"cerca\", \"en las proximidades\"), \" de la estrella \", P(reportBody.bodyname, \"body\"))}\r\n\r\n|elif event.bodytype_invariant  = 'Station':\r\n\t{set station to StationDetails(event.bodyname , event.systemname)}\r\n\t{creaArticulos(station.model)}\r\n\t{set location to OneOf(\"cerca del espacio aéreo\", \"cerca\", \"en las proximidades\")}\r\n    {set location to cat(location, \" \", del, \" \", P(station.model, \"station\"), \", \", P(event.bodyname, \"station\"))}\r\n    {if station_notifications:\r\n    \t{set location to cat(location, \". \", station_notifications)}\r\n    }\r\n\r\n|elif event.bodytype_invariant  = 'Planetary Ring':\r\n    {set location to OneOf(\"cerca del\", \"en las proximidades del\")}\r\n    {set location to cat(location, \" anillo \", Occasionally(2, 'planetario'), \" \", P(token(event.body, \" Anillo\", 0), \"body\"))}\r\n}\r\n\r\n{location}.\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Entered supercruise": {
      "name": "Entered supercruise",
      "description": "Se activa cuando su nave entra en supercrucero",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fsd')}\n{SetState('eddi_context_last_action', 'engage')}\n\n{if vehicle != \"Taxi\":\n\t{Pause(1000)}\n\n\t{OneOf(\n\t\t'{OneOf(\"{ShipName()} ha entrado en\", \"Estamos en\", \"Hemos entrado en\", \"Nos encontramos en\", \"Entrando en\")} {OneOf(\"modo\", \"velocidad de\", \"\")} supercrucero',\n\t\t'{Occasionally(2, \"Salto a\")} {Occasionally(3, \"modo de\")} supercrucero {OneOf(\". Sin novedad\", \"exitoso\", \"activado\")}',\n\t\t'Velocidad de supercrucero activada',\n\t\t'Activad{OneOf(\"o modo de\", \"a velocidad de\", \"o\")} supercrucero'\n\t\t)\n\t}.\n}\n",
      "default": false,
      "includes": null
    },
    "Exploration data purchased": {
      "name": "Exploration data purchased",
      "description": "Se activa cuando compra datos de exploración",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{OneOf(\n\"Adquiridos datos del sistema {P(event.system)}\",\n \"Datos de{OneOf('l sistema', ' exploración de')}  {P(event.system)} disponibles\",\n\"{Occasionally(3, '{ShipName()} ha')} recibido datos locales de{OneOf('l sistema', 'exploración de')} {P(event.system)}\",\n\"Confirmada la recepción de datos de{OneOf('l sistema', 'exploración de')} {P(event.system)}\"\n)}.",
      "default": true,
      "includes": null
    },
    "Exploration data sold": {
      "name": "Exploration data sold",
      "description": "Se activa cuando vendes datos de exploración",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{set recompensa to humaniza(event.reward)}\n{if len(event.systems) > 1:{set s to \"s\"}}\n\n{set report to cat(\"Datos de exploración de \", len(event.systems), \" sistema\", s, \" vendidos por \", recompensa, \" \", de, \" créditos\")}\n\n{if event.bonus > 0:\n    {set report to cat(report, \", con una bonificación adicional de \", event.bonus, \" créditos por primer descubrimiento\")}\n}\n\n{leeTexto(report)}.",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Fighter docked": {
      "name": "Fighter docked",
      "description": "Se activa cuando atracas el caza en tu nave.",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"embarcado\", \"acoplado\")} {Occasionally(2, \"en la nave\")}.",
      "default": true,
      "includes": null
    },
    "Fighter launched": {
      "name": "Fighter launched",
      "description": "Se activa cuando lanza un caza desde su nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"lanzando\", \"desacoplando\")} caza {Occasionally(2, \"de la nave\")}.",
      "default": true,
      "includes": null
    },
    "Fighter rebuilt": {
      "name": "Fighter rebuilt",
      "description": "Se activa cuando se ha reconstruido un caza en el hangar de su nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"Imprimido\", \"Reconstruido\")} y {OneOf(\"listo para despegar\", \"preparado\")}.",
      "default": true,
      "includes": null
    },
    "File Header": {
      "name": "File Header",
      "description": "Se activa cuando se ha leído el encabezado del archivo",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Fine incurred": {
      "name": "Fine incurred",
      "description": "Se activa cuando se le impone una multa",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fine')}\n{SetState('eddi_context_last_action', 'incur')}\n{SetState('eddi_context_fine_name', event.victim)}\n{SetState('eddi_context_fine_faction', event.faction)}\n{SetState('eddi_context_fine_amount', event.fine)}\n\n{OneOf ('Se nos ha impuesto una multa de {event.fine} créditos de la facción {event.faction}','la facción {event.faction} nos ha impuesto una multa de {event.fine} créditos')}.",
      "default": true,
      "includes": null
    },
    "Fine paid": {
      "name": "Fine paid",
      "description": "Se activa cuando se paga una multa",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\nPagada multa de {event.amount} créditos.\r\n{F(FinesBounties_Delete)}",
      "default": false,
      "includes": null
    },
    "FinesBounties_Add": {
      "name": "FinesBounties_Add",
      "description": "Add Bonds, Bounties & Fines to memory store (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_Add }\r\n{_ Add Bonds, Bounties & Fines to memory store }\r\n\r\n{if GetState(\"eddi_context_bounties_initialised\") != \"yes\": {F(\"FinesBounties_Initialise\")}}\r\n\r\n{set shipid to cast(GetState(\"eddi_context_currentshipid\"), \"s\")}\r\n{SetState('eddi_context_currentshipname', ShipName())}\r\n\r\n{_ Unfortunately the variables needed for Power bonuses to be accurate, are not yet available in EDDI. }\r\n{_ Need: Power Galactic Rank, and Power Personal Rank }\r\n{_ Placeholder variables and code are included if/when they are ever implemented in the future. }\r\n\r\n{_ Setup placeholder Power variables array. Not required if added to EDDI in future. _}\r\n{_ Alternatively, manually edit these to match your Poweer Pledge / own rank / Power rank. _}\r\n{set power to [\"pledged\":\"None\", \"personalrank\": 0, \"galacticrank\": 0]}\r\n\r\n\r\n{if GetState(\"eddi_context_last_subject\") = \"bond\":\r\n    {set type to \"Bond\"}\r\n    {set evtrewards to [event.awardingfaction: event.reward]}\r\n\r\n|elif GetState(\"eddi_context_last_subject\") = \"bounty\" && GetState(\"eddi_context_last_action\") = \"award\":\r\n    {set type to \"BountyAwd\"}\r\n    {set evtrewards to []}\r\n    {for reward in event.rewards:\r\n        {set evtrewards to union(evtrewards, [reward.faction: reward.amount])}\r\n    }\r\n\r\n|elif GetState(\"eddi_context_last_subject\") = \"bounty\" && GetState(\"eddi_context_last_action\") = \"incur\":\r\n    {set type to \"BountyInc\"}\r\n    {set evtrewards to [event.faction: event.bounty]}\r\n\r\n|elif GetState(\"eddi_context_last_subject\") = \"powerbounty\" && GetState(\"eddi_context_last_action\") = \"award\":\r\n    {_ Placeholder for Power Bounties _}\r\n\r\n|elif GetState(\"eddi_context_last_subject\") = \"powerbounty\" && GetState(\"eddi_context_last_action\") = \"incur\":\r\n    {_ Placeholder for Power Bounties _}\r\n\r\n|elif GetState(\"eddi_context_last_subject\") = \"stellarbounty\" && GetState(\"eddi_context_last_action\") = \"award\":\r\n    {_ Placeholder for Interstellar Bounties _}\r\n\r\n|elif GetState(\"eddi_context_last_subject\") = \"stellarbounty\" && GetState(\"eddi_context_last_action\") = \"incur\":\r\n    {_ Placeholder for Interstellar Bounties _}\r\n\r\n|elif GetState(\"eddi_context_last_subject\") = \"fine\":\r\n    {set type to \"Fine\"}\r\n    {set evtrewards to [event.faction: event.fine]}\r\n}\r\n\r\n{set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n{set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n{set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n{set bounties_system_array to split(GetState(\"eddi_context_bounties_system\"), \"+=\")}\r\n{set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n\r\n\r\n{for evtfaction, evtamount in evtrewards:\r\n\r\n    {set position to find(bounties_faction_array, evtfaction, 0)}\r\n    {set updatedata to 0}\r\n    {set pwrpct to 1}\r\n\r\n    {if type = \"Bond\" || type = \"BountyAwd\":\r\n\r\n        {if type = \"BountyAwd\":\r\n\r\n            {_ If in Power controlled space get extra bounty -> A. Lavigny-Duval, Z. Hudson, P. Antal, Y. Grom }\r\n            {if system.powerstate = \"Control\" || system.powerstate = \"Exploited\":\r\n\r\n                {if system.power = \"Arissa Lavigny-Duval\" || system.power = \"Zachary Hudson\":\r\n\r\n                    {_ ALD gets +20% base rate, even if not pledged! _}\r\n                    {if system.power = \"Arissa Lavigny-Duval\": {set pwrpct to 1.2} }\r\n\r\n                    {_ if joined power & personal rank is 2 or more, get bonus amount }\r\n                    {if power.personalrank > 1 && power.pledge = system.power:\r\n                        {set pwrpct to 1.2}\r\n\r\n                        {_ if power galactic rank 3, 2 or 1 = +10%, +20% or +30% }\r\n                        {if power.galacticrank = 3: {set pwrpct to 1.3}\r\n                        |elif power.galacticrank = 2: {set pwrpct to 1.4}\r\n                        |elif power.galacticrank = 1: {set pwrpct to 1.5}\r\n                        }\r\n                    }\r\n\r\n                    {_ if personal rank is 5 = flat +100% bonus }\r\n                    {if power.personalrank = 5 && power.pledge = system.power:\r\n                        {set pwrpct to 2}\r\n                    }\r\n\r\n                |elif system.power = \"Yuri Grom\":\r\n                    {_ Y.Grom +20% base, plus 2% at personal rank =>2 }\r\n                    {_ or 5/7/15% at galactic ranks 3/2/1 _}\r\n                    {set pwrpct to 1.2}\r\n\r\n                    {_ if joined power & personal rank is 2 or more, get +2% on amount }\r\n                    {if power.personalrank > 1 && power.pledge = system.power:\r\n                        {set pwrpct to pwrpct + 0.02}\r\n\r\n                        {_ if power galactic rank 3, 2 or 1 = +3%, +5% or +13% }\r\n                        {if power.galacticrank = 3: {set pwrpct to pwrpct + 0.03}\r\n                        |elif power.galacticrank = 2: {set pwrpct to pwrpct + 0.05}\r\n                        |elif power.galacticrank = 1: {set pwrpct to pwrpct + 0.13}\r\n                        }\r\n                    }\r\n\r\n                |elif system.power = \"Pranav Antal\":\r\n                    {_ if personal rank is 5 = flat +100% bonus in controlled or exploited systems }\r\n                    {if power.personalrank = 5 && power.pledge = system.power:\r\n                        {set pwrpct to 2}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        {set evtamount to floor(evtamount * pwrpct)}\r\n\r\n        {while position > -1:\r\n            {if bounties_type_array[position] = type:\r\n\r\n                {_ Add amount to stored amount }\r\n                {set amount to evtamount + bounties_amount_array[position]}\r\n\r\n                {_ Update array }\r\n                {set bounties_amount_array to union(bounties_amount_array, [position:amount])}\r\n\r\n                {set updatedata to 1}\r\n                {set position to -1}\r\n            |else:\r\n                {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n            }\r\n        }\r\n\r\n    |elif type = \"Fine\" || type = \"BountyInc\":\r\n\r\n        {_ If in Power controlled space incur extra fines & bounties }\r\n        {_ A. Lavigny-Duval, P.Antal, A. Delaine}\r\n\r\n        {_ ALD - F&B Double in control systems _}\r\n        {_ PA - F&B Double in control systems, or +50% in all super-powers _}\r\n        {_ A.Delaine - F&B -20%,  @ rank =>2, -30/40/50 at galactic rank 3/2/1 , rank 5 = -100% _}\r\n\r\n        {if (system.power = \"Arissa Lavigny-Duval\" || system.power = \"Pranav Antal\")\r\n           && system.powerstate = \"Control\":\r\n            {type} doubled in {system.power} controlled space.\r\n        |elif system.power = \"Pranav Antal\":\r\n            {type} increased by 50% in Pranav Antal exploited space.\r\n        |elif system.power = \"Archon Delaine\":\r\n\r\n            {_ if joined power & personal rank is 2 or more, get -20% on fines & bounties incurred }\r\n            {if power.personalrank > 1 && power.pledge = system.power:\r\n                {set pwrpct to pwrpct - 0.2}\r\n\r\n                {_ if power galactic rank 3, 2 or 1 = -10%, -20% or -30% }\r\n                {if power.galacticrank = 3: {set pwrpct to pwrpct - 0.1}\r\n                |elif power.galacticrank = 2: {set pwrpct to pwrpct - 0.2}\r\n                |elif power.galacticrank = 1: {set pwrpct to pwrpct - 0.3}\r\n                }\r\n            }\r\n\r\n            {_ if personal rank is 5 = flat -100% bonus }\r\n            {if power.personalrank = 5 && power.pledge = system.power:\r\n                {set pwrpct to 0}\r\n            }\r\n        }\r\n\r\n        {set evtamount to ceil(evtamount * pwrpct)}\r\n\r\n        {while position > -1:\r\n            {if shipid = bounties_shipid_array[position]:\r\n                {if (bounties_type_array[position] = type)\r\n                 || (bounties_type_array[position] = \"Fine\" && type = \"BountyInc\")\r\n                 || (bounties_type_array[position] = \"BountyInc\" && type = \"Fine\"):\r\n\r\n                    {_ Add amount to stored amount }\r\n                    {set amount to evtamount + bounties_amount_array[position]}\r\n                    {_ Maximum bounty is 1MCr.  Is it still after v3.0? }\r\n                    {if type = \"BountyInc\" || bounties_type_array[position] = \"BountyInc\":\r\n                        {if amount > 1000000: {set amount to 1000000}}\r\n                    }\r\n\r\n                    {_ Update arrays }\r\n                    {if bounties_type_array[position] = \"Fine\" && type = \"BountyInc\":\r\n                        {set bounties_type_array to union(bounties_type_array, [position:type])}\r\n                    }\r\n                    {set bounties_amount_array to union(bounties_amount_array, [position:amount])}\r\n\r\n                    {set updatedata to 1}\r\n                    {set position to -1}\r\n                |else:\r\n                    {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n                }\r\n            |else:\r\n                {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Add new data to arrays}\r\n    {if updatedata = 0:\r\n        {if len(GetState(\"eddi_context_bounties_type\")) = 0:\r\n            {set bounties_shipid_array to [shipid]}\r\n            {set bounties_type_array to [type]}\r\n            {set bounties_faction_array to [evtfaction]}\r\n            {set bounties_system_array to [system.name]}\r\n            {set bounties_amount_array to [evtamount]}\r\n        |else:\r\n            {set bounties_shipid_array to cat(bounties_shipid_array, [shipid])}\r\n            {set bounties_type_array to cat(bounties_type_array, [type])}\r\n            {set bounties_faction_array to cat(bounties_faction_array, [evtfaction])}\r\n            {set bounties_system_array to cat(bounties_system_array, [system.name])}\r\n            {set bounties_amount_array to cat(bounties_amount_array, [evtamount])}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Update State variable strings}\r\n{if len(GetState(\"eddi_context_bounties_type\")) = 0 && len(bounties_type_array) = 1:\r\n    {set sep to \"\"}\r\n|else:\r\n    {set sep to \"+=\"}\r\n}\r\n{SetState('eddi_context_bounties_shipid', join(bounties_shipid_array, sep))}\r\n{SetState('eddi_context_bounties_type', join(bounties_type_array, sep))}\r\n{SetState('eddi_context_bounties_faction', join(bounties_faction_array, sep))}\r\n{SetState('eddi_context_bounties_system', join(bounties_system_array, sep))}\r\n{SetState('eddi_context_bounties_amount', join(bounties_amount_array, sep))}\r\n",
      "default": false,
      "includes": null
    },
    "FinesBounties_CheckContacts": {
      "name": "FinesBounties_CheckContacts",
      "description": "Function to report Bonds/Bounties or Fines/Bounties to collect or pay in the local system. (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_ContactsCheck}\r\n{_ Function to report Bonds/Bounties or Fines/Bounties to collect or pay}\r\n\r\n{if len(GetState(\"eddi_context_bounties_type\")) > 0 && GetState(\"eddi_context_bounties_type\") != null:\r\n   {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n   {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n   {set bounties_system_array to split(GetState(\"eddi_context_bounties_system\"), \"+=\")}\r\n\r\n   {set position to 0}\r\n   {for factions in bounties_faction_array:\r\n\r\n      {if factions = station.faction || factions = system.allegiance || system.name = bounties_system_array[position]:\r\n\r\n         {if bounties_type_array[position] = \"Bond\":\r\n            {set bond to 1}\r\n         |elif bounties_type_array[position] = \"BountyAwd\":\r\n            {set bountyawd to 1}\r\n         |elif bounties_type_array[position] = \"BountyInc\":\r\n            {set bountyinc to 1}\r\n         |elif bounties_type_array[position] = \"Fine\":\r\n            {set fine to 1}\r\n         }\r\n      }\r\n   {set position to position + 1}\r\n   }\r\n}\r\n\r\n{if bountyawd = 1 || bond = 1:\r\n   Recuerde. Tiene sin reclamar\r\n   {if bond = 1: bonos}\r\n   {if bountyawd = 1:\r\n      {if bond = 1: y}\r\n      recompensas\r\n   }\r\n   .\r\n}\r\n\r\n{if fine = 1 || bountyinc = 1:\r\n   {if bountyawd = 1 || bond = 1:\r\n      Además\r\n   |else:\r\n      Recuerde.\r\n   }\r\n   Tiene\r\n   {if fine = 1: multas}\r\n   {if bountyinc = 1:\r\n      {if fine = 1: y}\r\n      recompensas\r\n   }\r\n   por pagar.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "FinesBounties_CheckShip": {
      "name": "FinesBounties_CheckShip",
      "description": "Checks current ship for any crimes. (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_CheckShip}\r\n{_ Checks current ship for any crimes}\r\n\r\n{if status.vehicle = \"SRV\" || status.vehicle = \"Fighter\":\r\n    {set v_type to \"Tu nave actual\"}\r\n|else:\r\n    {set v_type to cat(OneOf(\"Esta\", \"Su\"), \" nave\")}\r\n}\r\n\r\n{if len(GetState(\"eddi_context_bounties_type\")) > 0 && GetState(\"eddi_context_bounties_type\") != null && (find(GetState(\"eddi_context_bounties_type\"), \"Fine\") > -1 || find(GetState(\"eddi_context_bounties_type\"), \"BountyInc\") > -1):\r\n\r\n    {set shipid to cast(GetState(\"eddi_context_currentshipid\"), \"s\")}\r\n    {set shipname to ShipName(shipid)}\r\n\r\n    {set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n    {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n    {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n\r\n    {_ Set up temp arrays of items that match \"Fine\" or \"BountyInc\"}\r\n\r\n    {_ Set up variables}\r\n    {set ship_fines_count to 0}\r\n    {set ship_bounties_count to 0}\r\n    {set ship_fines_total to 0}\r\n    {set ship_bounties_total to 0}\r\n    {set crime_array to []}\r\n\r\n    {_ run loop from 0 to number of entries}\r\n    {set cur to 0}\r\n    {while cur < len(bounties_type_array):\r\n        {if bounties_shipid_array[cur] = shipid:\r\n            {if bounties_type_array[cur] = \"Fine\":\r\n                {set ship_fines_count to ship_fines_count + 1}\r\n                {set ship_fines_total to ship_fines_total + bounties_amount_array[cur]}\r\n            |elif bounties_type_array[cur] = \"BountyInc\":\r\n                {set ship_bounties_count to ship_bounties_count + 1}\r\n                {set ship_bounties_total to ship_bounties_total + bounties_amount_array[cur]}\r\n            }\r\n        |else:\r\n            {if bounties_type_array[cur] = \"Fine\" || bounties_type_array[cur] = \"BountyInc\":\r\n                {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n                {if pos > -1:\r\n                    {set pos to bounties_shipid_array[cur]}\r\n                    {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                    {set crime_array to union(crime_array, [pos:amount])}\r\n                |else:\r\n                    {set pos to bounties_shipid_array[cur]}\r\n                    {set amount to bounties_amount_array[cur]}\r\n                    {set crime_array to union(crime_array, [pos:amount])}\r\n                }\r\n           }\r\n       }\r\n       {set cur to cur + 1}\r\n    }\r\n\r\n    {_ Report info}\r\n\r\n    {if ship_bounties_count > 0: Caution: {vehicle} está en busca y captura!}\r\n\r\n    {if ship_fines_count > 0:\r\n        {if ship_bounties_count > 0: Su |else: {v_type}}\r\n        tiene {ship_fines_count} multa{if ship_fines_count > 1:s} por pagar,\r\n        de un total de {ship_fines_total} créditos.\r\n    }\r\n\r\n    {if ship_bounties_count > 0:\r\n        {if ship_fines_count > 0: Además |else: }\r\n        tiene {ship_bounties_count} recompensa{if ship_fines_count > 1:s |else:} a pagar,\r\n        de un total de {ship_bounties_total} créditos.\r\n    }\r\n\r\n    {if len(crime_array) > 0:\r\n        {if ship_fines_count = 0 && ship_bounties_count = 0:\r\n            {v_type}\r\n            {OneOf(\"está limpia. Sin embargo, tiene sanciones pendientes\",\r\n                   \"no tiene sanciones en esta nave. Pero sí las tiene\")}\r\n            en otra de sus naves.\r\n        |else:\r\n            {Occasionally(1,\"Recuerde que \")}También tiene sanciones en\r\n            {if len(crime_array) = 1: otra nave\r\n            |else: otras naves suyas\r\n            }.\r\n        }\r\n\r\n        {set cur to 0}\r\n        {set length to len(crime_array) - 1}\r\n        {for id, amount in crime_array:\r\n            {amount} créditos en \r\n            {if ShipName(id) != \"Su nave\": {ShipName(id)}\r\n            |else: {ShipCallsign(id)}\r\n            }\r\n            {set cur to cur + 1}\r\n            {if cur = length: y\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }.\r\n\r\n|else:\r\n    {v_type} {OneOf(\"está limpia de sanciones\", \"no tiene sanciones pendientes\")}.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "FinesBounties_ClearShip": {
      "name": "FinesBounties_ClearShip",
      "description": "Removes fines and bounties from ship, due to either death or ship sold (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_ClearShip _}\r\n{_ Removes fines and bounties from ship, due to either death or ship sold _}\r\n\r\n{if len(GetState(\"eddi_context_bounties_type\")) > 0 && GetState(\"eddi_context_bounties_type\") != null:\r\n\r\n   {_ Use stored ident as this function can be called after a ship swap sale has changed it _}\r\n   {set shipid to cast(GetState(\"eddi_context_currentshipid\"), \"s\")}\r\n\r\n   {set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n   {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n\r\n   {set position to 0}\r\n   {for type in bounties_type_array:\r\n\r\n      {if (type = \"Fine\" || type = \"BountyInc\")\r\n          && bounties_shipid_array[position] = shipid\r\n          && GetState(\"eddi_context_selfdestruct\") != \"yes\":\r\n\r\n         {_ If Fine or Bounty Incurred, and not self destructed -> pay them all}\r\n\r\n         {set delete to \"yes\"}\r\n         {set temparray_type to token(GetState(\"eddi_context_bounties_type\"), \"+=\", position, \"Delete\")}\r\n         {SetState('eddi_context_bounties_type', temparray_type)}\r\n\r\n      |elif (type = \"Bond\" || type = \"BountyAwd\")\r\n            && GetState(\"eddi_context_cmdrdied\") = \"yes\"):\r\n         {_ If Bond or Bounty Awarded and player died -> lose them all}\r\n\r\n         {set delete to \"yes\"}\r\n         {set temparray_type to token(GetState(\"eddi_context_bounties_type\"), \"+=\", position, \"Delete\")}\r\n         {SetState('eddi_context_bounties_type', temparray_type)}\r\n\r\n      }\r\n      {set position to position + 1}\r\n   }\r\n}\r\n\r\n{SetState('eddi_context_cmdrdied', \"no\")}\r\n{SetState('eddi_context_selfdestruct', \"no\")}\r\n\r\n{if delete = \"yes\":\r\n\r\n   {set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n   {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n   {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n   {set bounties_system_array to split(GetState(\"eddi_context_bounties_system\"), \"+=\")}\r\n   {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n   {set position to 0}\r\n\r\n   {for type in bounties_type_array:\r\n      {if type = \"Delete\":\r\n\r\n         {_ Rebuild and modify text string from array}\r\n         {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n         {_ Rewrite State variable strings}\r\n         {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n         {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n         {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n         {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n         {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n         {_ Re-split data}\r\n         {set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n         {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n         {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n         {set bounties_system_array to split(GetState(\"eddi_context_bounties_system\"), \"+=\")}\r\n         {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n      |else:\r\n         {set position to position + 1}\r\n      }\r\n   }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "FinesBounties_Delete": {
      "name": "FinesBounties_Delete",
      "description": "Remove paid/collected item from the memory store (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_Delete}\r\n{_ Remove paid/collected item from the memory store}\r\n\r\n{set shipid to cast(GetState(\"eddi_context_currentshipid\"), \"s\")}\r\n\r\n{if GetState(\"eddi_context_last_subject\") = \"bond\":\r\n   {set type to \"Bond\"}\r\n   {_ set amount to event.amount _}\r\n|elif GetState(\"eddi_context_last_subject\") = \"bounty\":\r\n   {set type to \"BountyAwd\"}\r\n|elif GetState(\"eddi_context_last_subject\") = \"bountypaid\":\r\n   {_ This is a placeholder until it's implemented in EDDI _}\r\n   {set type to \"BountyInc\"}\r\n|elif GetState(\"eddi_context_last_subject\") = \"fine\":\r\n   {set type to \"Fine\"}\r\n   {set amount to event.amount}\r\n}\r\n\r\n{set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n{set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n{set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n{set bounties_system_array to split(GetState(\"eddi_context_bounties_system\"), \"+=\")}\r\n{set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n\r\n{if type = \"BountyAwd\" || type = \"Bond\":\r\n   {for reward in event.rewards:\r\n\r\n      {set position to 0}\r\n      {for faction in bounties_faction_array:\r\n\r\n         {_ If collecting at Interstellar Factors _}\r\n         {set IF_amount to floor(bounties_amount_array[position] * 0.75)}\r\n\r\n         {if (reward.faction = faction || reward.amount = IF_amount) && bounties_type_array[position] = type:\r\n\r\n            {_ Rebuild data}\r\n            {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n            {_ Rewrite data}\r\n            {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n            {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n            {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n            {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n            {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n            {_ Re-split data}\r\n            {set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n            {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n            {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n            {set bounties_system_array to split(GetState(\"eddi_context_bounties_system\"), \"+=\")}\r\n            {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n         |else:\r\n            {set position to position + 1}\r\n         }\r\n      }\r\n   }\r\n\r\n|elif type = \"Fine\" || type = \"BountyInc\":\r\n   {_ If Fine and Amount match, delete it}\r\n\r\n   {_ If paying at Interstellar Factors _}\r\n   {set IF_amount to ceil(amount * 1.25)}\r\n\r\n   {set position to 0}\r\n   {for amounts in bounties_amount_array:\r\n\r\n      {set amounts to cast(amounts, \"n\")}\r\n      {set system to SystemDetails(system.name)}\r\n\r\n      {if system.faction = bounties_faction_array[position]\r\n          && bounties_type_array[position] = type\r\n          && (amounts = amount || amounts = IF_amount):\r\n\r\n         {_ Rebuild data}\r\n         {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n         {_ Rewrite data}\r\n         {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n         {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n         {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n         {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n         {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n         {_ Re-split data}\r\n         {set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n         {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n         {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n         {set bounties_system_array to split(GetState(\"eddi_context_bounties_system\"), \"+=\")}\r\n         {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n      |else:\r\n         {set position to position + 1}\r\n      }\r\n   }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "FinesBounties_Initialise": {
      "name": "FinesBounties_Initialise",
      "description": "Setup Fines & Bounties 'database' (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_Initialise}\r\n{_ Setup Fines & Bounties 'database'}\r\n\r\n{SetState('eddi_context_bounties_shipid', \"\")}\r\n{SetState('eddi_context_bounties_type', \"\")}\r\n{SetState('eddi_context_bounties_faction', \"\")}\r\n{SetState('eddi_context_bounties_system', \"\")}\r\n{SetState('eddi_context_bounties_amount', \"\")}\r\n\r\n{SetState('eddi_context_bounties_initialised', \"yes\")}\r\n\r\n\r\n\r\n",
      "default": true,
      "includes": null
    },
    "FinesBounties_ReportBonds": {
      "name": "FinesBounties_ReportBonds",
      "description": "Report on the Bonds you have earned (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_ReportBonds}\r\n{_ Report on the Bonds you have earned}\r\n\r\n{if len(GetState(\"eddi_context_bounties_type\")) > 0 && GetState(\"eddi_context_bounties_type\") != null && find(GetState(\"eddi_context_bounties_type\"), \"Bond\") > -1:\r\n   {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n   {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n   {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Bond\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"Bond\":\r\n         {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n         {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Bonds Awarded:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"You have {len(temparray_faction)} bond{if len(temparray_faction) != 1:s} to collect, making\",\r\n                \"{len(temparray_faction)} faction{if len(temparray_faction) != 1:s owe |else: owes} you\")} \r\n\r\n         a total of {Humanise(total_amount)} credits.\r\n      }\r\n\r\n      Collect\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {Humanise(temparray_amount[cur])}\r\n         {if len(temparray_faction) = 1: credits}\r\n         from {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   |else:\r\n      You have no bonds to collect {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n   }\r\n|else:\r\n   You have no bonds to collect {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n}.\r\n",
      "default": false,
      "includes": null
    },
    "FinesBounties_ReportBountiesAwarded": {
      "name": "FinesBounties_ReportBountiesAwarded",
      "description": "Report on the Bounties you have earned (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_ReportBountiesAwarded}\r\n{_ Report on the Bounties you have been awarded}\r\n\r\n{if len(GetState(\"eddi_context_bounties_type\")) > 0 && GetState(\"eddi_context_bounties_type\") != null && find(GetState(\"eddi_context_bounties_type\"), \"BountyAwd\") > -1:\r\n   {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n   {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n   {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Bounty\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"BountyAwd\":\r\n         {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n         {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Bounties Awarded:\r\n\r\n   {if len(temparray_faction) > 1:\r\n      {OneOf(\"You have {len(temparray_faction)} bount{if len(temparray_faction) = 1:y |else:ies} to collect,\",\r\n             \"{len(temparray_faction)} faction{if len(temparray_faction) != 1:s} are in your debt\")} \r\n      for a total of {Humanise(total_amount)} credits.\r\n   }\r\n\r\n   Collect\r\n   {set cur to 0}\r\n   {set length to len(temparray_faction) - 1}\r\n   {while cur < len(temparray_faction):\r\n      {Humanise(temparray_amount[cur])}\r\n      {if len(temparray_faction) = 1: credits}\r\n      from\r\n      {if temparray_faction[cur] = \"Alliance\" || temparray_faction[cur] = \"Empire\"\r\n          || temparray_faction[cur] = \"Federation\": the }\r\n      {temparray_faction[cur]}\r\n      {set cur to cur + 1}\r\n      {if cur = length: and\r\n      |elif cur < length:,\r\n      }\r\n   }\r\n\r\n|else:\r\n   You have no bounties to collect {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n}.\r\n",
      "default": false,
      "includes": null
    },
    "FinesBounties_ReportBountiesIncurred": {
      "name": "FinesBounties_ReportBountiesIncurred",
      "description": "Report on the Bounties you have incurred on your current ship (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_ReportBountiesIncurred}\r\n{_ Report on the Bounties you have against you}\r\n\r\n{if len(GetState(\"eddi_context_bounties_type\")) > 0 && GetState(\"eddi_context_bounties_type\") != null && find(GetState(\"eddi_context_bounties_type\"), \"BountyInc\") > -1:\r\n\r\n   {set shipid to cast(GetState(\"eddi_context_currentshipid\"), \"s\")}\r\n\r\n   {set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n   {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n   {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n   {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"BountyInc\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_shipid to []}\r\n   {set temparray_type to []}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n   {set ship_total to 0}\r\n   {set crime_array to []}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"BountyInc\":\r\n         {if bounties_shipid_array[cur] = shipid:\r\n            {set temparray_shipid to cat(temparray_shipid, [bounties_shipid_array[cur]])}\r\n            {set temparray_type to cat(temparray_type, [bounties_type_array[cur]])}\r\n            {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n            {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n            {set ship_total to ship_total + bounties_amount_array[cur]}\r\n         |else:\r\n            {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n            {if pos > -1:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            |else:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            }\r\n         }\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {set diff to total_amount - ship_total}\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Bounties Incurred:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"You have {len(temparray_faction)} bounties to pay. You owe\",\r\n                \"{len(temparray_faction)} factions have put bounties on your head for\")} \r\n         a total of {total_amount} credits.\r\n      }\r\n\r\n      You need to pay\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {temparray_amount[cur]}\r\n         {if len(temparray_faction) = 1: credits}\r\n         to {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }.\r\n\r\n      {if diff > 0:\r\n         You also owe {Humanise(diff)} credits in bounties on\r\n      |else:\r\n         {Occasionally(2,\"{OneOf('However,','Meanwhile,')}\")} You have no bounties on your other ships.\r\n      }\r\n\r\n   |else:\r\n      You have incurred no bounties on this ship {Occasionally(2, \"at {OneOf('this time','the moment')}\")}.\r\n      However, you owe {Humanise(diff)} credits in bounties on\r\n   }\r\n\r\n   {if diff > 0:\r\n      {if len(crime_array) = 1: another ship\r\n      |else: your other ships\r\n      }.\r\n\r\n      {set cur to 0}\r\n      {set length to len(crime_array) - 1}\r\n      {for id, amount in crime_array:\r\n         {amount} credits on \r\n         {if ShipName(id) != \"your ship\": {ShipName(id)}\r\n         |else: {ShipCallsign(id)}\r\n         }\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }.\r\n\r\n|else:\r\n   You have incurred no bounties {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "FinesBounties_ReportFines": {
      "name": "FinesBounties_ReportFines",
      "description": "Report on the Fines you have incurred on your current ship (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ FinesBounties_ReportFines}\r\n{_ Report on the Fines you have against you}\r\n\r\n{if len(GetState(\"eddi_context_bounties_type\")) > 0 && GetState(\"eddi_context_bounties_type\") != null && find(GetState(\"eddi_context_bounties_type\"), \"Fine\") > -1:\r\n\r\n   {set shipid to cast(GetState(\"eddi_context_currentshipid\"), \"s\")}\r\n\r\n   {set bounties_shipid_array to split(GetState(\"eddi_context_bounties_shipid\"), \"+=\")}\r\n   {set bounties_type_array to split(GetState(\"eddi_context_bounties_type\"), \"+=\")}\r\n   {set bounties_faction_array to split(GetState(\"eddi_context_bounties_faction\"), \"+=\")}\r\n   {set bounties_amount_array to split(GetState(\"eddi_context_bounties_amount\"), \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Fine\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_shipid to []}\r\n   {set temparray_type to []}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n   {set ship_total to 0}\r\n   {set crime_array to []}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n\r\n      {if bounties_type_array[cur] = \"Fine\":\r\n         {if bounties_shipid_array[cur] = shipid:\r\n            {set temparray_shipid to cat(temparray_shipid, [bounties_shipid_array[cur]])}\r\n            {set temparray_type to cat(temparray_type, [bounties_type_array[cur]])}\r\n            {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n            {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n            {set ship_total to ship_total + bounties_amount_array[cur]}\r\n         |else:\r\n            {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n            {if pos > -1:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            |else:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            }\r\n         }\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {set diff to total_amount - ship_total}\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Fines Incurred:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"You have {len(temparray_faction)} fines to pay. You owe\",\r\n                \"You owe {len(temparray_faction)} factions\")} \r\n         a total of {ship_total} credits.\r\n      }\r\n\r\n      You need to pay\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {temparray_amount[cur]}\r\n         {if len(temparray_faction) = 1: credits}\r\n         to {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }.\r\n\r\n      {if diff > 0:\r\n         You also owe {diff} credits in fines on\r\n      |else:\r\n         {Occasionally(2,\"{OneOf('However,','Meanwhile,')}\")} You have no fines on your other ships.\r\n      }\r\n\r\n   |else:\r\n      You have no fines to pay on this ship {Occasionally(2, \"at {OneOf('this time','the moment')}\")}.\r\n      However, you owe {diff} credits in fines on\r\n   }\r\n\r\n   {if diff > 0:\r\n      {if len(crime_array) = 1: another ship\r\n      |else: your other ships\r\n      }.\r\n\r\n      {set cur to 0}\r\n      {set length to len(crime_array) - 1}\r\n      {for id, amount in crime_array:\r\n         {amount} credits on \r\n         {if ShipName(id) != \"your ship\": {ShipName(id)}\r\n         |else: {ShipCallsign(id)}\r\n         }\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }.\r\n|else:\r\n   You have incurred no fines {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Flight assist": {
      "name": "Flight assist",
      "description": "Se activa cuando se activa la asistencia de vuelo",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Friends status": {
      "name": "Friends status",
      "description": "Se activa cuando cambia el estatus de un Comandante amigo",
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\n\n{set uselist to \"black\"}\n\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\n\n{if event.name:\n    {if uselist = \"white\":\n        {if find(whitelist, event.name) > -1:\n            {event.name} is now {event.status}.\n        }\n    |elif uselist = \"black\":\n        {if find(blacklist, event.name) = -1:\n            {event.name} is now {event.status}.\n        }\n    }\n|else:\n    No se de quien me está hablando.\n}",
      "default": true,
      "includes": null
    },
    "FSD engaged": {
      "name": "FSD engaged",
      "description": "Se activa cuando se ha conectado su motor de distorsión (FSD)",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_fsd_target', event.target)}\r\n\r\n{_ Zero the 'remaining jump' context to only use values following this event _}\r\n{SetState('eddi_context_remaining_jumps', 0)}\r\n\r\n{if event.target = 'Hyperspace':\r\n    {_ Add/update context to represent a jump _}\r\n    {SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n    {SetState('eddi_context_system_name', event.systemname)}\r\n    {SetState('eddi_context_system_lastvisit', system.lastVisitSeconds)}\r\n\r\n    {set reportsystem to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump _}\r\n    {Pause(6000)}\r\n      \r\n\r\n    {OneOf(\"Destino fijado.\", \"Salto en progreso.\", \"Telemetría obtenida.\", \"Destino confirmado.\", \"\")}\r\n    {OneOf(\r\n        \"{ShipName()} {OneOf('está saltando', 'va de camino', ' está en trayecto', 'en ruta')}\",\r\n        \"{Occasionally(2, 'estamos')} saltando\",\r\n        \"{Occasionally(2, 'vamos')} en dirección\",\r\n        \"{Occasionally(2, 'vamos')} en ruta\",\r\n        \"nos dirigimos\",\r\n        \"viajando\",\r\n        \"{Occasionally(2, 'estamos')} en trayecto\",\r\n        \"{Occasionally(2, 'estamos')} en tránsito\"\r\n    )}\r\n    a{OneOf(\"l sistema\", \"\")} {P(corrigeTexto(reportsystem.systemname), \"starsystem\")}.{Pause(30)}\r\n    {if reportsystem.name = homesystem.name:\r\n        {OneOf(\"llegamos a casa\", \"Finalmente en casa\", \"Por fin en casa\", \"Hogar, dulce hogar\")}, {F(\"Honorific\")}!\r\n    |else:\r\n        {set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n        {if slice(event.stellarclass, 0, 1) = \"D\":\r\n            ¡{OneOf(\"Atención\", \"Cuidado\", \"Advertencia\")}!: {OneOf(\"detectada\", \"la estrella destino es una\", \"nos acercamos a una\")} enana blanca.\r\n        |elif event.stellarclass = \"N\":\r\n            ¡{OneOf(\"Atención\", \"Cuidado\", \"Advertencia\")}!: {OneOf(\"detectada\", \"el destino es una\", \"nos acercamos a una\")} estrella de neutrones.\r\n        |elif event.stellarclass = \"H\":\r\n            ¡{OneOf(\"Atención\", \"Cuidado\", \"Advertencia\")}!: {OneOf(\"detectado\", \"el destino es un\", \"nos acercamos a un\")} agujero negro.\r\n        |elif find(scoopables, event.stellarclass) = -1:\r\n            {set currentfuel to round(status.fuel_percent, 0)}\r\n            {if currentfuel < 25:\r\n            \t{OneOf(\"Atención Comandante:\", \"Tenga en cuenta que\", \"Cuidado Comandante,\", \"Le informo que\")} la estrella {Occasionally(2, \"de destino\")} no permite el repostaje {Occasionally(2, \"de combustible\")}.\r\n            }\r\n        }\r\n        \r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"Ninguno\" && lastsystem.allegiance != \"Independiente\" && (!reportsystem.allegiance || reportsystem.allegiance = \"Ninguno\" || reportsystem.allegiance = \"Independiente\"):\r\n            Comandante {OneOf(\"estamos abandonando el espacio de\", \"hemos dejado\", \"ya no estamos en territorio de\")} {lastsystem.allegiance}.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != reportsystem.allegiance && system.allegiance && system.allegiance != \"Ninguno\":\r\n            {OneOf(\"ahora estamos en\", \"hemos llegado a\", \"estamos entrando a\")} {OneOf(\"{Occasionally(2, 'un')} espacio\",\"una zona\")}\r\n\r\n\r\n\t\t\t{if system.allegiance = \"Independiente\": de un gobierno independiente\r\n\t\t\t|elif system.allegiance = \"La Alianza\": de la Alianza\r\n\t\t\t|elif system.allegiance = \"El Imperio\": del Imperio\r\n\t\t\t|elif system.allegiance = \"La Federación\": de La Federación\r\n\t\t\t|elif system.allegiance = \"Pirata\": Pirata\r\n\t\t\t|elif system.allegiance = \"Guardián\": Guardián\r\n\t\t\t|elif system.allegiance = \"Thargoide\": Zargoide\r\n\t\t\t|elif system.allegiance = \"Federación de Pilotos\": de La Federación de Pilotos}.\r\n\r\n            {if cmdr.title != \"Comandante\":\r\n                 El Gobierno local le da la bienvenida {Oneof(\"como\",\"con el título de\")} {F(\"Honorific\")}.\r\n            }\r\n        }              \r\n    }\r\n\t{if reportsystem.name != homesystem.name:\r\n        {if reportsystem.visits = 0:\r\n        \t{if ship.Role.edname != \"Exploration\":\r\n            \t{OneOf(\"Es nuestra primera visita\", \"Es la primera vez que estamos\", \"Nunca antes habíamos estado\")} {OneOf(\"por aquí\", \"en este sistema\")}\r\n            }\r\n        |elif reportsystem.visits = 1:\r\n        \t{OneOf(\"Es nuestra segunda visita\", \"Es la segunda vez que estamos\")} {OneOf(\"por aquí\", \"en este sistema\")}\r\n        |elif reportsystem.visits = 2:\r\n        \t{Occasionally(2, '{OneOf(\"Es nuestra tercera visita\", \"Es la tercera vez que estamos\")} {OneOf(\"por aquí\", \"en este sistema\")}')}\r\n        |elif reportsystem.visits = 3:\r\n        \t{Occasionally(2, '{OneOf(\"Es nuestra cuarta visita\", \"Es la cuarta vez que estamos\")} {OneOf(\"por aquí\", \"en este sistema\")}')}\r\n        |else:\r\n            {Occasionally(3, \"Hemos {OneOf('visitado', 'estado en', 'pasado por')} este sistema {reportsystem.visits} veces\")}\r\n        }.\r\n     }\r\n\r\n     {if reportsystem.visits < 1:\r\n        {if !reportsystem.population && lastsystem.population:\r\n\t\t\t{OneOf(\"Este sistema está despoblado\", \"En este sistema no hay {OneOf('presencia humana', 'asentamientos humanos', 'ninguna colonia humana', 'colonias humanas')}\", \"No hay {OneOf('presencia humana', 'asentamientos humanos', 'ninguna colonia humana', 'colonias humanas')} en este sistema\", \"La Humanidad aún no ha colonizado este sistema\")}\r\n        |elif reportsystem.population:\r\n            {if SecondsSince(reportsystem.lastVisitSeconds) > 3600:\r\n                {F(\"System report\")}\r\n            }\r\n        }.\r\n     }\r\n\r\n     {if reportsystem.distancefromhome:\r\n         {set ReportDistanceFromHome() to:\r\n          \t{return cat(\r\n           \t\tOneOf(\"Nos encontramos\", \"La posición actual está\", \"Actualmente estamos\"), \" a \",\r\n           \t\thumaniza(round(reportsystem.distancefromhome)), \" años luz de \",\r\n            \tOneOf(\"casa\", \"{P(homesystem.name, 'starsystem')}\"), \".\"\r\n            )}\r\n         }\r\n         {Occasionally(7, ReportDistanceFromHome())}\r\n     }\r\n            \r\n\t{if reportsystem.comment:\r\n\t   {OneOf(\"Has hecho\", \"Tienes\", \"He encontrado\")} {OneOf(\"una anotación\", \"un comentario\", \"una observación\")} {OneOf(\"sobre\", \"acerca de\", \"en relación a\")} este sistema. {OneOf(\"Dice así\", \"Pone esto\", \"Dice lo siguiente\", \"Te leo la nota\")}: {reportsystem.comment}. {Occasionally(2, 'Fin de la {OneOf(\"nota\",\"cita\")}')}.\r\n}\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Fuel check": {
      "name": "Fuel check",
      "description": "Informa sobre niveles de combustible",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fuel Check _}\n{_ Report fuel level _}\n\n{_ FALLA CUANDO ESTA CASI A CERO -}\n\n{_ Might be a taxi or multicrew session. We ignore those. We only want this when we're in our own ship. }\n{if vehicle = \"Ship\":\n\n\t{for compartment in ship.compartments:\n    \t{if compartment.module.basename = \"FuelScoop\":\n    \t    {set scoop_present to true}\n    \t}\n\t}\n\n\t{set shipsfuel to:\n    \t{OneOf(\"Nivel\", \"Depósito\", \"Reserva\")} de combustible\n    \t{Occasionally(2, \"actual\")} \n\t}\n\n\t{set currentfuel to floor(status.fuel_percent)}\n\t{set currentpercent to:\n    \tal {currentfuel} por ciento {Occasionally(3, \"de su capacidad\")}\n\t}\n\n\t{set title to Occasionally(3,\"{F('Honorific')}\")}\n\n\t{set maxjump to round(status.fuel/ship.maxfuel, 2)}\n\n\t{if GetState(\"eddi_context_last_subject\") = \"jump\" && GetState(\"eddi_context_last_action\") = \"complete\" && maxjump < 1.25:\n    \t{OneOf(\"Peligro\", \"Alerta\", \"Atención\")}. {shipsfuel} {OneOf(\"al mínimo\", \"bajo mínimos\")}.\n\t\t{Pause(500)}\n\t\t\n\t    {if scoop_present:\n    \t    {if system.scoopable:\n    \t        {set scoop_system to system.systemname}\n    \t    |else:\n    \t        {set detail to JumpDetails('total')}\n    \t        {set scoop_system to RouteDetails('scoop', detail.distance)}\n    \t        {set scoop_distance to Distance(scoop_system)}\n    \t    }\n\n    \t    {if scoop_system && scoop_system != \"\":\n    \t        {if scoop_system = system.name:\n    \t            {set scoopable_bodies to []}\n    \t            {for body in system.bodies:\n    \t                {if body.scoopable:\n    \t                \t{if body.mainstar || body.shortname = system.name || body.shortname = cat(system.name, \" A\") || body.shortname = \"A\":\n    \t                \t\t{set scoopable_bodies to cat(scoopable_bodies, [OneOf('principal', 'primaria', 'de entrada al sistema')])}\n    \t                \t|else:\n    \t                    \t{set scoopable_bodies to cat(scoopable_bodies, [P(body.shortname, \"body\")])}\n    \t                    }\n    \t                }\n    \t            }\n    \t            {if len(scoopable_bodies) > 1:\n    \t            \t{set s to \"s\"}\n    \t                {set resultado to cat(\"son las: \", List(scoopable_bodies))}\n    \t            |else:\n    \t            \t{set s to \"\"}\n    \t                {set resultado to cat(\"es la \", Occasionally(2, 'estrella'), \" \", List(scoopable_bodies))}\n    \t            }\n\n\t\t\t\t\t{set resultado to cat(resultado, Pause(50), \" del sistema actual.\")}\n    \t        |else:\n    \t            {set resultado to cat(\"está en el sistema \", P(scoop_system, 'starsystem'), \" que está a \", round(scoop_distance, 1), \" años luz de aquí \")}\n    \t        }\n    \t        La{s} estrella{s} recolectable{s} más cercana{s} {resultado}.\n    \t        \n    \t        \n    \t        {Pause(500)}\n    \t        {if maxjump < 0.5:\n    \t             El reabastecimiento {Occasionally(2, \"de combustible\")} es urgente, {title}.\n    \t        |else:\n    \t            El reabastecimiento {Occasionally(2, \"de combustible\")} es altamente recomendable, {title}.\n    \t        }\n    \t    |else:\n    \t        {OneOf(\"Peligro\", \"Alerta\", \"Atención\")}. No hay estrellas recolectables en el rango del próximo salto.\n    \t        {Pause(250)}\n    \t        Se recomienda el cierre de sistemas no esenciales.\n    \t        {Pause(250)}\n    \t        Transpondedor de emergencia a la espera, {title}.\n    \t    }\n    \t|else:\n    \t    {if maxjump < 0.5:\n    \t        {OneOf(\"Es imperativo el reabastecimiento de combustible\", \"Reabastezca el combustible urgentemente\")}.\n    \t    |else:\n    \t        {OneOf(\"Por favor, haga un repostaje de combustible cuanto antes\", \"Se recomienda encarecidamente que recargue combustible\")}.\n    \t    }\n    \t}\n\t|elif currentfuel < 25:\n    \t{OneOf(\"Peligro\", \"Alerta\", \"Atención\")} {title}.\n    \t{shipsfuel} {OneOf(\"por debajo del 25%\", currentpercent)}.\n\t|elif currentfuel < 50:\n\t    {shipsfuel} {OneOf(\"por debajo del 50%\", currentpercent)}.\n\t|elif currentfuel < 75:\n    \t{Occasionally(3, \"{shipsfuel} {currentpercent}.\")}\n\t|elif currentfuel < 100:\n    \t{Occasionally(4, \"{shipsfuel} {currentpercent}.\")}\n\t|else:\n    \t{shipsfuel} {Occasionally(2, \"de la {OneOf(ShipName(), 'Nave')}\")} {OneOf(currentpercent, \"al máximo\")}.\n\t}\n}",
      "default": false,
      "includes": null
    },
    "Galnet latest news": {
      "name": "Galnet latest news",
      "description": "Lee las últimas noticias que no se hayan leído en una determinada categoría",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to GetState(\"article_category\")}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": false,
      "includes": null
    },
    "Galnet mark read": {
      "name": "Galnet mark read",
      "description": "Marca artículos nuevos como leídos",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch category from state }\n{set articlecategory to GetState(\"article_category\")}\n\n{if articlecategory:\n    {set articles to GalnetNewsArticles(articlecategory)}\n|else:\n    {set articles to GalnetNewsArticles('Article')}\n}\n\n{if len(articles) = 0:\n    No hay noticias sin leer\n    {if articlecategory: 'in that category' }\n|elif len(articles) = 1:\n    {set item to 0}\n    {while item < len(articles):\n        {GalnetNewsMarkRead(articles[item].id)}\n        {set item to (item + 1)}\n    }\n{OneOf('un artículo marcado como leído', 'una noticia marcada como leída')} \n\n|else:\n    {set item to 0}\n    {while item < len(articles):\n        {GalnetNewsMarkRead(articles[item].id)}\n        {set item to (item + 1)}\n    }\n{len(articles)} {OneOf('artículos marcados como leídos', 'noticias marcadas como leídas')} \n}. \n",
      "default": false,
      "includes": null
    },
    "Galnet news": {
      "name": "Galnet news",
      "description": "Lee un artículo en particular",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'news')}\r\n\r\n{_ Fetch from context }\r\n{set articleid to GetState(\"eddi_context_galnet_news_id\")}\r\n{if articleid:\r\n    {set article to GalnetNews(GetState(\"eddi_context_galnet_news_id\"))}\r\n}\r\n\r\n{if article:\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n|else:\r\n    No tengo ninguna información sobre ese artículo.\r\n}.",
      "default": false,
      "includes": null
    },
    "Galnet news published": {
      "name": "Galnet news published",
      "description": "Se activa cuando se publican nuevas noticias en GalNet",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set statustitle to \"^(Galactic News: ((Weekly .*)|(Starport Status Update)))|(Powerplay: Incoming Update)\"}\n\n{set interesting_news_title to []}\n{set interesting_news_content to []}\n{set not_interesting_news_title to []}\n{set not_interesting_news_content to []}\n\n{set item to 0}\n{while item < len(event.items):\n    {if !match(event.items[item].title, statustitle):\n        {set interesting_news_title to cat(interesting_news_title, [event.items[item].title])}\n        {set interesting_news_content to cat(interesting_news_content, [event.items[item].content])}\n    |else:\n        {set not_interesting_news_title to cat(not_interesting_news_title, [event.items[item].title])}\n        {set not_interesting_news_content to cat(not_interesting_news_content, [event.items[item].content])}\n    }\n    {GalnetNewsMarkRead(event.items[item].content.id)}\n    {set item to (item + 1)}\n}\n{if len(event.items) = len(interesting_news_title): \n    {set allinteresting to 1} \n}\n\n{if len(interesting_news_title) > 0:\n    {if len(interesting_news_title) = 1:\n        {set remarkable to OneOf('y destacado', 'e importante', 'e interesante', 'e intrigante', 'e inusual')}\n        Se ha publicado un nuevo {OneOf('', '{remarkable}' )}\n        artículo de GalNet titulado {interesting_news_title[0]}.\n    |elif len(event.items) > 1:\n        {len(event.items)} \n        {if allinteresting: \n         Se han publicado nuevos {OneOf('y destacados', 'e importantes', 'e interesantes', 'e intrigantes', 'e inusuales')}\n        }\n        artículos de GalNet \n        {if !allinteresting:\n             , incluyendo {len(interesting_news_title)} \n             {OneOf('de interés.', 'especialmente interesante.', 'digno de comentario.')}\n        }.\n    }\n|elif len(event.items) != ( len(interesting_news_title) + len(not_interesting_news_title) ):\n    {len(event.items)} se han publicado nuevos artículos de GalNet, pero no he sido capaz de determinar si alguno es de su interés, {F('Honorific')}. \n|elif len(interesting_news_title) = 0:\n    Se han actualizado las noticias de GalNet, pero no hay nada digno de mencionar, {F('Honorific')}.\n}\n\n{if len(interesting_news_title) > 0:\n    {if len(interesting_news_title) = 1:\n        Dice: {interesting_news_content[0]}.\n    |elif len(interesting_news_title) > 1:\n        {set item to 0}\n        {while item < len(interesting_news_title):\n            {if item = 0:\n                El primero \n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |elif item = 1:\n                El segundo\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |elif item = len(event.items) - 1:\n                El último\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |else:\n                El siguiente\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            }\n            {set item to item + 1}\n            {Pause(1000)}\n        }\n    }\n}",
      "default": true,
      "includes": null
    },
    "Galnet oldest news": {
      "name": "Galnet oldest news",
      "description": "Lee las noticias más antiguas sin leer en una categoría determinada",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to GetState(\"article_category\")}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": false,
      "includes": null
    },
    "Galnet unread report": {
      "name": "Galnet unread report",
      "description": "Informa sobre noticias sin leer",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    No tiene noticias sin leer\r\n|elif len(articles) = 1:\r\n    Tiene una noticia sin leer\r\n|else:\r\n    Tiene {len(articles)} noticias sin leer\r\n}.",
      "default": true,
      "includes": null
    },
    "GetDistance": {
      "name": "GetDistance",
      "description": "Find distance to destination (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ GetDistance}\r\n{_ Find distance to destination}\r\n\r\n{set dist to -1}\r\n\r\n{set fs to system.name}\r\n{set ts to GetState(\"eddi_context_system_system\")}\r\n\r\n{if fs && ts:\r\n    {if ts = \"\":\r\n        Origin system not designated.\r\n    |elif fs = \"\":\r\n        Destination system not designated.\r\n    |else:\r\n        {set fs to SystemDetails(fs)}\r\n        {set ts to SystemDetails(ts)}\r\n\r\n        {if !fs.name:\r\n            Your origin is not in the Pilot's Federation star charts.\r\n        |elif !ts.name:\r\n            Your destination is not in the Pilot's Federation star charts.\r\n        |else:\r\n            {set dist to round(Distance(fs.x, fs.y, fs.z, ts.x, ts.y, ts.z), 2)}\r\n            {if GetState(\"getdistance\") = 'true':\r\n                Distance {Occasionally(2, \"from {fs.name}\")} to\r\n                {Occasionally(2, \"{OneOf('target','destination')} system\")}\r\n                {ts.name} is {dist} light years.\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{SetState('distance', dist)}\r\n",
      "default": false,
      "includes": null
    },
    "Glide": {
      "name": "Glide",
      "description": "Triggered when your ship enters or exits glide",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'glide')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{if event.gliding:\r\n\t{if vehicle != \"Taxi\":\r\n\t\t{Occasionally(2, \"modo\")} planeo\r\n\t\t{OneOf(\"activado.\", \"iniciado.\")}\r\n\t}\r\n|else:\r\n\t{if vehicle = \"Taxi\":\r\n\t\t{OneOf(\"Acercándonos al destino\", \"Llegaremos al destino en breve\", \"Aproximándonos al destino\")}\r\n\t|else:\r\n\t\t{OneOf(\"Saliendo del {Occasionally(2, 'modo')} planeo\", \"{Occasionally(2, 'Modo')} planeo {OneOf('desactivado', 'completado', 'finalizado')}\")}.\r\n\t}\r\n\t{Pause(1000)}\r\n\t{set body to BodyDetails(event.body, event.system)}\r\n\t{if !body.name || body.name = \"\" || !body.gravity:\r\n\t\tDatos de aproximación planetaria no disponibles.\r\n\t|else:\r\n\t\t{if body.landable:\r\n\t\t\t{set gravity to round(body.gravity, 1)}\r\n\t\t\t{if gravity > 4:\r\n\t\t\t\t¡Peligro!{Pause(100)} {P(body.name)} es un mundo de gravedad extremadamente alta, con {humaniza(gravity ,1)} Ges.\r\n\t\t\t|elif gravity > 2:\r\n\t\t\t\t¡Atención!{Pause(100)} {P(body.name)} es un mundo de gravedad elevada, con {humaniza(gravity, 1)} Ges.\r\n\t\t\t|elif gravity > 0.5:\r\n\t\t\t\t¡Precaución!{Pause(100)} {P(body.name)} es un mundo de gravedad media, con {humaniza(gravity, 1)} Ges.\r\n\t\t\t|else:\r\n\t\t\t\t{set gravity to round(body.gravity, 2)}\r\n\t\t\t\t{P(body.name)} es un mundo de baja gravedad, con {humaniza(gravity, 1)} Ges.\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Hardpoints": {
      "name": "Hardpoints",
      "description": "Triggered when you deploy or retract your hardpoints",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Heat damage": {
      "name": "Heat damage",
      "description": "Se activa cuando su nave está sufriendo daños por excesivo calor",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Alarma:\")}\r\ndaño por calentamiento.",
      "default": true,
      "includes": null
    },
    "Heat warning": {
      "name": "Heat warning",
      "description": "Se activa cuando el calor de su nave supera el 100%",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Cuidado:\")}\r\nNiveles de calentamiento subiendo por encima del límite tolerable.",
      "default": true,
      "includes": null
    },
    "Holoscreen hacked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Holoscreen hacked",
      "description": "Triggered when you hack a power's holoscreen."
    },
    "Honorific": {
      "name": "Honorific",
      "description": "Función para proporcionar un tratamiento honorífico a su Comandante",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{if system.allegiance = \"Imperio\":\n    {F(\"Empire honorific\")}\n|elif system.allegiance = \"Federación\":\n    {if cmdr.federationrating.rank = 0:\n        Comandante\n    |else:\n        {cmdr.federationrating.name}\n    }\n|else:\n    Comandante\n}\n",
      "default": true,
      "includes": null
    },
    "Hull damaged": {
      "name": "Hull damaged",
      "description": "Se activa cuando el casco de su nave se encuentra dañada en cierta medida",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\n    {if event.health < 40:\n        Alerta roja:\n    |elif event.health < 60:\n        Atención:\n    |elif event.health < 80:\n        Precaución:\n    }\n    {OneOf(\"Casco\", \"Integridad del casco\", \"Integridad\", \"Integridad estructural\")} al {event.health}%.\n}\n",
      "default": true,
      "includes": null
    },
    "Hyperdicted": {
      "name": "Hyperdicted",
      "description": "Triggered when your ship is hyperdicted by a Thargoid",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Insurance check": {
      "name": "Insurance check",
      "description": "Comprueba que tenga créditos suficientes para el seguro de su nave",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{set covereds to floor(cmdr.credits / ship.rebuy)}\r\n\n{if covereds = 0:\n Peligro: No tiene suficientes créditos para cubrir la franquicia de su seguro. \n|elif covereds = 1:\n  Precaución: Solo tiene créditos suficientes para cubrir una sola franquicia del seguro.\n|elif covereds < 4:\n  Le informo que solo tiene créditos suficientes para cubrir {covereds} franquicias del seguro.\n}\n",
      "default": true,
      "includes": null
    },
    "Jet cone boost": {
      "name": "Jet cone boost",
      "description": "Se activa cuando se ha recogido suficiente material de un chorro de eyección (en una enana blanca o una estrella de neutrones) para un salto de rango ampliado",
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\nMotor de distorsión {Occasionally(2, \"super\")}cargado {Occasionally(2, \"al {Humanise(event.boost * 100)} %\")}.",
      "default": false,
      "includes": null
    },
    "Jet cone damage": {
      "name": "Jet cone damage",
      "description": "Se activa en espacio normal cuando se pasa a través de un chorro de eyección de una enana blanca o una estrella de neutrones ocasionando daños a los módulos de la nave",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Jump details": {
      "name": "Jump details",
      "description": "Triggered when ship jump details are requested",
      "enabled": true,
      "priority": null,
      "responder": true,
      "script": "{_ Jump details }\r\n{_ Triggered when ship jump details are requested }\r\n",
      "default": true,
      "includes": null
    },
    "Jumped": {
      "name": "Jumped",
      "description": "Se activa cuando se completa un salto a otro sistema estelar (TEST)",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\r\n{SetState('eddi_context_fuel_used', event.fuelused)}\r\n{SetState('eddi_context_wanted_list', \"\")}\r\n\r\n{set next_system to RouteDetails(\"update\")}\r\n{F('Fuel check')}\r\n\r\n{set jump_count to GetState(\"eddi_context_remaining_jumps\")}\r\n{if jump_count > 20:\r\n    {set occasional to ceil(jump_count / 10)}\r\n|elif jump_count > 5:\r\n    {set occasional to 2}\r\n|else:\r\n    {set occasional to 1}\r\n}\r\n\r\n{if !GetState(\"long_route\") && jump_count > 1: {SetState('long_route', true)}}\r\n\r\n{_ destinationsystem and destinationdistance are EDDI's global variables _}\r\n{if destinationsystem && destinationsystem.systemname != \"\":\r\n    {if destinationdistance = 0:\r\n        {ShipName()} ha llegado al sistema {P(destinationsystem.systemname, \"starsystem\")}.\r\n        {Pause(1000)}\r\n    |else:\r\n    \t{if rand(occasional) = 0:\r\n    \t\t{if jump_count > 8:\r\n            \tLa distancia al sistema {P(destinationsystem.systemname, \"starsystem\")} es de unos {humaniza(destinationdistance)} años luz\r\n            }\r\n            {if jump_count > 0:\r\n            \t{if jump_count = 1:\r\n    \t\t\t\t{set s to \"\"}{set n to \"\"}\r\n    \t\t\t|else:\r\n    \t\t\t\t{set s to \"s\"}{set n to \"n\"}\r\n    \t\t\t}\r\n    \t\t\t, {Occasionally(2, \"{OneOf('Queda{n}', 'Falta{n}')}\")} {jump_count} salto{s} {Occasionally(2, OneOf(\"para llegar {Occasionally(2, OneOf('al final de la ruta', 'al destino'))}\", \"hasta {OneOf('el final de la ruta', 'el destino')}\"))}\r\n            }.\r\n        }\r\n    }\r\n|else:\r\n    {if  jump_count > 0 && rand(occasional) = 0 && vehicle = \"Ship\":\r\n    \t{if jump_count = 1:\r\n    \t\t{set s to \"\"}{set n to \"\"}\r\n    \t|else:\r\n    \t\t{set s to \"s\"}{set n to \"n\"}\r\n    \t}\r\n        {Occasionally(2, \"{OneOf('Queda{n}', 'Falta{n}')}\")} {jump_count} salto{s} {Occasionally(2, OneOf(\"para llegar {Occasionally(2, OneOf('al final de la ruta', 'al destino'))}\", \"hasta {OneOf('el final de la ruta', 'el destino')}\"))}.\r\n\t|elif jump_count = 0 && GetState(\"long_route\"):\r\n\t\tHemos llegado al final de la ruta.\r\n\t\t{SetState('long_route', false)}\r\n    }\r\n}        \r\n\r\n{_ Report faction states only if it's been more than an hour (3600 seconds) since our last visit. _}\r\n{if SecondsSince(GetState(\"eddi_context_system_lastvisit\")) / 3600 > 1:\r\n\t{set state_report to F(\"System state report\")}\r\n}\r\n\r\n{set system_engineer to F(\"Engineer report\")}\r\n{set system_missions to F(\"Mission check system\")}\r\n{set system_crimes to F(\"Crime check system\")}\r\n\r\n{if state_report || system_engineer || system_missions || (system_crimes && find(system_crimes, \"Atención\") < 0):\r\n    {Pause(500)}\r\n    {OneOf(\"Información\", \"Informe{Occasionally(2, ' de situación')}\", \"Reportando\", \"\")}.\r\n}\r\n\r\n{if state_report:\r\n    {Pause(500)}\r\n    {state_report}.\r\n}\r\n{if system_engineer:\r\n    {Pause(500)}\r\n    {system_engineer}.\r\n}\r\n{if system_missions:\r\n    {Pause(500)}\r\n    {system_missions}.\r\n}\r\n{if system_crimes:\r\n    {Pause(500)}\r\n    {system_crimes}.\r\n}\r\n\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Killed": {
      "name": "Killed",
      "description": "Se activa cuando se destruye a otro jugador",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Landing gear": {
      "name": "Landing gear",
      "description": "Triggered when you deploy or retract your landing gear",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Landing pad report": {
      "name": "Landing pad report",
      "description": "Informa sobre la ubicación de la pista de aterrizaje asignada",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{set landingpad to GetState(\"eddi_context_landing_pad_pad\")}\n    La {OneOf(\"pista\", \"zona\", \"plataforma\")} {Occasionally(2, \"de aterrizaje\")} {Occasionally(2, \"número\")} {landingpad}{Occasionally(2, ',')} {OneOf(\"está\", \"se encuentra\")}\n    {if landingpad = 1:\n        {OneOf(\"a las seis {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las seis {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 2:\n        {OneOf(\"las seis {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las seis {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 3:\n    \t{OneOf(\"las seis {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las seis {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 4:\n        {OneOf(\"las seis {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las seis {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 5:\n        {OneOf(\"a las siete {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las siete {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 6:\n        {OneOf(\"a las siete {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las siete {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 7:\n    \t{OneOf(\"las siete {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las siete {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 8:\n        {OneOf(\"las siete {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las siete {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 9:\n    \t{OneOf(\"a las ocho {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las ocho {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 10:\n    \t{OneOf(\"las ocho {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las ocho {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 11:\n    \t{OneOf(\"a las nueve {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las nueve {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 12:\n        {OneOf(\"a las nueve {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las nueve {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 13:\n    \t{OneOf(\"a las nueve {Occasionally(2, 'en punto')}{Occasionally(2, ',')} en la zona central\", \"en la zona central{Occasionally(2, ',')} a las nueve {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 14:\n    \t{OneOf(\"las nueve {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las nueve {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 15:\n    \t{OneOf(\"las nueve {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las nueve {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 16:\n    \t{OneOf(\"a las diez {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las diez {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 17:\n        {OneOf(\"a las diez {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las diez {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 18:\n    \t{OneOf(\"a las diez {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las diez {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 19:\n        {OneOf(\"a las diez {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las diez {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 20:\n    \t{OneOf(\"a las once {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las once {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 21:\n        {OneOf(\"a las once {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las once {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 22:\n    \t{OneOf(\"a las once {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las once {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 23:\n        {OneOf(\"a las once {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las once {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 24:\n    \t{OneOf(\"a las doce {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las doce {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 25:\n    \t{OneOf(\"a las doce {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las doce {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 26:\n    \t{OneOf(\"a la una {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a la una {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 27:\n        {OneOf(\"a la una {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a la una {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 28:\n    \t{OneOf(\"a la una {Occasionally(2, 'en punto')}{Occasionally(2, ',')} en la zona central\", \"en la zona central{Occasionally(2, ',')} a la una {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 29:\n    \t{OneOf(\"a la una {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a la una {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 30:\n        {OneOf(\"a la una {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a la una {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 31:\n    \t{OneOf(\"a las dos {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las dos {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 32:\n        {OneOf(\"a las dos {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las dos {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 33:\n    \t{OneOf(\"a las dos {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las dos {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 34:\n        {OneOf(\"a las dos {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las dos {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 35:\n    \t{OneOf(\"a las tres {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las tres {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 36:\n        {OneOf(\"a las tres {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las tres {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 37:\n    \t{OneOf(\"a las tres {Occasionally(2, 'en punto')}{Occasionally(2, ',')} en la zona central\", \"en la zona central{Occasionally(2, ',')} a las tres {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 38:\n    \t{OneOf(\"a las tres {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las tres {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 39:\n    \t{OneOf(\"a las cuatro {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las cuatro {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 40:\n    \t{OneOf(\"a las cuatro {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las cuatro {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 41:\n    \t{OneOf(\"a las cinco {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las cinco {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 42:\n        {OneOf(\"a las cinco {Occasionally(2, 'en punto')}{Occasionally(2, ',')} cerca de la entrada\", \"cerca de la entrada{Occasionally(2, ',')} a las cinco {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 43:\n    \t{OneOf(\"a las cinco {Occasionally(2, 'en punto')}{Occasionally(2, ',')} en la zona central\", \"en la zona central{Occasionally(2, ',')} a las cinco {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 44:\n    \t{OneOf(\"a las cinco {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las cinco {Occasionally(2, 'en punto')}\")}\n    |elif landingpad = 45:\n    \t{OneOf(\"a las cinco {Occasionally(2, 'en punto')}{Occasionally(2, ',')} al fondo\", \"al fondo{Occasionally(2, ',')} a las cinco {Occasionally(2, 'en punto')}\")}\n    }\n    {OneOf(\"{set su to 'su'}\", \"{set su to 'la'}\")}\n    {Occasionally(5, \", {OneOf('entrando con', 'dejando', 'entrando dejando')} las luces verdes a {su} derecha\")}.",
      "default": false,
      "includes": null
    },
    "Last scan value": {
      "name": "Last scan value",
      "description": "Returns the actual and maxium obtainable value of a body",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ This script replace the built-in function of EDDI with a more accurate formula _}\r\n{_ it stores results in eddi_context_last_scan_estimated_value and eddi_context_last_scan_max_value _}\r\n\r\n{set valuePlanetTypes to [\r\n    \"Mundo de amoníaco\": 96932,\r\n    \"Mundo similar a la Tierra\": 64831,\r\n    \"Gigante gaseoso con vida basada en el amoníaco\": 300,\r\n    \"Gigante gaseoso con vida basada en el agua\": 300,\r\n    \"Gigante gaseoso de Helio\": 300,\r\n    \"Gigante gaseoso rico en Helio\": 300,\r\n    \"Mundo de alto contenido metálico\": 9654,\r\n    \"Cuerpo helado\": 300,\r\n    \"Cuerpo con alto contenido metálico\": 21790,\r\n    \"Mundo helado rocoso\": 300,\r\n    \"Cuerpo rocoso\": 300,\r\n    \"Gigante gaseoso de Clase 1\": 1656,\r\n    \"Gigante gaseoso de Clase 2\": 9654,\r\n    \"Gigante gaseoso de Clase 3\": 300,\r\n    \"Gigante gaseoso de Clase 4\": 300,\r\n    \"Gigante gaseoso de Clase 5\": 300,\r\n    \"Gigante acuático\": 300,\r\n    \"Gigante acuático con vida\": 300,\r\n    \"Mundo acuático\": 64831,\r\n]}\r\n\r\n{if !reportbody.bodytype: \r\n\t{if GetState(\"eddi_context_last_subject\") = \"star\":\r\n\t\t{set reportbody to BodyDetails(GetState(\"eddi_context_star_star\"), GetState(\"eddi_context_star_system\"))}\r\n\t\t{SetState(\"eddi_context_last_scan_estimated_value\", reportbody.estimatedvalue)}\r\n\t\t{SetState(\"eddi_context_last_scan_max_value\", reportbody.estimatedvalue)}\r\n\t\t{return fin}\r\n\t|else:\r\n    \t{set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))}\r\n    }\r\n}\r\n\r\n{set k to valuePlanetTypes[reportbody.planettype]}\r\n{if (reportbody.terraformstate = \"Candidato para terraformación\" ||reportbody.terraformstate = \"Terraformado\"):\r\n\t{if reportbody.planettype = \"Cuerpo con alto contenido metálico\":\r\n\t\t{set k to k + 100677}\r\n\t|elif reportbody.planettype = \"Mundo acuático\" || reportbody.planettype = \"Mundo similar a la Tierra\":\r\n\t\t{set k to k + 116295}\r\n\t|else:\r\n\t\t{set k to k + 93328}\r\n\t}\r\n}\r\n\r\n{set GetBodyValue(isMapped) to:\r\n\r\n\t{set q to 0.56591828}\r\n\t{set mappingMultiplier to 1}\r\n\t{if isMapped:\r\n\t\t{if !reportbody.alreadydiscovered && !reportbody.alreadymapped:\r\n\t\t\t{set mappingMultiplier to 3.699622554}\r\n\t\t|elif !reportbody.alreadymapped:\r\n\t\t\t{set mappingMultiplier to 8.0956}\r\n\t\t|else:\r\n\t\t\t{set mappingMultiplier to 3.3333333333}\r\n\t\t}\r\n\t}\r\n\t{set value to (k + k * q * pow(reportbody.earthmass,0.2)) * mappingMultiplier}\r\n\t{if isMapped:\r\n\t\t{if odyssey:\r\n\t\t\t{if (value * 0.3) > 555:\r\n\t\t\t\t{set value to value + (value * 0.3)}\r\n\t\t\t|else:\r\n\t\t\t\t{set value to value + 555}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t{set value to max(500, value)}\r\n\t{if !reportbody.alreadydiscovered: {set value to value * 2.6}}\r\n\r\n\t{return round(value)}\r\n}\r\n\r\n{SetState(\"eddi_context_last_scan_estimated_value\", GetBodyValue(reportbody.mapped))}\r\n{SetState(\"eddi_context_last_scan_max_value\", round(GetBodyValue(true) * 1.25))}\r\n",
      "default": false,
      "includes": null
    },
    "Launchbay report": {
      "name": "Launchbay report",
      "description": "Describe el contenido de las bahías con vehículos de la nave",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{if capi_active:\n    {if len(ship.launchbays) > 0:\n        {set hanger_count to 0}\n        {for launchbay in ship.launchbays:\n        \t {set hangar to: Hangar de\n                {if launchbay.type = \"VRS\": \n                    {Spacialise(launchbay.type)}\n                |else: \n                    {launchbay.type}\n                }\n                de tamaño {launchbay.size} \n            }\n            {set hangar_count to hangar_count + 1}\n            {set vehicles to []}\n            {set vehicles_count to []}\n            {if len(launchbay.vehicles) > 0:\n                {for vehicle in launchbay.vehicles:\n                    {set variant to cat(vehicle.name, \"_\", vehicle.description)}\n                    {set here to find(vehicles , variant)}\n                    {if here > -1:\n                        {set count to vehicles_count[here] + 1}\n                        {set vehicles_count to union(vehicles_count, [here:count])}\n                    |else:\n                        {set vehicles to cat(vehicles , [variant])}\n                        {set vehicles_count to cat(vehicles_count, [1])}\n                    }\n                }\n            }\n\n            {if len(vehicles) > 0:\n                {if hangar_count = 1: Tienes |else: y} un {hangar}, almacenando\n                {set cur to 0}\n                {while cur < len(vehicles):\n                    {set count to vehicles_count[cur]}\n                    {set name to split(vehicles[cur], \"_\")[0]}\n                    {set description to split(vehicles[cur], \"_\")[1]}\n                    {count} {if count = 1: {P(name)} |else: {P(name)}s}, con {description}\n                    {set cur to cur + 1}\n                    {if cur = len(vehicles)-1: y |elif cur < len(vehicles): ,}\n                }\n            |else:\n                {if hangar_count = 1: Tienes |else: y} un {hangar} vacío\n            }\n            {if hangar_count = len(ship.launchbays): . |else: ,}\n        }\n    }\n|else:\n    El estado del hangar no está disponible.\n    {Pause(500)}\n    Por favor, compruebe la conexión a la base de datos de la federación de pilotos.\n}",
      "default": false,
      "includes": null
    },
    "Liftoff": {
      "name": "Liftoff",
      "description": "Se activa cuando su nave despega desde la superficie de un planeta",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled:\n  Despegando.\n|else:\n  {ShipName()} ha despegado.\n}",
      "default": false,
      "includes": null
    },
    "Lights": {
      "name": "Lights",
      "description": "Triggered when you activate or deactivate your lights",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Limpet check": {
      "name": "Limpet check",
      "description": "Comprueba la presencia o ausencia de drones y controladores de drones",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{set controllers to 0}\n{for compartment in ship.compartments:\n    {if find(compartment.module.name, \"drón\") != -1 || find(compartment.module.name, \"dron\") != -1 || find(compartment.module.name, \"Limpet\") != -1:\n        {set controllers to controllers + 1}\n    }\n}\n\n{set limpets to 0}\n{for cargo in inventory:\n    {if cargo.name = \"Drón\":\n        {set limpets to cargo.owned}\n    }\n}\n{set tenpercent to ship.cargocapacity / 10 - 1}\n{if controllers > 0 && limpets = 0:\n    Aviso: llevamos un lanzador de drónes pero no llevamos ningún drón.\n|elif controllers = 0 && limpets > 0:\n    transportamos drónes pero no llevamos ningún lanzador\n|elif controllers > 0 && limpets < tenpercent:\n    sólo llevamos {limpets} drónes a bordo; debería considerar el adquirir más.\n}\n",
      "default": false,
      "includes": null
    },
    "Limpet launched": {
      "name": "Limpet launched",
      "description": "Triggered when a limpet is launched",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "Drón {OneOf('lanzado', 'en marcha', 'activado', 'desplegado')}.",
      "default": false,
      "includes": null
    },
    "Limpet purchased": {
      "name": "Limpet purchased",
      "description": "Se activa cuando compra drones en una estación espacial",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{event.amount} drón{if event.amount > 1:es} {Occasionally(2, \"ha{if event.amount > 1:n} sido\")} añadido{if event.amount > 1:s} a{OneOf(\"l compartimento de carga\",\"l inventario\",\" la bodega\")} {OneOf(\"\", \"de la nave\", \"de la {ShipName()}\")}",
      "default": false,
      "includes": null
    },
    "Limpet sold": {
      "name": "Limpet sold",
      "description": "Se activa cuando vende drones en una estación espacial",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{event.amount} drón{if event.amount > 1:es} {Occasionally(2, \"ha{if event.amount > 1:n} sido\")} vendidos.",
      "default": false,
      "includes": null
    },
    "List launchbays": {
      "name": "List launchbays",
      "description": "Describe el contenido de las bahías con vehículos de la nave.",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\n    Tienes un hangar de tamaño {launchbay.size}, de tipo {launchbay.type}.\n    {for vehicle in launchbay.vehicles:\n        Tiene un {P(vehicle.name)} con {vehicle.loadout} de carga\n\n        {if type(vehicle.mount) != null:\n            {if vehicle.mount = 'F':\n                , y armas fijas\n            |elif vehicle.mount = 'G':\n                , y armas de seguimiento\n            }\n        }\n        .{_ full stop}\n\n        {if vehicle.rebuilds != null:\n            {if vehicle.rebuilds = 1:\n                Solo puedes imprimir uno más.\n            |elif vehicle.rebuilds = 0:\n                Falta material para su impresión.\n            |else:\n                Quedan {vehicle.rebuilds} cargas de impresión restantes.\n            }\n        }\n\n        {Pause(500)}\n    }\n}\n",
      "default": true,
      "includes": null
    },
    "Location": {
      "name": "Location",
      "description": "Se activa cuando se informa sobre la ubicación del Comandante, normalmente cuando se reinicia el juego",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Fetch from Context, if a context is set _}\n{if !event.systemname:\n\tMe faltan datos para decirte donde nos encontramos.\n    {return false}\n}\n\n{_ Context _}\n{SetState('eddi_context_last_subject', 'location')}\n{SetState('eddi_context_system_name', event.systemname)}\n{SetState('eddi_context_body_name', event.bodyname)}\n{SetState('eddi_context_body_type', event.bodytype)}\n{SetState('eddi_context_body_system', event.systemname)}\n\n{if event.docked || event.station = event.bodyname:\n\t{_ Near or inside a station _}\n    {set station to StationDetails(event.station, event.systemname)}\n    {set station_missions to F(\"Mission check station\")}\n    {set station_crimes to F(\"Crime check station\")}\n\n\t{creaArticulos(station.model)}\n    {if event.docked:\n        {set location to OneOf(\"acoplados en {el}\", \"atracados en {el}\", \"estacionados en {el}\")}\n    |else:\n        {set location to OneOf(\"cerca {del}\", \"en los alrededores {del}\", \"próximos a{l}\", \"en las proximidades {del}\")}\n    }\n\n    {set location to cat(location, \" \", P(station.model), \", \", P(event.station))}\n    {if event.station != event.bodyname:\n        {set location to cat(location, \", en \", P(event.bodyname))}\n    }\n\n|elif event.bodyname:\n\t{_ Near something else _}\n    {set system_missions to F(\"Mission check system\")}\n    {set system_crimes to F(\"Crime check system\")}\n\n\t{creaArticulos(event.bodytype)}\n    {set location to cat(OneOf(\"cerca {del}\", \"en los alrededores {del}\", \"próximos a{l}\", \"en las proximidades {del}\"))}\n    {if event.bodytype:\n    \t{set location to cat(location, \" \", event.bodytype)}\n    }\n    {set location to cat(location, \" \", P(event.bodyname))}\n}\n\n{OneOf(\"Actualmente\", \"Ahora mismo\", \"\")} {OneOf(\"Nos encontramos\", \"Estamos\")} {location}, en el sistema {P(event.system)}.\n\n{if system.faction:\n    {for faction in system.factions:\n        {if system.faction = faction.name:\n            {if faction.myreputation >= 75: \n                {set rep to \"aliado\")}\n            |elif faction.myreputation >= 35: \n                {set rep to \"amistoso\")}\n            |elif faction.myreputation >= 5: \n                {set rep to \"cordial\")}\n            |elif faction.myreputation >= -15: \n                {set rep to \"\"} {_ Neutral }\n            |elif faction.myreputation >= -90:\n                {set rep to \"enemistado\"}\n            |elif faction.myreputation >= -100: \n                {set rep to \"hostil\"}\n            }\n        }\n    }\n    {if len(rep) > 0:\n        Tu {OneOf(\"estado\", \"reputación\")} actual con la {OneOf(\"potencia\", \"facción\")} {OneOf(\"al {OneOf('control', 'mando')} {Occasionally(2,'del sistema')}\", \"que controla el sistema\", \"local\")}, {P(system.faction, \"faction\")}, es {rep}.\n        {if rep = \"hostil\": {Ocasionally(2, \"Por favor,\")} {OneOf(\"extreme la precauciones\", \"tenga cuidado\")} {Occasionally(3, F('Honorific'))}.}\n    |else:\n        {P(system.faction, \"faction\")} es la {OneOf(\"potencia\", \"facción\")} {OneOf(\"al {OneOf('control', 'mando')} {Occasionally(2,'del sistema')}\", \"que controla el sistema\", \"local\")}.\n    }\n}\n\n{set state_report to F(\"System state report\")}\n{set system_engineer to F(\"Engineer report\")}\n\n{if state_report || system_engineer || system_missions || system_crimes || station_missions || station_crimes:\n    {Pause(250)}\n    {OneOf(\"Información\", \"Informe{Occasionally(2, ' de situación')}\", \"Reportando\", \"\")}.\n    {if state_report:\n        {Pause(250)}\n        {state_report}\n    }\n    {if system_engineer:\n        {Pause(250)}\n        {system_engineer}\n    }\n    {if station_missions:\n        {Pause(250)}\n        {station_missions}\n    }\n    {if station_crimes:\n        {Pause(250)}\n        {station_crimes}\n    }\n    {if system_missions:\n        {Pause(250)}\n        {station_missions}\n    }\n    {if system_crimes:\n        {Pause(250)}\n        {station_crimes}\n    }\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Low fuel": {
      "name": "Low fuel",
      "description": "Se activa cuando los niveles de combustible bajan del 25% y en incrementos del 5 % a partir de entonces",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Market information updated": {
      "name": "Market information updated",
      "description": "Se activa cuando se ha actualizado la información del mercado de la estación espacial en la que se ha aterrizado",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Find out in advance what we have to say }\n\n{if len(event.updates) > 1:\n    {set updatetype to \"Servicios de estación\"}\n    {if ship.role = \"Multi-purpose\" || ship.role = \"Trading\" || ship.role = \"Smuggling\":\n        {set purchasecheck to F(\"Commodity purchase check\")}\n    }\n    {set salecheck to F(\"Commodity sale check\")}\n    {set swapoutcheck to F(\"Swapout check\")}\n    \n|elif event.updates[0] = \"market\":\n    {set updatetype to OneOf(\"Mercado\", \"Mercado local\")}\n    {if ship.role = \"Multi-purpose\" || ship.role = \"Trading\" || ship.role = \"Smuggling\":\n        {set purchasecheck to F(\"Commodity purchase check\")}\n    }\n    {set salecheck to F(\"Commodity sale check\")}\n    \n|elif event.updates[0] = \"outfitting\":\n    {set updatetype to \"equipamiento de la estación\"}\n    {set swapoutcheck to F(\"Swapout check\")}\n    \n|elif event.updates[0] = \"shipyard\":\n    {set updatetype to \"astillero de la estación\"}\n}\n\n{Pause(500)}\n{if purchasecheck || salecheck || swapoutcheck:\n\t{OneOf(\"Recibid\", \"Obtenid\")}{OneOf(\"as actualizaciones de\", \"o refresco de\", \"os cambios en\")} {OneOf(\"datos de\", \"información de\", \"precios en\")}\n    {updatetype}.\n\n    {salecheck}\n    {purchasecheck}\n    {swapoutcheck}\n}\n{F(\"Limpet check\")}\n",
      "default": false,
      "includes": null
    },
    "Material collected": {
      "name": "Material collected",
      "description": "Se activa cuando se recoge un material",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n\r\n{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{if event.name:\r\n\t{creaArticulos(event.name)}\r\n\t\r\n\t{if event.amount != 3 || !rand(4):\r\n\t\t{if !rand(2):\r\n\t\t\t{OneOf(\"Conseguida{s}\", \"Obtenida{s}\", \"Recolectada{s}\")} {humaniza(event.amount)} unidad{es} de {event.name}\r\n\t\t|else:\r\n\t\t\t{humaniza(event.amount, 1)} unidad{es} de {event.name} {OneOf(\"conseguida{s}\", \"obtenida{s}\", \"recolectada{s}\")}\r\n\t\t}\r\n\t|else:\r\n\t\t{if !rand(2):\r\n\t\t\t{OneOf(\"Conseguid{o}{s}\", \"Obtenid{o}{s}\", \"Recolectad{o}{s}\")} {event.name}\r\n\t\t|else:\r\n\t\t\t{event.name} {OneOf(\"conseguid{o}{s}\", \"obtenid{o}{s}\", \"recolectad{o}{s}\")}\r\n\t\t}\r\n\t}.\r\n\r\n\t{F(\"Material inventory report\")}\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Material discard report": {
      "name": "Material discard report",
      "description": "Informa de cuántos materiales puedes eliminar",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_subject_action', 'discard')}\r\n    \r\n{_ Fetch from context }\r\n{set material to MaterialDetails(GetState(\"eddi_context_material_name\"))}\r\n\r\n{_ Function to obtain a material from inventory}\r\n{set GetInventory(requiredMaterial) to:\r\n    {for material in materials:\r\n        {if material.material = requiredMaterial:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{set materialInventory to GetInventory(material.name)}\r\n\r\n{if materialInventory:\r\n    {if materialInventory.maximum && materialInventory.maximum < materialInventory.amount:\r\n        {set over to materialInventory.amount - materialInventory.maximum}\r\n        Puedes deshacerte de {over} unidad{when(over > 1, \"es\")}  de {materialInventory.material} para alcanzar tu límite máximo.\r\n    |elif materialInventory.desired && materialInventory.desired < materialInventory.amount:\r\n        {set over to materialInventory.amount - materialInventory.desired}\r\n        Puedes deshacerte de {over} unidad{when(over > 1, \"es\")} de {materialInventory.material} para alcanzar tu nivel deseado.\r\n    |elif materialInventory.desired:\r\n        Estás por debajo de tu nivel deseado de {materialInventory.material}.\r\n    |elif materialInventory.maximum:\r\n        Estás por debajo de tu límite máximo de {materialInventory.material}.\r\n    |else:\r\n        No has fijado ningún límite para {materialInventory.material}.\r\n    }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Material discarded": {
      "name": "Material discarded",
      "description": "Se activa cuando eliminas algún material",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "includes": null
    },
    "Material discovered": {
      "name": "Material discovered",
      "description": "Se activa cuando descubres un material",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "includes": null
    },
    "Material donated": {
      "name": "Material donated",
      "description": "Se activa cuando donas un material",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "includes": null
    },
    "Material inventory": {
      "name": "Material inventory",
      "description": "Se activa cuando obtienes un inventario de todos tus materiales",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Material inventory report": {
      "name": "Material inventory report",
      "description": "Informa de cuántos materiales llevas a bordo",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'material')}\n{SetState('eddi_context_last_subject_action', 'inventory')}\n\n{_ Fetch from context }\n{set material to MaterialDetails(GetState(\"eddi_context_material_name\"))}\n\n{_ Function to obtain a material from inventory}\n{set GetInventory(requiredMaterial) to:\n    {for material in materials:\n        {if material.material = requiredMaterial:\n            {return material}\n        }\n    }\n}\n\n{if material:\n    {set materialInventory to GetInventory(material.name)}\n\n\n    {if materialInventory && materialInventory.amount > 0:\n        {creaArticulos(materialInventory.material)}\n        \n        {if materialInventory.amount = 1:\n            {OneOf(\n                \"Tenemos\",\n                \"Llevamos\",\n                \"Hay{set onboard to 'a bordo'}\",\n                \"{set onboard to 'a bordo'}\"\n             )}\n             {OneOf(\n                'una unidad{set unidad to true}',\n                '{when(GetState('shirka_context_last_word_gender'), \"un\", \"una\")}'\n             )}\n             {OneOf(\"a bordo\", \"en el almacén\", \"en total\", onboard)}.\n        |else:\n            {OneOf(\n                \"Tenemos\",\n                \"Llevamos\",\n                \"Hay{set onboard to 'a bordo'}\",\n                \"{set onboard to 'a bordo'}\"\n             )}\n             {humaniza(materialInventory.amount)} {Occasionally(2, 'unidades{set unidad to true}')}\n             {OneOf(\"a bordo\", \"en el almacén\", \"en total\", onboard)}.\n        }\n    |else:\n        {OneOf(\"No tenemos\",\"Estamos sin\")} {Occasionally(2,\"existencias de\")} {materialInventory.material} a bordo.\n    }\n}\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Material location report": {
      "name": "Material location report",
      "description": "Informa sobre dónde encontrar un material en particular",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_subject_action', 'location')}\r\n    \r\n{_ Fetch from context }\r\n{set material to MaterialDetails(GetState(\"eddi_context_material_name\"))}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        Se puede encontrar {material.name} en {material.location}\r\n    |else:\r\n        No hay información disponible sobre dónde encontrar {material.name}\r\n    }\r\n|else:\r\n    No tengo ninguna información sobre ese material.\r\n}.\r\n",
      "default": false,
      "includes": null
    },
    "Material required report": {
      "name": "Material required report",
      "description": "Informa de cuántos materiales se necesitan para alcanzar el nivel 'deseado'",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_subject_action', 'required')}\r\n    \r\n{_ Fetch from context }\r\n{set material to MaterialDetails(GetState(\"eddi_context_material_name\"))}\r\n\r\n{_ Function to obtain a material from inventory}\r\n{set GetInventory(requiredMaterial) to:\r\n    {for material in materials:\r\n        {if material.material = requiredMaterial:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{set materialInventory to GetInventory(material.name)}\r\n\r\n{if materialInventory:\r\n    {if materialInventory.minimum && materialInventory.minimum > materialInventory.amount:\r\n        {set under to materialInventory.minimum - materialInventory.amount}\r\n        Necesitas {under} unidad{when(under > 1, \"es\")} de {materialInventory.material} para alcanzar tu límite mínimo.\r\n    |elif materialInventory.desired && materialInventory.desired > materialInventory.amount:\r\n        {set under to materialInventory.desired - materialInventory.amount}\r\n        Necesitas {under} unidad{when(under > 1, \"es\")} de {materialInventory.material} para alcanzar tu nivel deseado.\r\n    |elif materialInventory.desired:\r\n        Estás por encima de tu nivel deseado de {materialInventory.material}.\r\n    |elif materialInventory.minimum :\r\n        Estás por encima de tu límite mínimo de {materialInventory.material}.\r\n    |else:\r\n        No has fijado ningún límite para {materialInventory.material}.\r\n    }\r\n}",
      "default": false,
      "includes": null
    },
    "Material threshold": {
      "name": "Material threshold",
      "description": "Se activa cuando un material alcanza el umbral",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set up a function to report our inventory level }\n{set reportInventory() to:\n    {OneOf(\"Hay {event.amount} en stock\",\n       \"Hay {event.amount} existencias\",\n       \"Hay {event.amount} a bordo\")}.\n}\n\n{_ Respond to various threshold events }\n{if event.level = 'Minimum':\n    {_ Threshold triggered around the minimum level }\n    {if event.change = 'Increase':\n        {OneOf(\"El Stock\", \"el inventario\", \"la reserva\")} de {event.material.name} ha alcanzado el mínimo establecido. {reportInventory()}\n    |else:\n        {OneOf(\"El Stock\", \"el inventario\", \"la reserva\")} de {event.material.name} ha caído por debajo del mínimo establecido. Solo {reportInventory()}\n    }\n|elif event.level = 'Desired':\n    {_ Threshold triggered around the desired level }\n    {if event.change = 'Increase':\n\tSe ha alcanzado el nivel deseado de {event.material.name}. Ya {reportInventory()}\n    |else:\n        {Occasionally(1,\"Tenemos\")}{OneOf(\"El Stock\", \"el inventario\", \"la reserva\")} de {event.material.name} por debajo de lo deseado. Solo {reportInventory()}\n\n    }\n|else:\n    {_ Threshold triggered around the maximum level }\n    {if event.change = 'Increase':\n\tSe ha alcanzado el nivel deseado de {event.material.name}. Ya {reportInventory()}\n\n    }\n}",
      "default": false,
      "includes": null
    },
    "Material traded": {
      "name": "Material traded",
      "description": "Se activa cuando se comercializa con un comerciante de materiales",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Material use report": {
      "name": "Material use report",
      "description": "Informa del uso de un material",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_subject_action', 'use')}\r\n    \r\n{_ Fetch from context }\r\n{set material to MaterialDetails(GetState(\"eddi_context_material_name\"))}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'are'}\r\n    |else:\r\n        {set plural to 'is'}\r\n    }\r\n    {if uses = 0:\r\n      El material {material.name} no se necesita en ningún plano de fabricación\r\n    |elif uses = 1:\r\n        {set name to cat(material.blueprints[0].name, material.blueprints[0].modulename, ' grado ', material.blueprints[0].grade)}\r\n        El material {material.name} es necesario para fabricar el plano {name}\r\n    |elif uses = 2:\r\n        {set name0 to cat(material.blueprints[0].name, material.blueprints[0].modulename, ' grado ', material.blueprints[0].grade)}\r\n        {set name1 to cat(material.blueprints[1].name, material.blueprints[1].modulename, ' grado ', material.blueprints[1].grade)}\r\n        El material {material.name} es usado en los planos {name0} y {name1}\r\n    |else:\r\n        El material {material.name} es usado por {len(material.blueprints)} planos de fabricación.  Estos son\r\n        {set cur to 0}\r\n        {while cur < len(material.blueprints):\r\n            {set name to cat(material.blueprints[cur].name, material.blueprints[cur].modulename, ' grado ', material.blueprints[cur].grade)}\r\n            {if cur = 0:\r\n                {name}\r\n            |elif cur < len(material.blueprints) - 1:\r\n                , {name}\r\n            |else:\r\n                , y {name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    No tengo ninguna información sobre ese material.\r\n}.",
      "default": false,
      "includes": null
    },
    "Materials discard report": {
      "name": "Materials discard report",
      "description": "Informa sobre qué materiales se pueden descartar",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "\n{_ Find those that are above maximum, desired and minimum}\n{set shoulddiscardmaterials to []}\n{set coulddiscardmaterials to []}\n{set lastdiscardmaterials to []}\n\n{for material in materials:\n    {if material.maximum && material.amount > material.maximum:\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\n    |elif material.desired && material.amount > material.desired:\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\n    |elif material.minimum && material.amount > material.minimum:\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\n    }\n}\n\n{if len(shoulddiscardmaterials) > 0:\n   Estamos por encima del nivel máximo de {if len(shoulddiscardmaterials) = 1: 1 material |else: {len(shoulddiscardmaterials)} materials}.  Podemos deshacernos de\n    {if len(shoulddiscardmaterials) = 1:\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material}\n    |elif len(shoulddiscardmaterials) = 2:\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material} y {shoulddiscardmaterials[1].amount - shoulddiscardmaterials[1].maximum} {shoulddiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(shoulddiscardmaterials):\n            {if cur = 0:\n                {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            |elif cur < len(shoulddiscardmaterials) - 1:\n                , {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            |else:\n                , y {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|elif len(coulddiscardmaterials) > 0:\n    Tenemos más cantidad de {if len(coulddiscardmaterials) = 1: 1 material |else: {len(coulddiscardmaterials)} materials} de lo deseado.  Podemos descartar\n    {if len(coulddiscardmaterials) = 1:\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material}\n    |elif len(coulddiscardmaterials) = 2:\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material} y {coulddiscardmaterials[1].amount - coulddiscardmaterials[1].desired} {coulddiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(coulddiscardmaterials):\n            {if cur = 0:\n                {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            |elif cur < len(coulddiscardmaterials) - 1:\n                , {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            |else:\n                , y {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|elif len(lastdiscardmaterials) > 0:\n    Estamos por encima del mínimo requerido de {if len(lastdiscardmaterials) = 1: 1 material |else: {len(lastdiscardmaterials)} materials}.  Podemos eliminar \n    {if len(lastdiscardmaterials) = 1:\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material}\n    |elif len(lastdiscardmaterials) = 2:\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material} y {lastdiscardmaterials[1].amount - lastdiscardmaterials[1].minimum} {lastdiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(lastdiscardmaterials):\n            {if cur = 0:\n                {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            |elif cur < len(lastdiscardmaterials) - 1:\n                , {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            |else:\n                , y {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|else:\n    No podemos deshacernos de ningún material si queremos estar dentro de los mínimos necesarios\n}\n",
      "default": true,
      "includes": null
    },
    "Materials required report": {
      "name": "Materials required report",
      "description": "Informa de cuántos materiales son necesarios para alcanzar el nivel 'deseado'",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{set required to []}\n\n{for material in materials:\n  {if material.desired && material.amount < material.desired:\n    {set required to cat(required, [material])}\n }\n}\n\n{if len(required) > 0:\n    Se requiere\n    {if len(required) = 1:\n        {required[0].desired - required[0].amount} {required[0].material}\n    |elif len(required) = 2:\n        {required[0].desired - required[0].amount} {required[0].material} and {required[1].desired - required[1].amount} {required[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(required):\n            {if cur = 0:\n                {required[cur].desired - required[cur].amount} {required[cur].material}\n            |elif cur < len(required) - 1:\n                , {required[cur].desired - required[cur].amount} {required[cur].material}\n            |else:\n                , y {required[cur].desired - required[cur].amount} {required[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|else:\n    Ya tenemos todos los materiales deseados\n}",
      "default": true,
      "includes": null
    },
    "Message received": {
      "name": "Message received",
      "description": "Se activa cuando recibes un mensaje",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{_ \"true\" means spoken and \"false\" means muted.}\r\n{_ \"npc\" controls whether NPC comms will be spoken.}\r\n{_ \"player\" controls direct messages to you will be spoken.}\r\n{_ \"starsystem\" controls whether player comms across game modes  will be spoken.}\r\n{set spokenChannels to [\r\n    \"friend\": true,\r\n    \"local\": true,\r\n    \"multicrew\": true,\r\n    \"npc\": true,\r\n    \"player\": true,\r\n    \"squadron\": true,\r\n    \"starsystem\": false,\r\n    \"voicechat\": false,\r\n    \"wing\": true,\r\n]}\r\n\r\n{_ \"true\" means spoken and \"false\" means muted.}\r\n{_ \"NPC\" is the default source for NPC comms.}\r\n{set spokenNpcSources to [\r\n    \"Ambushed pilot\" : true,\r\n    \"Bounty hunter\" : true,\r\n    \"Capital ship\" : true,\r\n    \"Cargo hunter\" : true,\r\n    \"Civilian pilot\" : true,\r\n    \"Conflict zone\" : true,\r\n    \"Cruise liner\" : true,\r\n    \"Escort\" : true,\r\n    \"Exploration convoy\" : true,\r\n    \"Hitman\" : true,\r\n    \"Messenger\" : true,\r\n    \"Military\" : true,\r\n    \"Miner\" : true,\r\n    \"NPC\" : true,\r\n    \"Passenger hunter\" : true,\r\n    \"Passenger liner\" : true,\r\n    \"Pirate\" : true,\r\n    \"Police\" : true,\r\n    \"Propagandist\" : true,\r\n    \"Protester\" : true,\r\n    \"Refugee\" : true,\r\n    \"Rival power's agent\" : true,\r\n    \"Search and rescue\" : true,\r\n    \"Starship One\" : true,\r\n    \"Station\" : true,\r\n    \"Wedding convoy\" : true,\r\n]}\r\n\r\n{if spokenChannels[event.channel_invariant] = true:\r\n\t{if event.player = true:\r\n\t\t{set words to split(event.message, \" \")}\r\n\t\t{set msg to []}\r\n\t\t{set cur to 0}\r\n\t\t{while cur < len(words):        \r\n\t\t\t{set o7match to match(words[cur], \"(?<!\\\\w)([o|O|0]7)(?!\\\\w)\")}\r\n\t\t\t{if cur = 0 && (len(words) > 1 || len(o7match) = 0):\r\n\t\t\t\t{set postmsg to \"ha enviado:\"}\r\n\t\t\t\t{set premsg to OneOf('mensaje entrante de ', 'mensaje enviado por ', 'mensaje de ')}\r\n\t\t\t\t{OneOf(\"{set premsg to 'El'}\", \"{set postmsg to ':'}\")}\r\n\t\t\t}\r\n\t\t\t{if len(o7match) > 0:\r\n\t\t\t\t{set remainder to slice(words[cur], 2)}\r\n\t\t\t\t{if len(words) = 1:\r\n\t\t\t\t\t{if event.channel_invariant = 'player': {set you to \"te \"}}\r\n\t\t\t\t\t{set salute to cat(you, \"saluda\")}\r\n\t\t\t\t\t{set msg to cat(msg, [cat(salute, remainder)])}\r\n\t\t\t\t|else:\r\n\t\t\t\t\t{set msg to cat(msg, [cat(\"saludo\", remainder)])}\r\n\t\t\t\t}\r\n\t\t\t|else:\r\n\t\t\t\t{set msg to cat(msg, [words[cur]])}\r\n\t\t\t}\r\n\t\t\t{set cur to cur + 1}\r\n\t\t}\r\n\t\t{set message to join(msg, \" \")}\r\n\t\t{premsg} {Occasionally(2, event.source)} {event.from} {postmsg} {Transmit(message)}\r\n\r\n\t|elif spokenNpcSources[event.source_invariant] = true:\r\n\t\t{set msg to event.message}\r\n\t\t{set msg to join(split(msg, \" cr of cargo\"), \" credits of cargo\")}\r\n\t\t{set msg to join(split(msg, \"t of cargo\"), \" tons of cargo\")}\r\n\r\n\t\t{set voiceNames to []}\r\n\r\n\t\t{_ Seleccionamos sólo las voces en español _}\r\n\t\t{for voiceDetail in VoiceDetails(event.seed): \r\n\t\t\t{if find(voiceDetail.culturename, \"español\") = -1:\r\n\t\t\t\t{_ Esta es una voz que no es española, la saltamos _}\r\n\t\t\t|else:\r\n\t\t\t\t{set voiceNames to cat(voiceNames, [voiceDetail.name])}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t{_ Si queda alguna voz, usamos la primera no excluida _}\r\n\t\t{if len(voiceNames) > 0:\r\n\t\t\t{Transmit(Voice(msg, voiceNames[0]))}\r\n\t\t}\r\n\t}\r\n}",
      "default": false,
      "includes": null
    },
    "Message sent": {
      "name": "Message sent",
      "description": "Se activa cuando envías un mensaje",
      "enabled": false,
      "priority": 5,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'message')}\n{SetState('eddi_context_last_action', 'send')}\n{SetState('eddi_context_message_name', event.to)}\n{SetState('eddi_context_message_content', event.message)}\n\n{OneOf(\"Lanzando mensaje\", \"Mensaje enviado\", \"Enviado\")}.",
      "default": true,
      "includes": null
    },
    "Micro resources purchased": {
      "name": "Micro resources purchased",
      "description": "Triggered when you buy micro resources",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Mission abandoned": {
      "name": "Mission abandoned",
      "description": "Se activa cuando abandonas una misión (TEST)",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'abandon')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if event.communal:\r\n    Ha abandonado un objetivo de comunidad: {mission.localisedname}\r\n|else:\r\n    {if find(mission.type, \"Passenger\") > -1:\r\n        {set type to \"de transporte de \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {if type = \"Hackeo\": {set type to \"de jaqueo\"}\r\n\t|elif type = \"Hack Megaship\": {set type to \"de jaqueo de mega-nave\"}\r\n    |elif type = \"On Foot\": {set type to \"a pie\"}\r\n    |elif type = \"Recaudación\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n    |elif type = \"Recaudación de escuadrón\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n    }\r\n    {set type to cat(\"misión \", type)}\r\n\r\n\r\n\r\n    {type} {if mission.faction: de {mission.faction}} abandonada.\r\n}\r\n\r\n",
      "default": false,
      "includes": null
    },
    "Mission accepted": {
      "name": "Mission accepted",
      "description": "Se activa cuando aceptas una misión (TEST)",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'accepted')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if mission.type = \"Donation\":\r\n    {OneOf(\"Has escogido\",\"misión aceptada para\")} {Occasionally(2,\"generosamente\")} donar\r\n    {if mission.typeEDName = \"Altruism\": {mission.commodity} |else: créditos} para \r\n    {OneOf('mejorar','levantar','incrementar')} su {OneOf('reputación','estatus')} con {P(mission.faction)}\r\n|elif event.communal:\r\n    Ha aceptado el objetivo de comunidad: {mission.localisedname}\r\n|else:\r\n\t{set a to \"a\"}\r\n\t{set la to \"la\"}\r\n\r\n\t{if find(mission.typeEDName, \"Passenger\") > -1:\r\n\t\t{set m to \"o\"}\r\n\t\t{set la to \"el\"}\r\n\t\t{set type to \"transporte de \"}\r\n    \t{set type to cat(type, mission.passengertype)}\r\n\t|elif mission.type = \"Hackeo\":\r\n\t\t{set type to \"misión de jaqueo\"}\r\n\t|elif mission.type = \"Hack Megaship\":\r\n\t\t{set type to \"misión de jaqueo de mega-nave\"}\r\n\t|elif mission.type = \"On Foot\":\r\n\t\t{set type to \"misión a pie\"}\r\n\t|elif mission.type = \"Recaudación\":\r\n\t\t{set type to cat(\"misión de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n\t|elif mission.type = \"Recaudación de escuadrón\":\r\n\t\t{set type to cat(\"misión de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n\t|elif mission.type:\r\n\t\t{set type to cat(\"misión de \", mission.type)}\r\n\t|else:\r\n\t\t{set type to \"misión\"}\r\n\t}\r\n\r\n    {OneOf(\"{type} {if mission.faction: {OneOf('para', 'de', 'otorgada por')} {Occasionally(2, 'la facción')} {mission.faction}} aceptad{a}\",\r\n        \"{type} aceptad{a} {if mission.faction: {OneOf('para', 'de', 'otorgada por')} {Occasionally(2, 'la facción')} {mission.faction}}\",\r\n        \"Aceptad{a} {type} {if mission.faction: {OneOf('para', 'de', 'otorgada por')} {Occasionally(2, 'la facción')} {mission.faction}}\",\r\n        \"Ha aceptado {la} {type} {if mission.faction: {OneOf('para', 'de', 'otorgada por')} {Occasionally(2, 'la facción')} {mission.faction}}\")\r\n    }\r\n}\r\n\r\n{Occasionally(2, F(\"Mission faction state\"))}\r\n\r\n{if mission.passengerswanted:\r\n    ¡Atención! ¡Estamos {OneOf(\"transportando\", \"llevando\")} pasajeros {OneOf(\"buscados {Occasionally(2, 'por la ley')}\", \"en busca y captura\", \"problemáticos\")}!\r\n    Podríamos ser atacados por la {OneOf(\"autoridad\", \"policía\")} {Occasionally(2, \"del sistema\")}.\r\n    {OneOf('Mucha precaución comandante', 'Se aconseja precaución')}. Evite ser escaneado.\r\n\r\n|elif token(mission.name, \"_\", 2) = \"Skimmer\":\r\n    Esta es una {OneOf('misión','operación')} {OneOf('de superficie', 'en superficie {Occasionally(2, \"planetaria\")}', 'en tierra')}\r\n\r\n|elif token(mission.name, \"_\", 2) = \"Surface\":\r\n    Esta es una {OneOf('misión','operación')} {OneOf('de superficie', 'en superficie {Occasionally(2, \"planetaria\")}', 'en tierra')}, puede que requiera un V R S\r\n}.\r\n\r\n{if !event.communal:\r\n    {if missionsCount = 20:\r\n        Ha alcanzado el número máximo de misiones que puedes tomar.\r\n        Por favor, complete algunas antes de aceptar más.\r\n    |else:\r\n       {OneOf(\"{Occasionally(3,'Ahora mismo')} tienes {missionsCount} misión{if missionsCount > 1:es}\",\r\n            \"{if missionsCount = 1:{Occasionally(3, 'Ahora')}} esta es tu {missionsCount}ª misión\")}.\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "includes": null
    },
    "Mission check expiring": {
      "name": "Mission check expiring",
      "description": "Check what missions are close to expiring (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Mission Check Expiring }\r\n{_ Check what missions are close to expiring }\r\n\r\n\r\n{if missionsCount > 0 && missionsCount != null:\r\n\r\n    {set mission_destination to []}\r\n    {set mission_expiration to []}\r\n    {set mission_name to []}\r\n    {set mission_id to []}\r\n    {set cur to 0}\r\n\r\n    {while cur < missionsCount:\r\n        {set destination to missions[cur].destinationsystem}\r\n        {if !destination: {set destination to missions[cur].destinationsystems} }\r\n        {set expiry to missions[cur].expiryseconds}\r\n        {set status to missions[cur].statusEDName}\r\n        {set name to missions[cur].name}\r\n        {set missionid to missions[cur].missionid}\r\n\r\n        {if expiry != \"\" && (status != \"failed\" || status != \"completed\"):\r\n\r\n            {set seconds to floor(abs(SecondsSince(expiry)))}\r\n\r\n            {if seconds / 60 < missionWarning:\r\n\r\n                {set mission_destination to cat(mission_destination, [destination])}\r\n                {set mission_expiration to cat(mission_expiration, [seconds])}\r\n                {set mission_name to cat(mission_name, [name])}\r\n                {set mission_id to cat(mission_id, [missionid])}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if len(mission_destination) > 0:\r\n        ¡Atención!\r\n        {set cur to 0}\r\n        {while cur < len(mission_destination):\r\n\r\n            {set mission to MissionDetails(mission_id[cur])}\r\n            {if find(mission.type, \"Passenger\") > -1:\r\n                {set type to \"de transporte de \"}\r\n                {set type to cat(type, mission.passengertype)}\r\n            |else:\r\n                {set type to mission.type}\r\n            }\r\n\r\n\t\t\t{if type = \"Hackeo\": {set type to \"de jaqueo\"}\r\n\t\t\t|elif type = \"Hack Megaship\": {set type to \"de jaqueo de mega-nave\"}\r\n    \t\t|elif type = \"On Foot\": {set type to \"a pie\"}\r\n    \t\t|elif type = \"Recaudación\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n    \t\t|elif type = \"Recaudación de escuadrón\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n    \t\t}\r\n\r\n            la misión {type}\r\n\r\n            {if find(mission_destination[cur], \"_\") > -1:\r\n                para múltiples destinos,\r\n            |else:\r\n                {if mission_destination[cur] != GetState(\"eddi_context_system_name\"):\r\n                    en el sistema {mission_destination[cur]}\r\n                |else:\r\n                    en {OneOf(\"este\", \"el actual\")} sistema\r\n                }\r\n                ,\r\n            }\r\n            expira en \r\n\r\n            {set timer to split(format(mission_expiration[cur], \"dl:dd:HH:mm:ss\"), \":\")}\r\n            {set days to cast(timer[0], \"n\") - 1}\r\n            {set hours to cast(timer[1], \"n\")}\r\n            {set minutes to cast(timer[2], \"n\") - 1}\r\n\r\n            {if days > 0: {days} day{if days > 1:s}{if hours = 0: and |else:,}}\r\n            {if hours > 0: {hours} hora{if hours > 1:s} y}\r\n            {minutes} minuto{if minutes > 1:s}.\r\n\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Mission Check Expiring": {
      "name": "Mission Check Expiring",
      "description": "Check what missions are close to expiring (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Mission Check Expiring }\r\n{_ Check what missions are close to expiring }\r\n\r\n\r\n{if missionsCount > 0 && missionsCount != null:\r\n\r\n    {set mission_destination to []}\r\n    {set mission_expiration to []}\r\n    {set mission_name to []}\r\n    {set mission_id to []}\r\n    {set cur to 0}\r\n\r\n    {while cur < missionsCount:\r\n        {set destination to missions[cur].destinationsystem}\r\n        {if !destination: {set destination to missions[cur].destinationsystems} }\r\n        {set expiry to missions[cur].expiryseconds}\r\n        {set status to missions[cur].status}\r\n        {set name to missions[cur].name}\r\n        {set missionid to missions[cur].missionid}\r\n\r\n        {if expiry != \"\" && (status != \"failed\" || status != \"completed\"):\r\n\r\n            {set seconds to floor(abs(SecondsSince(expiry)))}\r\n\r\n            {if seconds / 60 < missionWarning:\r\n\r\n                {set mission_destination to cat(mission_destination, [destination])}\r\n                {set mission_expiration to cat(mission_expiration, [seconds])}\r\n                {set mission_name to cat(mission_name, [name])}\r\n                {set mission_id to cat(mission_id, [missionid])}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if len(mission_destination) > 0:\r\n        ¡Atención!\r\n        {set cur to 0}\r\n        {while cur < len(mission_destination):\r\n\r\n            {set mission to MissionDetails(mission_id[cur])}\r\n            {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                {set type to \"transporte de \"}\r\n                {set type to cat(type, mission.passengertype)}\r\n            |else:\r\n                {set type to mission.type}\r\n            }\r\n\r\n{if type = \"Hackeo\": {set type to \"jaqueo\"}}\r\n\r\n            la misión de {type}\r\n\r\n            {if find(mission_destination[cur], \"_\") > -1:\r\n                para múltiples destinos,\r\n            |else:\r\n                {if mission_destination[cur] != GetState(\"eddi_context_system_name\"):\r\n                    en el sistema {mission_destination[cur]}\r\n                |else:\r\n                    en {OneOf(\"este\", \"el actual\")} sistema\r\n                }\r\n                ,\r\n            }\r\n            expira en \r\n\r\n            {set timer to split(format(mission_expiration[cur], \"dl:dd:HH:mm:ss\"), \":\")}\r\n            {set days to cast(timer[0], \"n\") - 1}\r\n            {set hours to cast(timer[1], \"n\")}\r\n            {set minutes to cast(timer[2], \"n\") - 1}\r\n\r\n            {if days > 0: {days} day{if days > 1:s}{if hours = 0: and |else:,}}\r\n            {if hours > 0: {hours} hora{if hours > 1:s} y}\r\n            {minutes} minuto{if minutes > 1:s}.\r\n\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Mission check galaxy": {
      "name": "Mission check galaxy",
      "description": "Revisa que misiones tenemos actualmente y donde",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Setup allmissions function _}\r\n{set allmissions(systemName, mission) to:\r\n    {set here to find(systems, systemName)}\r\n    {if here > -1:\r\n        {if mission.statusEDName = \"Active\":       \r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set claim to systems_claim[here] + 1}\r\n            {set systems_claim to union(systems_claim, [here:claim])}\r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set complete to systems_complete[here] + 1}\r\n            {set systems_complete to union(systems_complete, [here:complete])}\r\n            {set active to systems_active[here] + 1}\r\n            {set systems_active to union(systems_active, [here:active])}\r\n        }\r\n    |else:\r\n        {set systems to cat(systems, [systemName])}\r\n        {if mission.statusEDName = \"Active\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [0])}\r\n            {set systems_complete to cat(systems_complete, [0])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [1])}\r\n            {set systems_complete to cat(systems_complete, [0])}\r\n        |elif mission.statusEDName = \"Complete\":\r\n            {set systems_active to cat(systems_active, [1])}\r\n            {set systems_claim to cat(systems_claim, [0])}\r\n            {set systems_complete to cat(systems_complete, [1])}\r\n         }\r\n    }\r\n}\r\n\r\n{if missionsCount + goalsCount > 0:\r\n    {set failed to 0}\r\n    {set multi to 0}\r\n    {set pending to 0}\r\n    {set systems to []}\r\n    {set systems_active to []}\r\n    {set systems_claim to []}\r\n    {set systems_complete to []}\r\n\r\n    {for mission in missions:\r\n        {if mission.statusEDName = \"Failed\":\r\n            {set failed to failed + 1}\r\n        |else:\r\n            {set pending to pending + 1}\r\n            {if mission.destinationsystems:\r\n                {set multi to multi + 1}\r\n                {for destination in mission.destinationsystems:\r\n                    {allmissions(destination.name, mission)}\r\n                }\r\n            |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                {allmissions(mission.destinationsystem, mission)}\r\n            }\r\n        }\r\n    }\r\n    {set systemsCount to len(systems)}\r\n\r\n    Tienes\r\n    {if failed > 0:\r\n        {if failed = 1: una misión {Occasionally(2, \"que está\")} {OneOf(\"fallida\", \"expirada\", \"rescindida\")}\r\n        |else: {humaniza(failed, true)} misiones {OneOf(\"fallidas\", \"expiradas\", \"rescindidas\")}\r\n        }\r\n        {if missionsCount > failed:\r\n            de {Occasionally(2, \"un total de\")} {humaniza(missionsCount, true)} misiones.\r\n        }\r\n    |else:\r\n        {if missionsCount = 1: una misión.\r\n        |else: {Occasionally(2, \"un total de\")} {humaniza(missionsCount, true)} misiones.}\r\n    }\r\n\r\n    {if pending > 0:\r\n        {if mission_report && systemsCount > 0:\r\n            {set cur to 0}\r\n            {while cur < systemsCount:\r\n                {set active to systems_active[cur]}\r\n                {set claim to systems_claim[cur]}\r\n                {set complete to systems_complete[cur]}\r\n                \r\n                {if active > 0:\r\n                    {humaniza(active, true)}\r\n                    {if cur = 0 || cur = 5 || cur = systemsCount - 1:\r\n\t\t\t\t\t\t{if active = 1: misión |else: misiones}\r\n\t\t\t\t\t}\r\n                }\r\n                {if active = 1:\r\n                \t{OneOf('ubicada en', 'en', 'en el sistema')}\r\n                |else:\r\n                \t{OneOf('ubicadas en', 'en', 'en el sistema')}\r\n                }\r\n                {P(systems[cur])}\r\n                {if claim > 0 || complete > 0: {if active = 1: la cuál|else: de las cuales}}\r\n                \r\n                {if complete > 0:\r\n                \t{if complete = 1: está |else: {complete} están }\r\n                \tpor completar\r\n                    {if claim > 0: y }\r\n                }\r\n                {if claim > 0:\r\n                \t{if claim = 1:\r\n                \t   está\r\n                \t|else:\r\n                \t   {if claim = active:\r\n                \t       todas están\r\n                \t   |else:\r\n                \t   \t   {claim} están\r\n                \t   }\r\n                \t}\r\n                   por reclamar \r\n                }\r\n\r\n                {set cur to cur + 1}\r\n                {if cur = systemsCount - 1:, y {if systemsCount > 5: {OneOf(\"por último,\", \"para acabar,\")}}\r\n                |elif cur < systemsCount: , {if cur = systemsCount - 2: también}}\r\n\r\n            }.\r\n        |else:\r\n            {if pending = 1: pendiente |else: {humaniza(pending, true)} pendientes} \r\n            {if systemsCount = 0:\r\n                sin un sistema objetivo designado\r\n            |elif systemCounts > 1 && missionsCount > 1:\r\n            \trepartidas en {humaniza(systemsCount)} {if systemsCount = 1: sistema {Occasionally(2,\"estelar\")}\r\n                \t\t\t\t  |else: sistemas {Occasionally(2,\"estelares\")}\r\n                \t\t\t\t  }\r\n            }.\r\n            {if multi = 1:\r\n                {if multi = pending: Esta misión |else: Una de estas misiones} tiene varios destinos\r\n            |elif multi > 1:\r\n            \t{if multi = pending: Todas |else: {multi} de} estas misiones tienen varios destinos\r\n            }        \r\n        }\r\n    }\r\n|else:\r\n    {OneOf(\"Actualmente no tenemos ninguna misión.\", \"En estos momentos no hay misiones disponibles.\", \"Tenemos la agenda de misiones vacía\")}\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Mission Check Near Most": {
      "name": "Mission Check Near Most",
      "description": "Find nearest system with missions, and system with most missions (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Mission Check Near Most}\r\n{_ Find nearest system with missions, and system with most missions}\r\n\r\n\r\n{if missionsCount > 0:\r\n\r\n    {_ Setup nearest calculation function}\r\n    {set nearcalc(name) to:\r\n\r\n        {set distance to round(Distance(curr, name), 1)}\r\n\r\n        {if distance < nearest_distance:\r\n            {set nearest_distance to distance}\r\n            {set nearest_name to name}\r\n        }\r\n        {set mission_systems to cat(mission_systems, [name])}\r\n    }\r\n\r\n    {set curr to GetState(\"eddi_context_system_system\")}\r\n    {set nearest_name to \"\"}\r\n    {set mission_systems to []}\r\n    {set systems_names to []}\r\n    {set systems_count to []}\r\n\r\n    {_ Max scan range. 500 is large, 100 above average, 20-50 normal, 5-10 small}\r\n    {_ Missions closer than this will be reported}\r\n    {set nearest_distance to 50}\r\n\r\n    {for mission in missions:\r\n        {if mission.statusEDName = \"Active\":\r\n            {if mission.destinationsystems:\r\n                {set multi to multi + 1}\r\n                {for destination in mission.destinationsystems:\r\n                    {nearcalc(destination.name)}\r\n                }\r\n            |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                {nearcalc(mission.destinationsystem)}\r\n            }\r\n\r\n            {set here to find(systems_names, mission.destinationsystem)}\r\n            {if here > -1:\r\n                {set number to systems_count[here] + 1}\r\n                {set systems_count to union(systems_count, [here:number])}\r\n            |else:\r\n                {set systems_names to cat(systems_names, [mission.destinationsystem])}\r\n                {set systems_count to cat(systems_count, [1])}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    {_ Calculate system with most missions in _}\r\n    {set system_most to \"\"}\r\n    {set system_count to 0}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(systems_names):\r\n        {if systems_count[cur] > system_count:\r\n            {set system_most to systems_names[cur]}\r\n            {set system_count to systems_count[cur]}\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {set equal to 0}\r\n    {set cur to 0}\r\n    {while cur < len(systems_count):\r\n        {if systems_count[cur] = system_count:\r\n            {set equal to equal + 1}\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {_ Report nearest system}\r\n    {if nearest_name != \"\":\r\n        {if missionsCount = 1:\r\n            {if multi = 1:\r\n                You have one multi-destination mission. The nearest \r\n            |else:\r\n                Your only mission\r\n            }\r\n        |else:\r\n            Your nearest mission\r\n        }\r\n        {Occasionally(2, \"destination\")} is in the\r\n        {if nearest_name = curr:\r\n            current system\r\n        |else:\r\n            {nearest_name} system\r\n            {if reported != \"yes\":,\r\n                {if find(nearest_distance, \".00\") > -1: {set nearest_distance to round(nearest_distance, 0)}}\r\n                {nearest_distance} lightyears away\r\n            }\r\n        }.\r\n\r\n\r\n        {_ Report system/s with most missions}\r\n        {if equal = 1:\r\n            {if system_most = nearest_name:\r\n                {if missionsCount > 1:\r\n                    It also has\r\n                    {OneOf(\"{OneOf('the most','most of your')} missions in\",\r\n                           \"the most missions for you to complete\")}.\r\n                }\r\n            |else:\r\n                {if system_most = curr:\r\n                    {set system_most to \"The current system\"}\r\n                |else:\r\n                    {set system_most to cat(\"The\", system_most, \"system\")}\r\n                }\r\n                {OneOf(\"Most of your missions are {Occasionally(2,'located')} in {system_most}\",\r\n                       \"{system_most} has {OneOf('the most','most of your')} missions in\",\r\n                       \"{system_most} has the most missions for you to complete\")}.\r\n            }\r\n        |else:\r\n            You have {system_count} mission{if system_count > 1:s} in each of\r\n            {set cur to 0}\r\n            {set length to equal - 1}\r\n            {while cur < equal:\r\n                the {systems_names[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = length:, and\r\n                |elif cur < length:,\r\n                }\r\n            } systems.\r\n        }\r\n    }\r\n\r\n    {if !system_most && !nearest_name && missionsCount > 0:\r\n        You have no active missions at the moment.\r\n    }\r\n|elif GetState(\"eddi_context_last_subject\") != \"jump\":\r\n    You {Occasionally(2,\"currently\")} have no missions at {OneOf(\"the moment\",\"this time\")}.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Mission check station": {
      "name": "Mission check station",
      "description": "Check what missions you have for the current station",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Mission check station }\r\n{_ Check what missions you have for the current station }\r\n\r\n{if missionsCount > 0:\r\n    {set current_station to GetState(\"eddi_context_body_name\")}\r\n    {set active to 0}\r\n    {set claim to 0}\r\n    {set depot to 0}\r\n    {set total to 0}\r\n\r\n    {if current_station && current_station != \"\":\r\n        {for mission in missions:\r\n            {if mission.destinationstation = current_station || (mission.originstation = current_station && find(mission.type, \"Entrega\") > -1):\r\n                {if mission.status = \"Activo\":\r\n                    {if find(mission.type, \"Recaudación\") > -1 || find(mission.type, \"Entrega\") > -1:\r\n                        {set depot to depot + 1}\r\n                        {set total to total + 1}\r\n                    |else:\r\n                    \t{set active to active + 1}\r\n                    \t{set total to total + 1}\r\n                    }\r\n                |elif mission.status = \"Reclamar\":\r\n                    {set claim to claim + 1}\r\n                    {set total to total + 1}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\t{if total > 0:\r\n    \t{set description to []}\r\n    \t{if depot > 0:\r\n    \t\t{set depotDescription to:\r\n\t\t\t\tel almacén de mercancías de {depot} {if depot = 1: misión |else: misiones}\r\n\t\t\t}\r\n\t\t\t{set description to cat(description, [depotDescription])}\r\n\t\t}\r\n\t\t{if active > 0:\r\n\t\t\t{set activeDescription to:\r\n\t\t\t\t{active} {if active = 1: misión {OneOf(\"pendiente\", \"activa\")} |else: misiones {OneOf(\"pendientes\", \"activas\")}}\r\n\t\t\t}\r\n\t\t\t{set description to cat(description, [activeDescription])}\r\n\t\t}\r\n\t\t{if claim > 0:\r\n\t\t\t{set claimDescription to:\r\n\t\t\t\t{claim} {if claim = 1: misión |else: misiones} {OneOf(\"por reclamar\", \"para cobrar\")} \r\n\t\t\t}\r\n\t\t\t{set description to cat(description, [claimDescription])}\r\n\t\t}\r\n \r\n        {OneOf(\"En esta estación tenemos {List(description)}\", \"Tenemos {List(description)}, en esta estación\")}.\r\n\r\n    }\r\n}",
      "default": false,
      "includes": null
    },
    "Mission check system": {
      "name": "Mission check system",
      "description": "Check what missions you have for the current system",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Setup addstation function }\r\n{set addstation(stationName, mission) to:\r\n    {set missions_here to missions_here + 1}\r\n    {set station_based to station_based + 1}\r\n    {set here to find(stations_here, station)}\r\n    {if here > -1:\r\n        {if mission.statusEDName = \"Active\":\r\n        \t{if find(mission.type, \"Recaudación\") > -1 || find(mission.type, \"Entrega\") > -1:\r\n                {set depot to stations_depot[here] + 1}\r\n                {set stations_depot to union(stations_depot, [here:depot])}\r\n            |else:\r\n            \t{set active to stations_active[here] + 1}\r\n            \t{set stations_active to union(stations_active, [here:active])}\r\n            }\r\n\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set claim to stations_claim[here] + 1}\r\n            {set stations_claim to union(stations_claim, [here:claim])}\r\n        }\r\n    |else:\r\n    \t{set stations_here to cat(stations_here, [station])}\r\n        {if mission.statusEDName = \"Active\":\r\n            {if find(mission.type, \"Recaudación\") > -1 || find(mission.type, \"Entrega\") > -1:\r\n                {set stations_active to cat(stations_active, [0])}\r\n                {set stations_depot to cat(stations_depot, [1])}\r\n            |else:\r\n                {set stations_active to cat(stations_active, [1])}\r\n                {set stations_depot to cat(stations_depot, [0])}\r\n            }\r\n            {set stations_claim to cat(stations_claim, [0])}\r\n        |elif mission.statusEDName = \"Claim\":\r\n            {set stations_active to cat(stations_active, [0])}\r\n            {set stations_claim to cat(stations_claim , [1])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        }\r\n    }\r\n}\r\n\r\n{if missionsCount + goalsCount > 0:\r\n    {set missions_here to 0}\r\n    {set station_based to 0}\r\n    {set stations_active to []}\r\n    {set stations_claim to []}\r\n    {set stations_depot to []}\r\n    {set stations_here to []}\r\n    {set non_stations to []}\r\n\r\n    {_ Find all missions in the current system and identify all the stations }\r\n    {for mission in missions:\r\n        {if mission.statusEDName != \"Failed\":\r\n            {if mission.destinationsystems:\r\n                {for destination in mission.destinationsystems:\r\n                    {if destination.name = system.name && !destination.visited:\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.invariantTags, \"Transport\") > -1:\r\n                            {set type to \"Transporte de \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.tags[0]}\r\n                        }\r\n\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.destinationsystem = system.name:\r\n                {if mission.destinationstation && mission.destinationstation != \"\":\r\n                    {addstation(mission.destinationstation, mission)}\r\n                |else:\r\n                    {if mission.statusEDName = \"Active\":\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(mission.invariantTags, \"Transport\") > -1:\r\n                            {set type to \"Transporte de \"}\r\n                            {set type to cat(type, mission.passengertype)}\r\n                        |else:\r\n                            {set type to mission.tags[0]}\r\n                        }\r\n                        {if find(non_stations, type) = -1:\r\n                            {set non_stations to cat(non_stations, [type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.originsystem = system.name && find(mission.invariantTags, \"Delivery\") > -1:\r\n                {if mission.originstation && mission.originstation != \"\":\r\n                    {addstation(mission.originstation, mission)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {if missions_here > 0:\r\n        {set missionSummaries to []}\r\n        {set cur to 0}\r\n        {for station in stations_here:\r\n            {set estacion to StationDetails(station)}\r\n            {set active to stations_active[cur]}\r\n            {set claim to stations_claim[cur]}\r\n            {set depot to stations_depot[cur]}\r\n            {set summaries to []}\r\n\r\n            {if active > 0:\r\n                {set activeSummary to: \r\n                    {active}\r\n                    {if active = 1:\r\n                    \t{Occasionally(len(summaries)*50, \"misión\")} {OneOf(\"activa\", \"pendiente\")}\r\n                    |else:\r\n                    \t{Occasionally(len(summaries)*50, \"misiones\")} {OneOf(\"activas\", \"pendientes\")}\r\n                    }\r\n                }\r\n                {set summaries to cat(summaries, [activeSummary])}\r\n            }\r\n            {if claim > 0:\r\n                {set claimSummary to: \r\n                    {claim}\r\n                    {if claim = 1:\r\n                    \t{Occasionally(len(summaries)*50, \"misión\")}\r\n                    |else:\r\n                    \t{Occasionally(len(summaries)*50, \"misiones\")}\r\n                    } {OneOf(\"por reclamar\", \"para cobrar\")}\r\n                }\r\n                {set summaries to cat(summaries, [claimSummary])}\r\n            }\r\n            {if depot > 0:\r\n            \t{set depotSummary to: \r\n                    {depot}\r\n                    {if depot = 1:\r\n                    \talmacén de recogidas\r\n                    |else:\r\n                    \talmacenes de recogidas\r\n                    }\r\n                }\r\n                {set summaries to cat(summaries, [depotSummary])}\r\n            }\r\n\r\n            {if len(summaries) > 0:\r\n            \t{if estacion.model != \"Estación desconocida\" && estacion.model:\r\n            \t\t{creaArticulos(estacion.model)}\r\n            \t\t{set modelo to cat(\", en \", Occasionally(2, '{el} {P(estacion.model)}'), \" \", station)}\r\n            \t}\r\n                {set missionSummaries to cat(missionSummaries, [List(summaries)], modelo)}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n        \r\n        {set remaining to missions_here - station_based}\r\n        {if remaining > 0:\r\n            {set otherMissions to:\r\n                {if remaining > 1: {if len(missionSummaries) > 0: otras} {remaining} misiones |else: {if len(missionSummaries) > 0: otra |else: {remaining}} misión} {if len(missionSummaries) > 0: sin estación de destino}\r\n            }\r\n            {set missionSummaries to cat(missionSummaries, [otherMissions])}\r\n        }  \r\n\r\n        {if len(missionSummaries) > 0:\r\n            {Pause(500)}\r\n            {set report to cat(OneOf(\"Aquí\", \"En este sistema\"), \" tienes \", List(missionSummaries))}\r\n            {leeTexto(report)}.\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Mission completed": {
      "name": "Mission completed",
      "description": "Se activa cuando completas una misión",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission completed }\r\n{_ Triggered when you complete a mission }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n{set ranktype to token(mission.name,\"_\",2)}\r\n\r\n{if cmdr.gender = \"Female\":\r\n    {set o to \"a\"}\r\n|else:\r\n    {set o to \"o\"}\r\n}\r\n\r\n{set m to \"a\"}\r\n{set la to \"la\"}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n\t{set m to \"o\"}\r\n\t{set la to \"el\"}\r\n\t{set type to \"transporte de \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|elif mission.type = \"Hackeo\":\r\n\t{set type to \"misión de jaqueo\"}\r\n|elif mission.type = \"Hack Megaship\":\r\n\t{set type to \"misión de jaqueo de mega-nave\"}\r\n|elif mission.type = \"On Foot\":\r\n\t{set type to \"misión a pie\"}\r\n|elif mission.type = \"Recaudación\":\r\n\t{set type to cat(\"misión de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n|elif mission.type = \"Recaudación de escuadrón\":\r\n\t{set type to cat(\"misión de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n|elif mission.type:\r\n\t{set type to cat(\"misión de \", mission.type)}\r\n|else:\r\n\t{set type to \"misión\"}\r\n}\r\n\r\n{if mission.type = \"Donativo\":\r\n\t{if event.amount && event.commodity:\r\n\t\t{set donate to cat(event.amount, \" toneladas de \",event.commodity)}\r\n\t|else:\r\n\t\t{set donate to humaniza(event.donation)}\r\n\t\t{set donate to cat(donate, \" \", de, \" créditos\")}\r\n\t}\r\n\r\n\t{OneOf(\"Ha hecho un donativo {Occasionally(2, 'de {donate}')} a la {Occasionally(2, 'agradecida')} facción {P(mission.faction)}\",\r\n\t\t\"{P(mission.faction)} ha recibido su donación {Occasionally(2, 'de {donate}')}\",\r\n\t\t\"{P(mission.faction)} le da las gracias por su donación {Occasionally(2, 'de {donate}')}\"\r\n\t)}.\r\n\r\n|elif lcase(ranktype) = \"rankemp\" || lcase(ranktype) = \"rankfed\":\r\n\t{OneOf(\"Ha completado la misión de {type} satisfactoriamente\", \"La misión de {type} se ha completado satisfactoriamente\")}.\r\n\r\n|elif mission.communal:\r\n\tHa completado el objetivo de comunidad: {mission.name}.\r\n\t{set recompensa to humaniza(mission.reward)}\r\n\t{if find(recompensa,\"ón\",len(recompensa)-3)!=-1 || find(recompensa,\"nes\",len(recompensa)-4)!=-1 || find(recompensa,\"dio\",len(recompensa)-4)!=-1: {set de to \"de\"}}\r\n\tHa {OneOf('recibido','sido recompensad{o} con')} {recompensa} {de} créditos por su {OneOf(\"contribución\",\"participación\",\"esfuerzo\")}.\r\n\r\n|else:\r\n\t{if event.reward > 0:\r\n\t    \r\n\t\t{set recompensa to humaniza(event.reward)}\r\n\t\t{if find(recompensa,\"ón\",len(recompensa)-3)!=-1 || find(recompensa,\"nes\",len(recompensa)-4)!=-1 || find(recompensa,\"dio\",len(recompensa)-4)!=-1: {set de to \"de\"}}\r\n\t\t{OneOf(\"{type} completad{m}. Has {OneOf('recibido','sido recompensad{o} con')} {recompensa} {de} créditos\",\r\n\t\t\t\"Has {OneOf('recibido','sido recompensad{o} con')} {recompensa} {de} créditos por {OneOf('finalizar {la} {type}','completar {la} {type} satisfactoriamente', 'completar satisfactoriamente {la} {type}')}\"\r\n\t\t)}\r\n\t|else:\r\n\r\n\t\t{OneOf(\"{type} completad{m}\",\"Has completado satisfactoriamente {la} {type}\",\r\n\t\t\t\"{la} {type} ha sido completado satisfactoriamente\"\r\n\t\t)}\r\n\t}\r\n}\r\n\r\n{Occasionally(2, F(\"Mission faction state\"))}.\r\n\r\n{if event.rewardCommodity && event.rewardCommodity != \"\":\r\n    {Pause(100)}\r\n    {if event.rewardCommodityAmount = 0:\r\n        {if event.reward > 0:\r\n            {OneOf(\"Sin embargo\", \"Pero\")} \r\n        }\r\n        no puede aceptar la recompensa en cargamento, {Occasionally(2,\"dado que\")}\r\n        {if ship.cargocapacity = 0:\r\n            no queda espacio disponible en la nave.\r\n        |else:\r\n            la bahía de carga está {Occasionally(2,\"completamente \")}llena.\r\n        }\r\n    |else:         \r\n        {if event.reward > 0:\r\n            {OneOf(\"Además\", \"También\")} \r\n        }\r\n        \r\n        {OneOf(\"{event.rewardCommodityAmount} tonelada{if event.rewardCommodityAmount > 1:s} de {event.rewardCommodity} han sido cargadas a la nave\",\r\n               \"{event.rewardCommodityAmount} tonelada{if event.rewardCommodityAmount > 1:s} de {event.rewardCommodity} han sido añadidas a nuestro cargamento\",\r\n               \"hemos recibido {event.rewardCommodityAmount} tonelada{if event.rewardCommodityAmount > 1:s} de {event.rewardCommodity} como recompensa\",\r\n               \"han cargado a la nave {event.rewardCommodityAmount} tonelada{if event.rewardCommodityAmount > 1:s} de {event.rewardCommodity} como recompensa\",\r\n             )}.\r\n    }\r\n|elif event.rewardMaterial && event.rewardMaterial != \"\":\r\n    {if event.reward > 0:\r\n        {OneOf(\"Además\", \"También\")} \r\n    }\r\n {OneOf(\"ha recibido\", \"ha sido recompensado con\")}\r\n    {event.rewardMaterialAmount} unidad{if event.rewardMaterialAmount > 1:es} de {event.rewardMaterial}\r\n    .\r\n}\r\n\r\n{_ Update to next system in route if conditions met _}\r\n{Pause(1000)}\r\n{set next_system to RouteDetails(\"update\")}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Mission expired": {
      "name": "Mission expired",
      "description": "Triggered when a mission has expired",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'expired')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"de Transporte de \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n\r\n{if type = \"Hackeo\": {set type to \"de jaqueo\"}\r\n|elif type = \"Hack Megaship\": {set type to \"de jaqueo de mega-nave\"}\r\n|elif type = \"On Foot\": {set type to \"a pie\"}\r\n|elif type = \"Recaudación\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n|elif type = \"Recaudación de escuadrón\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n}\r\n{set type to cat(\"La misión \", type)}\r\n\r\n{type} {if mission.faction: para {mission.faction}} ha expirado.\r\n{if mission.commodity:\r\n    {for cargo in inventory:\r\n        {if cargo.name = mission.commodity && cargo.haulage > 0:\r\n            {for missionId, amount in cargo.missionCargo:\r\n                {if missionID = mission.missionid:\r\n                    {amount} tonelada{if amount != 1:s} de {cargo.name} será{if amount != 1:n} marcada{if amount != 1:s} como robada{if amount != 1:s} cuando se abandone la misión.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Mission faction state": {
      "name": "Mission faction state",
      "description": "Report the faction state",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{if (mission.factionstate) = \"Auge\":\r\n    {OneOf(\"durante\", \"en medio de\", \"en\")} {OneOf(\"una época próspera\",\" {Occasionally(2, 'un')} auge económico\")}\r\n|elif (mission.factionstate) = \"Quiebra\":\r\n    {OneOf(\"durante\", \"en medio de\", \"en\")} {OneOf(\"un descenso económico\", \"una recesión\", \"una inminente quiebra\")}\r\n|elif (mission.factionstate) = \"Desórdenes públicos\":\r\n    {OneOf(\"durante\", \"en medio de\", \"en\", \"en tiempos de\")} {OneOf(\"disturbios civiles\", \"un conflicto civil\")}\r\n|elif (mission.factionstate) = \"Guerra civil\":\r\n    {OneOf(\"durante\", \"en medio de\", \"en\", \"en tiempos de\")} {OneOf(\"una guerra civil\", \"un periodo de guerras civiles\")}\r\n|elif (mission.factionstate) = \"Elecciones\":\r\n\t{OneOf(\"en nombre de la\", \"en pro de la\")} democracia\r\n|elif (mission.factionstate) = \"Hambruna\":\r\n    {OneOf(\"durante\", \"en medio de\", \"en\")} {OneOf(\"una hambruna\",\"problemas de abastecimiento de alimentos\")} \r\n|elif (mission.factionstate) = \"Bloqueo\":\r\n\t{OneOf(\"durante\", \"en medio de\", \"en\")} un bloqueo\r\n|elif (mission.factionstate) = \"Epidemia\":\r\n    , para ayudar en {OneOf(\"una emergencia médica\",\"la cura de un brote epidémico\")}\r\n}\r\n\r\n",
      "default": false,
      "includes": null
    },
    "Mission failed": {
      "name": "Mission failed",
      "description": "Se activa cuando fallas una misión (TEST)",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'fail')}\r\n\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n\t{set type to \"de transporte de \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|elif type = \"Hackeo\":\r\n\t{set type to \"de jaqueo\"}\r\n|elif type = \"Hack Megaship\":\r\n\t{set type to \"de jaqueo de mega-nave\"}\r\n|elif type = \"On Foot\":\r\n\t{set type to \"a pie\"}\r\n|elif type = \"Recaudación\":\r\n\t{set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n|elif type = \"Recaudación de escuadrón\":\r\n\t{set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n}\r\n\r\n{set type to cat(\"La misión \", type)}\r\n\r\n{OneOf(\"{type} {if mission.faction: para {mission.faction}} {OneOf('ha fracasado', 'ha fallado')}\", \r\n    \"No hemos podido completar {type} {if mission.faction: para {mission.faction}}\")}.\r\n\r\n\r\n",
      "default": false,
      "includes": null
    },
    "Mission redirected": {
      "name": "Mission redirected",
      "description": "Se activa cuando una misión es redirigida (TEST)",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission redirected }\r\n{_ Triggered when a mission is redirected }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'redirected')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{set a to \"a\"}\r\n{set la to \"la\"}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n\t{set a to \"o\"}\r\n\t{set la to \"el\"}\r\n\t{set type to \"transporte de \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|elif mission.type = \"Hackeo\":\r\n\t{set type to \"misión de jaqueo\"}\r\n|elif mission.type = \"Hack Megaship\":\r\n\t{set type to \"misión de jaqueo de mega-nave\"}\r\n|elif mission.type = \"On Foot\":\r\n\t{set type to \"misión a pie\"}\r\n|elif mission.type = \"Recaudación\":\r\n\t{set type to cat(\"misión de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n|elif mission.type = \"Recaudación de escuadrón\":\r\n\t{set type to cat(\"misión de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n|elif mission.type:\r\n\t{set type to cat(\"misión de \", mission.type)}\r\n|else:\r\n\t{set type to \"misión\"}\r\n}\r\n\r\n{if mission.status = \"Reclamar\" && mission.destinationsystem = mission.originsystem:\r\n    {set frase to cat(OneOf('cobrar', 'reclamar'), OneOf(' el pago', ' la recompensa', 'la'))}\r\n    {OneOf(\r\n    \t\"Requerimientos para {la} {type} completados. Podemos {OneOf('volver', 'regresar')} a{Occasionally(2, 'l sistema')} {mission.originsystem} para {frase}.\",\r\n    \t\"{type} completad{a}. {OneOf('Regresa', 'vuelve')} a{Occasionally(2, 'l sistema')} {mission.originsystem} para {frase}.\",\r\n    )}\r\n|elif mission.destinations:\r\n    Cadena de {type} redirigida al sistema {P(event.newdestinationsystem)}.\r\n|else:\r\n    {type} redirigid{a} a  \r\n    {if event.newdestinationstation:\r\n       {event.newdestinationstation} en el sistema {P(event.newdestinationsystem)}.\r\n    |else:\r\n       el sistema {P(event.newdestinationsystem)}.\r\n    }\r\n}",
      "default": false,
      "includes": null
    },
    "Mission report": {
      "name": "Mission report",
      "description": "Report the current mission log",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Report the current mission log }\r\n\r\n\r\n{F(\"Mission check galaxy\")}\r\n\r\n\r\n",
      "default": true,
      "includes": null
    },
    "Mission Route Clear": {
      "name": "Mission Route Clear",
      "description": "Clear a set mission route. (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{SetState('missionsdata', \"\")}\r\n{SetState('missionsrouteuseeddi', \"\")}\r\n{SetState('missionsroutetype', \"\")}\r\n{SetState('missionsdestination', \"\")}\r\n{SetState('missionsroutedistance', \"\")}\r\n{SetState('missionsroute', \"\")}",
      "default": true,
      "includes": null
    },
    "Mission Route Fast": {
      "name": "Mission Route Fast",
      "description": "Plot a 'nearest neighbor' route for defined systems in the mission store (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Missions_RoutePlot }\r\n{_ Plot a 'nearest neighbor' route for defined systems in the mission store }\r\n\r\n\r\n{_ Setup 'destination array builder' function }\r\n{set systems_builder(system) to:\r\n    {if find(systems, system) = -1:\r\n        {set systems to cat(systems, [system])}\r\n    }\r\n}\r\n\r\n\r\n{if missionsCount > 0:\r\n\r\n    {set original_dest to GetState(\"missionsdestination\")}\r\n    {set origins to []}\r\n    {set returns to []}\r\n    {set failed to []}\r\n\r\n    {for mission in missions:\r\n        {set origins to cat(origins, [mission.originsystem])}\r\n        {if mission.originreturn = true:\r\n            {set returns to cat(return, [\"yes\"])}\r\n        |else:\r\n            {set returns to cat(return, [\"no\"])}\r\n        }\r\n        {set failed to cat(failed, [mission.status])}\r\n    }\r\n\r\n    {set systems to []}\r\n    {set system_count to 0}\r\n\r\n    {if GetState(\"missionsroute\"):\r\n        {set temp_route to split(GetState(\"missionsroute\"), \"_\")}\r\n        {set route_end to temp_route[len(temp_route) - 1]}\r\n    |else:\r\n        {set route_end to GetState(\"eddi_context_system_name\")}\r\n    }\r\n\r\n    {_ Add all mission systems that have a 'return to origin' to the destination list, unless it has failed }\r\n    {set pos to find(returns, \"yes\")}\r\n    {while pos > -1:\r\n        {if failed[pos] != \"failed\":\r\n            {systems_builder(origins[pos])}\r\n        }\r\n        {set pos to find(returns, \"yes\", pos + 1)}\r\n    }\r\n\r\n    {_ Add all destination systems to the destination list, unless they have failed }\r\n    {set cur to 0}\r\n    {while cur < missionsCount:\r\n        {set destination to missions[cur].destinationsystem}\r\n\r\n        {if destination != \"\" && failed[cur] != \"failed\":\r\n            {if find(destination, \"_\") > -1:\r\n                {set dest_array to split(destination, \"::\")}\r\n                {for destination in dest_array: {systems_builder(destination)}}\r\n            |else:\r\n                {systems_builder(destination)}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {_ Now create the route _}\r\n    {set route to []}\r\n\r\n    {_ Remove end dest from array _}\r\n    {set systems to split(join(except(systems, [find(systems, route_end):\"\"]), \"_\"), \"_\")}\r\n    {_ Remove the current system, if it's found _}\r\n    {set systems to split(join(except(systems, [find(systems, GetState(\"eddi_context_system_name\")):\"\"]), \"_\"), \"_\")}\r\n\r\n    {set system_count to len(systems)}\r\n\r\n    {set curr to SystemDetails(GetState(\"eddi_context_system_name\"))}\r\n    {set end to SystemDetails(route_end)}\r\n    {set total_distance to 0}\r\n    {set cur to 0}\r\n\r\n    {if systems[0] && systems[0] != \"\":\r\n        {while cur < system_count:\r\n            {set near to 10000}\r\n            {for sys in systems:\r\n                {set dest to SystemDetails(sys)}\r\n                {set dist to round(Distance(curr.x, curr.y, curr.z, dest.x, dest.y, dest.z), 2)}\r\n\r\n                {if dist < near:\r\n                    {set nearest to dest.name}\r\n                    {set near to dist}\r\n                }\r\n            }\r\n            {set total_distance to total_distance + near}\r\n            {set route to cat(route, [nearest])}\r\n            {set systems to split(join(except(systems, [find(systems, nearest):\"\"]), \"_\"), \"_\")}\r\n            {set curr to SystemDetails(nearest)}\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n\r\n    {_ Calculate total route length _}\r\n    {set dest to SystemDetails(route_end)}\r\n    {set dist to round(Distance(curr.x, curr.y, curr.z, dest.x, dest.y, dest.z), 2)}\r\n    {set total_distance to total_distance + dist}\r\n\r\n    {_ Join it all together _}\r\n    {set route to cat(route, [route_end])}\r\n\r\n    {SetState('missionsroutetype', \"route\")}\r\n    {SetState('missionsdestination', route[0])}\r\n    {SetState('missionsroutedistance', total_distance)}\r\n    {SetState('missionsroute', join(route, \"_\"))}\r\n    {set system_count to len(route)}\r\n\r\n    {if total_distance = 0:\r\n        Route calculated for one system.\r\n        {OneOf(\"You are {OneOf('already', 'currently')} in your destination system\",\r\n               \"Your mission{if missionsCount > 1:s are all |else: is} located in\r\n                {OneOf('this', 'the current')} system\")}.\r\n    |else:\r\n        Missions route\r\n        {if original_dest != null && original_dest != \"\": re}calculated\r\n        for {system_count} system{if system_count != 1:s}.\r\n        {Pause(400)}\r\n        {if total_distance > 0:\r\n            Total distance is {round(total_distance, 1)} lightyears.\r\n            {Pause(400)}\r\n            {if original_dest != null && original_dest != \"\" && original_dest != route[0]:\r\n                First destination is {route[0]}.\r\n            }\r\n        |elif missionsCount > 0 && total_distance = 0:\r\n            {OneOf(\"You are {OneOf('already', 'currently')} in your destination system\",\r\n                   \"Your mission{if missionsCount > 1:s are all |else: is} located in\r\n                    {OneOf('this', 'the current')} system\")}.\r\n        |else:\r\n            Unable to calculate missions route.\r\n        }\r\n\r\n        {if original_dest != null && original_dest != \"\" && original_dest != route[0]:\r\n            Initial destination has been updated.\r\n        }\r\n        {if total_distance > 0:  Awaiting orders.}\r\n    }\r\n\r\n    {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n\r\n|else:\r\n    {if autoroute != \"yes\":\r\n        You have no missions to plot a route with.\r\n    }\r\n}\r\n    ",
      "default": false,
      "includes": null
    },
    "Mission Route Get Distance": {
      "name": "Mission Route Get Distance",
      "description": "Find distance to destination (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Mission Route Get Distance}\r\n{_ Find distance to destination}\r\n\r\n{set dist to -1}\r\n{if GetState(\"from_system\") && GetState(\"to_system\"):\r\n    {if GetState(\"from_system\") = \"\":\r\n        Origin system not designated.\r\n    |elif GetState(\"to_system\") = \"\":\r\n        Destination system not designated.\r\n    |else:\r\n        {set fs to SystemDetails(GetState(\"from_system\"))}\r\n        {set ts to SystemDetails(GetState(\"to_system\"))}\r\n\r\n        {if !fs.name:\r\n            Your origin is not in the Pilot's Federation star charts.\r\n        |elif !ts.name:\r\n            Your destination is not in the Pilot's Federation star charts.\r\n        |else:\r\n            {set dist to round(Distance(fs.x, fs.y, fs.z, ts.x, ts.y, ts.z), 2)}\r\n            {if GetState(\"getdistance\") = 'true':\r\n                Distance {Occasionally(2, \"from {fs.name}\")} to\r\n                {Occasionally(2, \"{OneOf('target','destination')} system\")}\r\n                {ts.name} is {dist} light years.\r\n                {SetState('getdistance', false)}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{SetState('distance', dist)}\r\n",
      "default": false,
      "includes": null
    },
    "Mission Route Report": {
      "name": "Mission Route Report",
      "description": "Report the current route information (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Mission Route Report _}\r\n{_ Report the current route information _}\r\n\r\n{if system.name != GetState(\"missionsdestination\") && len(GetState(\"missionsroute\")) > 0 && GetState(\"missionsroute\") != \"Not set\":\r\n\r\n    {set route to split(GetState(\"missionsroute\"), \"_\")}\r\n\r\n    Route Report: Destination system{if len(route) > 1:s}:\r\n\r\n    {set cur to 0}\r\n    {set length to len(route) - 1}\r\n    {while cur < len(route):\r\n        {route[cur]}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n\r\n    {if len(route) > 1:\r\n        Total Distance: {round(GetState(\"missionsroutedistance\"), 2)} light years.\r\n        Initial Destination: {GetState(\"missionsdestination\")}.\r\n    |else:\r\n        Distance: {round(GetState(\"missionsroutedistance\"), 2)} light years.\r\n    }\r\n\r\n|elif system.name = GetState(\"missionsdestination\"):\r\n    Route Report: You are in your destination system, {GetState(\"missionsdestination\")}.\r\n\r\n|else:\r\n    {OneOf(\"You {OneOf('have no', 'dont have any')} mission route at {OneOf('this time', 'the moment')} to report\",\r\n           \"{OneOf('There is', 'You have')} no route to report at {OneOf('this time', 'the moment')}\")}.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Mission Route Update": {
      "name": "Mission Route Update",
      "description": "Updates the route if no more missions in the current system (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Mission Route Update _}\r\n{_ Updates the route if no more missions in the current system _}\r\n\r\n{set active_count to 0}\r\n{set complete_count to 0}\r\n\r\n{for mission in missions:\r\n    {if mission.destinationsystems:\r\n        {for destination in mission.destinationsystems:\r\n            {if destination.name = system.name:\r\n                {if mission.status = \"Active\":\r\n                    {set active_count to active_count + 1}\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete_count to complete_count + 1}\r\n                }\r\n            }\r\n        }\r\n    |elif mission.destinationsystem = system.name:\r\n        {if mission.status = \"Active\":\r\n            {set active_count to active_count + 1}\r\n        |elif mission.status = \"Complete\":\r\n            {set complete_count to complete_count + 1}\r\n        }\r\n    }\r\n}\r\n\r\n{if type = \"Completed\" || type = \"Abandoned\" || type = \"Failed\":\r\n    {if status = \"Active\":\r\n        {set active_count to active_count - 1}\r\n    |elif status = \"Complete\":\r\n        {set complete_count to complete_count - 1}\r\n    }\r\n}\r\n\r\n{set total_count to active_count + complete_count}\r\n{set route to split(GetState(\"missionsroute\"), \"_\")}\r\n\r\n{_ Set mission types that don't have a destination _}\r\n{_ Possible mission types are _}\r\n{_ Altruism, Assassinate, Collect, Courier, Delivery, Disable, Massacre, _}\r\n{_ Mining, Passenger, Permit, Piracy, Rescue, Salvage, Scan, Smuggle _}\r\n{set type_list to \"Altruism Collect Mining Permit Piracy\"}\r\n\r\n{if total_count > 0 && type != \"Accepted\":\r\n    {if active_count > 0:\r\n        You still have {active_count} active\r\n    }\r\n    {if complete_count > 0:\r\n        {if active_count > 0:, and |else: You still have}\r\n        {complete_count} completed\r\n    }\r\n    mission{if total_count > 1:s} in this system.\r\n\r\n|else:\r\n\r\n    {if GetState(\"missionsrouteuseeddi\") = \"yes\":\r\n\r\n        {if route[0] = system.name && len(route) > 0 && type != \"Accepted\":\r\n            {set route to RouteDetails(\"update\")}\r\n        |else:\r\n            {set route to RouteDetails(\"route\")}\r\n        }\r\n\r\n    |elif GetState(\"missionsrouteuseeddi\") = \"no\":\r\n\r\n        {if route[0] = system.name && len(route) > 0 && type != \"Accepted\":\r\n\r\n            {SetState('missionsroute', join(except(route, [0:\"\"]), \"_\"))}\r\n            {set route to split(GetState(\"missionsroute\"), \"_\")}\r\n            {SetState('missionsdestination', route[0])}\r\n            {SetState('missionsroutetype', \"update\")}\r\n\r\n            {if route[0] != \"\" && route[0] != null:\r\n                {set dist to round(Distance(system.name, route[0]), 2)}\r\n                {SetState('missionsroutedistance', GetState(\"missionsroutedistance\") - dist)}\r\n\r\n                {if route[1] != \"\" && route[1] != null: Next mission |else: Final route }\r\n                destination is {route[0]}, {round(dist, 1)} lightyears away.\r\n\r\n            |elif route[0] = \"\" || route[0] = null:\r\n                {SetState('missionsroutedistance', null)}\r\n                You have {OneOf(\"completed\", \"reached the end of\")} your route.\r\n            |else:\r\n                Unable to update to next mission destination.\r\n            }\r\n\r\n        |elif missionsCount > 0:\r\n            {F(\"Mission Route Fast\")}\r\n        }\r\n    }\r\n}\r\n\r\n{set dest to GetState(\"missionsdestination\")}\r\n\r\n{if dest != system.name && dest != \"\" && dest != null:\r\n    {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    {if GetState(\"eddi_context_mission_route_useauto\") = \"no\":\r\n        Please re-plot Galactic Map route.\r\n    |elif GetState(\"eddi_context_supercruise\") = \"no\" && GetState(\"eddi_context_docked\") = \"no\":\r\n        Enter super-cruise to {OneOf(\"activate\", \"engage\")} auto-route plotting system.\r\n    |elif GetState(\"eddi_context_docked\") = \"yes\" && GetState(\"eddi_context_mission_accepted\") = \"no\":\r\n        Launch to {OneOf(\"activate\", \"engage\")} auto route plotting system.\r\n        {SetState('eddi_context_mission_accepted', \"yes\")}\r\n    }\r\n}\r\n\r\n{_ Build string to save in Voice Attack _}\r\n{set missionsdata to cat(GetState(\"missionsrouteuseeddi\"), \"+=\", GetState(\"missionsroutetype\"), \"+=\", GetState(\"missionsdestination\"), \"+=\", GetState(\"missionsroutedistance\"), \"+=\", GetState(\"missionsroute\"))}\r\n{SetState('missionsdata', missionsdata)}\r\n",
      "default": false,
      "includes": null
    },
    "Mission warning": {
      "name": "Mission warning",
      "description": "Triggered when a mission is about to expire, based on a set threshold",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission warning }\r\n{_ Triggered when a mission is about to expire, based on a set threshold }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'warning')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"de transporte de \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{if type = \"Hackeo\": {set type to \"de jaqueo\"}\r\n|elif type = \"Hack Megaship\": {set type to \"de jaqueo de mega-nave\"}\r\n|elif type = \"On Foot\": {set type to \"a pie\"}\r\n|elif type = \"Recaudación\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n|elif type = \"Recaudación de escuadrón\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n}\r\n{set type to cat(\"La missión \", type)}\r\n\r\nAtención: {type} {if mission.faction: para {mission.faction}} expirará en {event.remaining} minutos.\r\n\r\n",
      "default": false,
      "includes": null
    },
    "Missions": {
      "name": "Missions",
      "description": "Triggered at startup, with basic information of the Mission Log",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Missions }\r\n{_ Triggered at session start from Missions event }",
      "default": true,
      "includes": null
    },
    "Missions route": {
      "name": "Missions route",
      "description": "Get the missions route for various mission details",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Missions route }\r\n{_ Get the missions route for various mission details }\r\n\r\n\r\n{if event.routetype = \"expiring\":\r\n     {if event.distance > 0:\r\n         {set mission to MissionDetails(event.missionids[0])}\r\n\r\n         {if find(mission.typeEDName, \"Passenger\") > -1:\r\n             {set type to \"Transport \"}\r\n             {set type to cat(type, mission.passengertype)}\r\n         |else:\r\n             {set type to mission.type}\r\n         }\r\n         {set type to cat(type, \" misión\")}\r\n\r\n         {type} {if mission.faction: for {mission.faction}}\r\n         {if mission.destinationsystem: in the\r\n             {if mission.destinationsystem = system.name:\r\n                 actual\r\n             |else:\r\n                 {mission.destinationsystem}\r\n             } sistema\r\n         } está apunto de expirar.\r\n     |else:\r\n         No hay misiones activas.\r\n     }\r\n|elif event.routetype = \"farthest\":\r\n     {if event.distance > 0:\r\n         El {if missionsCount = 1: único objetivo de la misión |else: objetivo de la misión más lejano} está en\r\n          el\r\n         {if event.system = system.name:\r\n             sistema actual\r\n         |else:\r\n             sistema {event.system}, a {round(event.distance, 1)} años luz de {OneOf(\"distancia\",\"aquí\")}\r\n         }.\r\n     |else:\r\n         Misión no encontrada con un sistema de destino designado.\r\n     }\r\n|elif event.routetype = \"most\":\r\n     {if missionsCount = 1:\r\n         El único objetivo de misión que tenemos está {Occasionally(2,\"localizado\")} en\r\n         {if missions[0].destinationsystem = \"\":\r\n             un sistema {Occasionally(2,\"estelar\")} desconocido\r\n         |elif missions[0].destinationsystem = system.name:\r\n             el sistema {Occasionally(2,\"estelar\")} actual\r\n         |else:\r\n             el sistema {Occasionally(2,\"estelar\")} {missions[0].destinationsystem}\r\n         }\r\n         .\r\n     |else:\r\n         {set systems to split(event.systems, \"_\")}\r\n         {set system_most to event.system}\r\n         {set systems_count to len(systems)}\r\n\r\n         {if systems_count = 1:\r\n             {if system_most = system.name:\r\n                 {set system_most to \"el sistema actual\"}\r\n             |else:\r\n                 {set system_most to cat(\"El \", system_most, \" sistema\")}\r\n             }\r\n             {OneOf(\"La mayoría de las misiones están {Occasionally(2,'localizadas')} en {system_most}\",\r\n                 \"{system_most} tiene {OneOf('más','la mayoría de las')} misiones\",\r\n                 \"{system_most} tiene la mayoría de las misiones para completar\")}.\r\n         |elif systems_count > 1:\r\n             Tenemos {event.count} objetivo{if event.count > 1:s} en cada uno, en los sistemas {List(systems)}.\r\n         }\r\n     }\r\n|elif event.routetype = \"nearest\":\r\n     {if event.distance > 0:\r\n         El {if missionsCount = 1: único objetivo|else: objetivo más cercano}\r\n         está en el sistema\r\n         {if event.system = system.name:\r\n             actual\r\n         |else:\r\n             {event.system}, a {round(event.distance, 1)} años luz de {OneOf(\"distancia\",\"aquí\")}\r\n         }.\r\n     |else:\r\n         No se encuentra un sistema de destino designado.\r\n     }\r\n|elif event.routetype = \"route\":\r\n     {if event.routedistance > 0:\r\n         Calculada ruta de misiones para {event.count} sistemas.\r\n         La distancia total de la ruta es de {round(event.routedistance, 1)} años luz.\r\n         El primer destino es el sistema {event.system}, a {round(event.distance, 1)} años luz de {OneOf(\"distancia\",\"aquí\")}.\r\n     |else:\r\n         Imposible calcular una ruta de misiones.\r\n     }\r\n|elif event.routetype = \"source\":\r\n     {if event.count > 0:\r\n         {set systems to split(event.route, \"_\")}\r\n\r\n         {set pos to 0}\r\n         {while pos < event.count:\r\n\r\n             {set source_cargo to []}\r\n             {for missionid in event.missionids:\r\n                 {set haulage to HaulageDetails(missionid)}\r\n                 {if haulage.sourcesystem = systems[pos]:\r\n                     {set cargo to CargoDetails(missionid)}\r\n                     {if find(source_cargo, cargo.name) = -1:\r\n                         {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                     }\r\n                 }\r\n             }\r\n\r\n             {if pos = 0:\r\n                 El {if event.count = 1: único cargamento |else: cargamento más cercano}\r\n             |elif pos = 1:\r\n                 Además, el cargamento\r\n             |elif pos = event.count - 1:\r\n                 finalmente, el cargamento\r\n             |else:\r\n                 el cargamento\r\n             }\r\n\t\t\t {List(source_cargo)} está en\r\n             {if systems[pos] = system.name:\r\n                 el sistema actual\r\n             |else:\r\n                 el sistema {systems[pos]}, a\r\n                 {set distance to Distance(system.name, systems[pos])}\r\n                 {round(distance, 1)} años luz de {OneOf(\"distancia\",\"aquí\")}.\r\n             }.\r\n             {set pos to pos + 1}\r\n         }\r\n         {SetState('eddi_context_cargo_source', event.route)}\r\n     |else:\r\n         Cargamento con destino desconocido.\r\n     }\r\n|elif event.routetype = \"update\":\r\n     {if event.routedistance > 0:\r\n         Next mission destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n     |else:\r\n         No consigo actualizar el siguiente destino de la misión.\r\n     }\r\n}\r\n\r\n",
      "default": false,
      "includes": null
    },
    "Missions variable report": {
      "name": "Missions variable report",
      "description": "Check EDDI state variables for routing testing purposes. (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n Use Eddi -   {GetState(\"missionsrouteuseeddi\")}.\r\n Route type -   {GetState(\"missionsroutetype\")}.\r\n Destination -   {GetState(\"missionsdestination\")}.\r\n Current -   {system.name}.\r\n Locked -    {GetState(\"eddi_context_mission_destination_locked\")}.\r\n Route -    {GetState(\"missionsroute\")}.\r\n Distance: - {GetState(\"missionsroutedistance\")}",
      "default": false,
      "includes": null
    },
    "Modification crafted": {
      "name": "Modification crafted",
      "description": "Se activa cuando creas una modificación a un módulo",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Module arrived": {
      "name": "Module arrived",
      "description": "Se aplica cuando se completa una transferencia de módulo",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.station = station.name:\n\t{set estacion to \"a esta estación\"}\n|elif event.station:\n\t{set estacion to cat(\"a \", Occasionally(2, 'la estación'), \" \", event.station)}\n\t{if system.name = event.system:\n\t\t{set sistema to cat(Occasionally(3, ','), \" de este sistema\")}\n\t|elif event.system:\n      \t{set sistema to cat(Occasionally(2, ','), \" en \", Occasionally(2, 'el sistema'), \" \" event.system)}\n   }\n|else:\n\t{set estacion to cat(\"a \", OneOf('la estación', 'su'), \" destino\")}\n}\n\nAviso {Occasionally(3, \"{Pause(50)}{F('Honorific')}\")}. Su {event.module.name} {OneOf(\"ha llegado\", \"ha completado su transferencia\", \"acaba de llegar\")} {estacion}{sistema}.\n",
      "default": false,
      "includes": null
    },
    "Module info": {
      "name": "Module info",
      "description": "Triggered when a ModulesInfo.json file is generated/updated",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ This event updates `ship` module information: position, power, & priority _}",
      "default": true,
      "includes": null
    },
    "Module purchased": {
      "name": "Module purchased",
      "description": "Se activa cuando compras un módulo",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Comprobamos genero y número del módulo comprado _}\n{creaArticulos(event.buymodule.name)}\n\n{_ Añadimos variedad _}\n{set se to OneOf(\"se ha{n}{set o to 'o'}{set s to ''}\", \"\")}\n{set coma to OneOf(\",\", \"\")}\n\n{_ Construimos la parte del módulo comprado _}\n{set inmodule to cat(event.buymodule.name, \" \", OneOf('de clase', 'clase', ''), \" \", event.buymodule.class, \"-\", event.buymodule.grade)}\n\n{if event.buymodule.mount = \"fijo\": {set inmodule to cat(inmodule, coma,\" de montura fija\")}\n|elif event.buymodule.mount = \"guiado\": {set inmodule to cat(inmodule, coma, \" de montura guiada\")}\n|elif event.buymodule.mount = \"torreta\": {set inmodule to cat(inmodule, coma, \" de torreta\")}\n}\n\n{set inmodule to cat(se, \" \", OneOf('comprad', 'adquirid'), o, s, \" \", Occasionally(2, un), \" \", inmodule, Occasionally(2,','), \" por \", event.buyprice, \" créditos\")}\n\n{_ Añadimos diferencias en la pronunciación entre ambas partes _}\n{set coma to OneOf(\",\", \"\")}\n\n{_ Construimos la parte del módulo que se desmonta _}\n{if event.sellmodule:\n\t{set action to \"vendid\"}\n\t{creaArticulos(event.sellmodule.name)}\n\n\t{set outmodule to cat(event.sellmodule.name, \" \", OneOf('de clase', 'clase', ''), \" \", event.sellmodule.class, \"-\", event.sellmodule.grade)}\n\t\n\t{if event.sellmodule.mount = \"fijo\": {set outmodule to cat(outmodule, coma, \" de montura fija\")}\n\t|elif event.sellmodule.mount = \"guiado\": {set outmodule to cat(outmodule, coma, \" de montura guiada\")}\n\t|elif event.sellmodule.mount = \"torreta\": {set outmodule to cat(outmodule, coma, \" de torreta\")}\n\t}\n\t\n\t{if event.sellprice: {set outmodule to cat(outmodule, Occasionally(2, ','), \" por \", event.sellprice, \" créditos\")}}\n\t{set outmodule to cat(se, \" \", action, o, s, \" \", Occasionally(2, un), \" \", outmodule)}\n\n|elif event.storedmodule:\n\t{set action to OneOf(\"guardad\", \"almacenad\")}\n\t{creaArticulos(event.storedmodule.name)}\n\n\t{set outmodule to cat(event.storedmodule.name, \" \", OneOf('de clase', 'clase', ''), \" \", event.storedmodule.class, \"-\", event.storedmodule.grade)}\n\n\t{if event.storedmodule.mount = \"fijo\": {set outmodule to cat(outmodule, coma, \" de montura fija\")}\n\t|elif event.storedmodule.mount = \"guiado\": {set outmodule to cat(outmodule, coma, \" de montura guiada\")}\n\t|elif event.storedmodule.mount = \"torreta\": {set outmodule to cat(outmodule, coma, \" de torreta\")}\n\t}\n\t{set outmodule to cat(se, \" \", action, o, s, \" \", Occasionally(2, un), \" \", outmodule)}\n}\n\n{_ Construimos la frase completa _}\n{inmodule}{if outmodule: {Occasionally(2, ',')} y {outmodule}}.\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Module retrieved": {
      "name": "Module retrieved",
      "description": "Se activa cuando busca un módulo previamente almacenado",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Añadimos variedad _}\n{set se to Occasionally(2, \"se ha\")}\n{set coma to OneOf(\",\", \"{set almacen to Occasionally(2, 'del almacén')}\")}\n\n{_ Comprobamos genero y número del módulo comprado _}\n{creaArticulos(event.module.name)}\n\n{_ Construimos la parte del módulo comprado _}\n{set inmodule to cat(event.module.name, \" \", OneOf('de clase', 'clase', ''), \" \", event.module.class, \"-\", event.module.grade)}\n\n{if event.module.mount = \"fijo\": {set inmodule to cat(inmodule, coma,\" de montura fija\")}\n|elif event.module.mount = \"guiado\": {set inmodule to cat(inmodule, coma, \" de montura guiada\")}\n|elif event.module.mount = \"torreta\": {set inmodule to cat(inmodule, coma, \" de torreta\")}\n}\n\n{if se && s: {set s to \"\"}{set se to \"se han\")}}\n{set inmodule to cat(se, \" recuperad\", o, s, \" \", OneOf(\"{almacen}{set almacen to ''} {un}\", Occasionally(2, un)), \" \", inmodule, \" \", almacen)}\n{if se: {set se to \"se ha\"}}\n\n{set accion to OneOf(\"almacenad\", \"guardad\")}\n\n{if event.swapoutmodule.name:\n\t{creaArticulos(event.swapoutmodule.name)}\n\n\t{if se && s: {set s to \"\"}{set se to \"se han\")}}\n\t{set outmodule to cat(se, \" \", accion, o, s, \" \", Occasionally(2, un), \" \", event.swapoutmodule.name, \" \", OneOf('de clase', 'clase', ''), \" \", event.swapoutmodule.class, \"-\", event.swapoutmodule.grade)}\n\t\n\t{if event.swapoutmodule.mount = \"fijo\": {set outmodule to cat(outmodule, coma, \" de montura fija\")}\n\t|elif event.swapoutmodule.mount = \"guiado\": {set outmodule to cat(outmodule, coma, \" de montura guiada\")}\n\t|elif event.swapoutmodule.mount = \"torreta\": {set outmodule to cat(outmodule, coma, \" de torreta\")}\n\t}\n}\n\n{_ Construimos la frase completa _}\n{inmodule}{if outmodule: {if !coma:,|else: {Occasionally(2, ',')}} y {outmodule}}{if event.cost: {if !coma:,|else: {Occasionally(2, ',')}} {OneOf('por', 'con')} un coste de {event.cost} créditos}.\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Module sold": {
      "name": "Module sold",
      "description": "Se activa cuando vende un módulo instalado en la nave",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "Ha vendido su {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"void\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    } \n},\n\n por {event.price} créditos.",
      "default": true,
      "includes": null
    },
    "Module sold from storage": {
      "name": "Module sold from storage",
      "description": "Se activa cuando vende un módulo almacenado",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "Ha vendido su {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    } \n} \n\ndesde su almacén, por {event.price}{if event.price > 999999: de} créditos.",
      "default": true,
      "includes": null
    },
    "Module sold remote": {
      "name": "Module sold remote",
      "description": "Triggered when selling a module in storage at another station (TEST)",
      "enabled": true,
      "priority": null,
      "responder": true,
      "script": "{_Shirka}\r\n\r\nYou have sold a {event.module.class}-{event.module.grade}\r\n\r\n{if event.module.mount:\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} from your stores for {event.price} credits.\r\n",
      "default": true,
      "includes": null
    },
    "Module stored": {
      "name": "Module stored",
      "description": "Se activa cuando almacena un módulo",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "Almacenado {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"void\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo \n    |elif mount = 1:\n        guiado \n    |elif mount = 2:\n        torreta \n    } \n} \n \n\n\n{if type(event.cost) = \"void\": . |else: por un coste de {event.cost} créditos.}",
      "default": true,
      "includes": null
    },
    "Module swapped": {
      "name": "Module swapped",
      "description": "Se activa cuando se intercambian módulos entre ubicaciones de la nave",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Añadimos variedad _}\n{set se to OneOf(\"Se ha\", \"Ha\", \"\")}\n\n{set GetMountName(m) to:\n    {if m:\n    \t{set coma to Occasionally(2, \",\")}\n        {if m.invariantName = \"Fixed\":\n            {return OneOf(\"{coma} de montura fija\", \"fijo\")}\n        |elif m.invariantName = \"Gimballed\":\n            {return OneOf(\"{coma} de montura guiada\", \"guiado\")}\n        |elif m.invariantName = \"Turreted\":\n            {return \"de torreta\"}\n        }\n    }\n}\n\n{creaArticulos(event.frommodule.name)}\n{set report to cat(se, \" intercambiado la posición de su\", s, \" \", event.frommodule.name)}\n{if event.frommodule.grade = \"E\" && event.frommodule.price < 1: {set report to cat(report, \" prestado,\")}}\n{set report to cat(report, OneOf(' de clase', ' clase'))}\n{if icao_active:\n\t{set report to cat(report, \" \", event.frommodule.class, \" \", ICAO(event.frommodule.grade))}\n|else:\n\t{set report to cat(report, \" \", Spacialise(cat(event.frommodule.class, event.frommodule.grade)))}\n}\n{set report to cat(report, \" \", GetMountName(event.frommodule.Mount))}\n\n{if event.tomodule:\n\t{creaArticulos(event.tomodule.name)}\n\t{set report to cat(report, \", por la de \", un, \" \", event.tomodule.name)}\n    {if event.tomodule.grade = \"E\" && event.tomodule.price < 1: {set report to cat(report, \" prestado,\")}}    \n    {set report to cat(report, OneOf(' de clase', ' clase'))}\n    {if icao_active:\n        {set report to cat(report, \" \", event.tomodule.class, \" \", ICAO(event.tomodule.grade))}\n\t|else:\n\t\t{set report to cat(report, \" \", Spacialise(cat(event.tomodule.class, event.tomodule.grade)))}\n    }\n    {set report to cat(report, \" \", GetMountName(event.tomodule.Mount))}\n|else: \n    {set report to cat(report, \", por la de \", OneOf('un espacio vacío', 'una ranura vacía'))}.\n}\n{report}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Module transfer": {
      "name": "Module transfer",
      "description": "Se activa cuando se transfiere un módulo almacenado a otra estación espacial",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{OneOf(\"Transfiriendo\", \"Enviando\", \"Transportando\")} {event.module.name} de clase {event.module.class} {event.module.grade}\n\n{if event.module.mount:\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        de montura fija\n    |elif mount = 1:\n        de montura guiada\n    |elif mount = 2:\n        de torreta\n    }\n},\n\n\n{if event.transfercost: {OneOf(\"por\", \"con\")} un {OneOf(\"coste\", \"importe\")} de {humaniza(event.transfercost)} {de} créditos.}\n\n{if event.module.hot: {OneOf(\"Cuidado\", \"Atención\")}, el módulo está marcado como caliente.} \n\n{set t_remaining to event.transfertime}\n\n{if t_remaining:\n\n   {Pause(800)}\n   {OneOf(\"Llegada prevista {Occasionally(2, 'en')}\", \"Tiempo de llegada\", \"Tiempo del trayecto\")},\n\n   {if t_remaining > (60*60*24):\n      {set t_days to floor(t_remaining/(60*60*24))}\n      {t_days} día{if t_days > 1:s},\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\n   }\n\n   {if t_remaining > 3600:\n      {set t_hours to floor(t_remaining/3600)}\n      {t_hours} hora{if t_hours > 1:s},\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\n   }\n\n   {if t_remaining > 60:\n      {if t_days || t_hours: y }\n      {set t_minutes to round(t_remaining/(60),0)}\n      {t_minutes} minuto{if t_minutes > 1:s}.\n   }\n}\n\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Modules stored": {
      "name": "Modules stored",
      "description": "Se activa cuando se almacenan múltiples módulos",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Añadimos variedad _}\n{set se to Occasionally(2, \"se ha\")}\n{set coma to OneOf(\",\", \"{set almacen to Occasionally(2, 'del almacén')}\")}\n\n{set listaModulos to []}\n{for module in event.modules:\n\t{set outmodule to cat(module.name, \" \", OneOf('de clase', 'clase', ''), \" \", module.class, \"-\", module.grade)}\n\n\t{if module.mount = \"fijo\": {set outmodule to cat(outmodule, \" de montura fija\")}\n\t|elif module.mount = \"guiado\": {set outmodule to cat(outmodule, \" de montura guiada\")}\n\t|elif module.mount = \"torreta\": {set outmodule to cat(outmodule, \" de torreta\")}\n\t}\n\n\t{set listaModulos to cat(listaModulos, [outmodule])}\n}\n\nHa almacenado los siguientes módulos: {List(listaModulos)}",
      "default": false,
      "includes": null
    },
    "Music": {
      "name": "Music",
      "description": "Se activa cuando la música ambiental cambia",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Nav beacon scan": {
      "name": "Nav beacon scan",
      "description": "Se activa cuando se escanea una baliza de navegación, antes de que los datos de escaneo de todos los cuerpos celestes del sistema se escriban en el diario",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Context _}\n{SetState('eddi_context_last_subject', 'nav beacon')}\n{SetState('eddi_context_last_action', 'scan')}\n{SetState('eddi_context_star_system', system.name)}\n{SetState('eddi_context_nav_scans', event.numbodies)}\n\n{set nav to OneOf(\"navegación\")}\n{set beacon to OneOf(\"baliza de\")}\n{OneOf(\"Esta {beacon} {nav} ha enviado detalles de {event.numbodies} cuerpos {Occasionally(2, 'estelares')} en este sistema\",\n \"Detalles recibidos sobre {event.numbodies} cuerpos {Occasionally(2, 'estelares')} de este sistema.\")}\n\n{Pause(500)}",
      "default": false,
      "includes": null
    },
    "Nav route": {
      "name": "Nav route",
      "description": "Triggered when the navigation route is updated",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set to 0 to disable or set to 1 to enable optional parameters }\r\n{set reportDestination to 1}\r\n{set reportDistance to 1}\r\n{set reportJumps to 1}\r\n\r\n{_ Set optional details text from optional parameter values }\r\n{set details to []}\r\n{if reportJumps:\r\n   {set jumpDesc to: {event.jumps} {if event.jumps > 1: saltos {set n to \"n\"}|else: salto } }\r\n   {set details to cat(details, [jumpDesc])}\r\n}\r\n{if reportDistance:\r\n   {set distanceDesc to: {humaniza(round(event.distance, 1))} años luz}\r\n   {set details to cat(details, [distanceDesc])}\r\n}\r\n\r\n{_ Begin speaking }\r\n{if event.jumps > 0:\r\n    Ruta {OneOf(\"trazada\", \"calculada\", \"fijada\")}\r\n    {if reportDestination:\r\n\t\t{OneOf('hacia {Occasionally(2, \"el sistema\")}', 'a{Occasionally(2,\"l sistema\")}')} {P(corrigeTexto(event.route[event.jumps].systemname))}\r\n    }\r\n    {if len(details) > 0:\r\n    \t{OneOf(\r\n    \t\t'{OneOf(\",\", \"que está\")} a {List(details)}',\r\n    \t\t'. {Occasionally(2, \"Queda{n}\")} {List(details)} {OneOf(\"para llegar\", \"hasta el destino\", \"\")}'\r\n    \t)}\r\n    }.\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Near bookmark": {
      "name": "Near bookmark",
      "description": "Triggered when entering or departing the nearby radius of a bookmark",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.near:\r\n    Arrived at \r\n|else:\r\n    Left\r\n}\r\n{if event.poi:\r\n    {P(event.poi, 'station')}.\r\n|else:\r\n    bookmark.\r\n}",
      "default": true,
      "includes": null
    },
    "Near surface": {
      "name": "Near surface",
      "description": "Se activa cuando se entra o se sale de la órbita de la superficie de un planeta",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if !event.approaching_surface: {OneOf(\"Saliendo de vuelo orbital\", \"Vuelo orbital desactivado\")}}",
      "default": false,
      "includes": null
    },
    "Next destination": {
      "name": "Next destination",
      "description": "Triggered when selecting an in-system destination",
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Current destination is\", \"En route to\")}\r\n{if event.isBody:\r\n\t{set reportBody to BodyDetails(event.name)}\r\n    {reportBody.bodytype} {P(reportBody.shortname, 'body')}\r\n|elif event.isStation:\r\n    {if event.localizedName: \r\n        {event.localizedName} \r\n    |else: \r\n        {P(event.name, 'station')}\r\n    }\r\n|else:\r\n    {if event.localizedName: \r\n        the {event.localizedName} \r\n    |else: \r\n        a {event.name}\r\n    }\r\n}.",
      "default": true,
      "includes": null
    },
    "Next jump": {
      "name": "Next jump",
      "description": "Triggered when selecting a star system to jump to",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Triggered when selecting a star system to jump to }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_remaining_jumps', event.remainingjumpsinroute)}",
      "default": false,
      "includes": null
    },
    "NPC attack commenced": {
      "name": "NPC attack commenced",
      "description": "Se activa cuando se detecta un ataque de un NPC sobre su nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Atención: {OneOf(\"detectado ataque\",\"estamos siendo atacados\")} \n{if event.by:\n   por un {event.by} \n}.",
      "default": false,
      "includes": null
    },
    "NPC cargo scan commenced": {
      "name": "NPC cargo scan commenced",
      "description": "Se activa cuando se detecta un escaneo de la carga de su nave por un NPC",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\n{set carryingvaluablecargo to 0}\n{for cargo in ship.cargo:\n    {if cargo.commodity != 'Drón':\n        {set carryingvaluablecargo to 1}\n    }\n}\n\n{if carryingvaluablecargo = 1:\n\tPrecaución: {OneOf(\n    \t\"detectado escaneo de carga\",\n    \t\"estamos siendo escaneados\",\n    \t\"nuestra carga está siendo escaneada\"\n    )}\n  {if event.by:\n    por un {event.by} \n  } \n}",
      "default": false,
      "includes": null
    },
    "NPC interdiction commenced": {
      "name": "NPC interdiction commenced",
      "description": "Se activa cuando se detecta un intento de interdicción de su nave por un NPC",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{OneOf(\"Aviso\", \"Cuidado\", \"Atención\")}{Pause(300)}\n\n{if rand(2) = 0:\n\t{OneOf(\n\t   \"{Occasionally(2, 'detectado un')} intento de interdicción por\",\n\t   \"Estamos siendo interdictados por\",\n\t   \"Nos intenta sacar de supercrucero\"\n\t)}\n\t{if event.by: un {event.by}}.\n|else:\n\t{set n to \"n\"}\n\t{if event.by: Un {event.by}{set n to \"\"}}\n\t{OneOf(\n\t   \"está{n} intentando sacarnos de supercrucero\",\n\t   \"nos está{n} intentando interdictar\",\n\t   \"nos está{n} interdictando\"\n\t)}.\n}\n\n{Occasionally(3, \"{OneOf('Apague motores', 'Reduzca a cero la velocidad')} {OneOf('y sométase', 'para someterse')}, o {OneOf('siga el vector de eskape', 'prepárese')} para evadir la interdicción.\")}\n",
      "default": false,
      "includes": null
    },
    "Passengers": {
      "name": "Passengers",
      "description": "Triggered at session start from Passengers event",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ Passengers }\r\n{_ Triggered at session start from Passengers event }",
      "default": true,
      "includes": null
    },
    "Permit acquired": {
      "name": "Permit acquired",
      "description": "Triggered when you acquire a permit from the mission board",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.faction} has granted you a new permit.",
      "default": true,
      "includes": null
    },
    "Power commodity delivered": {
      "name": "Power commodity delivered",
      "description": "Se activa cuando un Comandante entrega una mercancía a una potencia",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{event.amount} units of {event.commodity} delivered {Occasionally(2, \"for {P(event.power)}\")}.",
      "default": true,
      "includes": null
    },
    "Power commodity obtained": {
      "name": "Power commodity obtained",
      "description": "Se activa cuando un Comandante obtiene una mercancía de una potencia",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "Obtenidas {event.amount} unidades de {event.commodity} {Occasionally(2, \"para {P(event.power)}\")}.",
      "default": true,
      "includes": null
    },
    "Power joined": {
      "name": "Power joined",
      "description": "Se activa cuando se une a una potencia",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Se ha alineado con {P(event.power)}",
      "default": true,
      "includes": null
    },
    "Power left": {
      "name": "Power left",
      "description": "Se activa cuando abandona una potencia",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ya no se encuentra alineado con {P(event.power)}",
      "default": true,
      "includes": null
    },
    "Power micro resources collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power micro resources collected",
      "description": "Triggered when collecting micro resources from a Powerplay contact"
    },
    "Power micro resources delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power micro resources delivered",
      "description": "Triggered when delivering micro resources to a Powerplay contact"
    },
    "Power salary claimed": {
      "name": "Power salary claimed",
      "description": "Se activa cuando un Comandante reclama su salario de una potencia",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{if event.amount > 1300000: {set esde to \"es de\"}}\r\n{if event.amount <= 1300000: {set esde to \" de\"}}\r\n{if event.amount < 1000000: {set esde to \"\"}}\r\n\r\n\r\nReclamado salario por importe de \r\n\r\n{if event.amount = 1000: mil créditos\r\n|else:\r\n{Humanise(event.amount)}{esde} créditos\r\n}\r\n\r\n{Occasionally(2, \"de {P(event.power)}\")}.",
      "default": true,
      "includes": null
    },
    "Power voucher received": {
      "name": "Power voucher received",
      "description": "Se activa cuando se entrega un bono de combate en contra de una potencia opositora",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Powerplay": {
      "name": "Powerplay",
      "description": "Triggered periodically when pledged to a power",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if ship.Role.edname != \"Exploration\":\r\n\tTe has comprometido con la causa de {P(event.power)}. \r\n\tHas servido durante \r\n\t{if event.timepledgedweeks > 1:\r\n\t    {Humanise(event.timepledgedweeks)} semanas \r\n\t|elif event.timepledgedweeks = 1:\r\n\t    una semana \r\n\t|elif event.timepledgeddays > 1:\r\n    \t{Humanise(event.timepledgeddays)} días\r\n\t|elif event.timepledgeddays = 1:\r\n\t    un día\r\n\t|else:\r\n\t    menos de un día\r\n\t}\r\n\ty estás en el rango {event.rank},  \r\n\t{if event.merits > 0:\r\n\t    con {Humanise(event.merits)}\r\n\t|else:\r\n\t    sin\r\n\t}\r\n\tméritos acumulados.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "RandomizeVoice": {
      "name": "RandomizeVoice",
      "description": "(TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n\r\n{_ Set a global variable SpeakerID in calling script, before calling this script. }\r\n\r\n{_ This script will return a Voice name }\r\n{_ For a given SpeakerID, it will always return the same voice }\r\n\r\n{_ get list of voices }\r\n{_ We exclude the voice you have chosen for the EDDI speech responder, to it won't be used for NPCs }\r\n{_ Set that name here: }\r\n{declare MY_SHIP_VOICE as \"Microsoft Zira Desktop\"}\r\n\r\n{declare VOICES as []}\r\n{for voice in VoiceDetails():\r\n  {if voice.name != MY_SHIP_VOICE:\r\n    {set VOICES to cat(VOICES,[voice])}\r\n  }\r\n}\r\n\r\n{if len(VOICES) > 1:\r\n\r\n  {declare THISVOICE as 0}\r\n\r\n  {_ Create a hash code from the SpeakerID (if any) }\r\n  {if SpeakerID:\r\n    {declare i as 0}\r\n    {while i < len(SpeakerID):\r\n      {declare ch as slice(SpeakerID,i,1)}    \r\n      {set THISVOICE to THISVOICE+ord(ch)} \r\n      {set i to i+1}\r\n    }\r\n    {set THISVOICE to mod(THISVOICE,len(VOICES))}\r\n  |else:\r\n    {_ if no SpeakerID, use a random voice }\r\n    {set THISVOICE to rand(0,len(VOICES))} \r\n  }\r\n\r\n  {echo VOICES[THISVOICE].name}\r\n}",
      "default": true,
      "includes": null
    },
    "Repair drone": {
      "name": "Repair drone",
      "description": "Se activa cuando su nave es reparada por medio de un controlador de drones",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\n\n{if event.hull:\n   {set systemsrepaired to cat(systemsrepaired, [\"el casco\"])} \n}\n{if event.cockpit:\n   {set systemsrepaired to cat(systemsrepaired, [\"la cabina\"])} \n}\n{if event.corrosion:\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"sistemas corroidos\", \"sistemas afectados por corrosión\")])} \n}\n\n{if len(systemsrepaired) > 0:\n\n    {set remote to Occasionally(2, \"remotas\")}\n    {set sequence to OneOf(\"el drón ha\", \"Se han\")} \n    {OneOf(\n        \"{sequence} completado las reparaciones {remote} de\", \n        \"secuencia remota completa. {sequence} hecho las reparaciones en\",\n        \"ciclo completado. {sequence} finalizado las reparaciones {remote} en\"\n    )}\n\n    {set cur to 0}\n    {while cur < len(systemsrepaired):\n        {if cur = 0:\n        |elif cur < len(systemsrepaired) - 1:\n            , \n        |else:\n            and\n        }\n        {systemsrepaired[cur]}\n        {set cur to cur + 1}\n    }\n}.\n",
      "default": true,
      "includes": null
    },
    "Repeat last speech": {
      "name": "Repeat last speech",
      "description": "Repite lo último que se ha dicho",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{GetState(\"eddi_context_last_speech\")}",
      "default": false,
      "includes": null
    },
    "Report last scan value": {
      "name": "Report last scan value",
      "description": "Informa sobre el valor estimado del último cuerpo celeste escaneado",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Context }\r\n{set scanValue to humaniza(GetState(\"eddi_context_last_scan_estimated_value\"))}\r\n{set maxValue to humaniza(GetState(\"eddi_context_last_scan_max_value\"))}\r\n\r\n{_ Fetch from context }\r\n{if event: {set reportbody to event} }\r\n\r\n{if !reportbody.bodytype: \r\n\t{if GetState(\"eddi_context_last_subject\") = \"star\":\r\n\t\t{set reportbody to BodyDetails(GetState(\"eddi_context_star_star\"), GetState(\"eddi_context_star_system\"))}\r\n\t|else:\r\n    \t{set reportbody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_body_system\"))}\r\n    }\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    No consigo entender a que cuerpo estelar te refieres.\r\n\r\n|elif reportbody.bodytype = \"Estrella\":\r\n\tLos datos de esta estrella tienen un valor de {Occasionalley(2, Pause(50))} {Occasionally(2, \"aproximádamente {Pause(50)}\")} {scanValue} {de} créditos.\r\n\r\n|else:\r\n\t{if reportbody.mapped:\r\n\t\t{OneOf(\"este cuerpo\", \"este planeta\", \"\")}\r\n\t\t{Occasionally(2,\"ya\")}\r\n\t\t{OneOf(\"lo hemos\", \"ha sido\")}\r\n   \t\t{OneOf(\"mapeado\", \"cartografiado\", \"analizado\")}\r\n   \t\t{OneOf('', ',', Pause(50))} y\r\n   \t\t{if rand(2) = 0:\r\n\t\t\t{OneOf(\"sus datos\", \"esos datos\")}\r\n        \t{set n to \"n\"}\r\n    \t|else:\r\n\t        {Occasionally(2, \"esa información\")}\r\n\t    }\r\n\t\t{OneOf(\"otorga{n}\", \"tiene{n} un valor de\", \"vale{n}\")}\r\n\t\t{Occasionally(2, Pause(50))}\r\n\t\t{scanValue} {de} créditos.\r\n\t|else:\r\n\t\t{OneOf('\r\n  \t\t\t{OneOf(\"El escaneo de superficie\", \"Analizar\", \"Cartografiar\", \"Mapear\", \"El escaneo de\", \"El análisis de\", \"El mapeo de \", \"La cartografía de\", \"Entregar los datos de\")} \r\n  \t\t\t{OneOf(\"este cuerpo\", \"este planeta\")} {Occasionally(2, Pause(50))}\r\n   \t\t\t{OneOf(\"puede darnos\", \"dará\", \"nos puede dar\", \"puede producir\", \"nos dará\", \"otorga\", \"hará que ganemos\", \"tiene\", \"otorga\", \"genera\")} \r\n   \t\t','\r\n\t   \t\t{OneOf(\"Mapeando\", \"Cartografiando\", \"Si mapeamos\", \"Si cartografiamos\", \"Si escaneamos la superficie de\", \"Al entregar los datos de\", \"Si entregamos los datos de\")}\r\n   \t\t\t{OneOf(\"este cuerpo\", \"este planeta\")} {Occasionally(2, Pause(50))}\r\n   \t\t\t{OneOf(\"recibiremos\", \"obtendremos\", \"conseguiremos\", \"tendremos\")} \r\n\t\t')}\r\n   \t\tun{OneOf(\" beneficio\", \"a ganancia\", \"a recompensa\", \"a paga\", \"a rentabilidad\")} {Occasionally(2, Pause(50))} de {P(maxValue)} {de} créditos.\r\n   \t}\r\n}\r\n\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Report last scan value 2": {
      "name": "Report last scan value 2",
      "description": "Copia del evento con el mismo nombre sin mínimo.",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Preferences }\r\n{set minScanValue to 1} {_ Set the minimum credit value that should be voiced _}\r\n\r\n{_ Context }\r\n{set scanValue to GetState(\"eddi_context_last_scan_estimated_value\")}\r\n\r\n{if scanValue > minScanValue:\r\n   {OneOf(\"Este escaneo puede\", \"Este paquete de datos puede\", \"Estos datos pueden\", \"Esto puede\")} \r\n   {OneOf(\"dar \", \"ser vendido por\", \"dar un beneficio de\", \"valer unos\") } \r\n   {Humanise(scanValue)} créditos.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Respawned": {
      "name": "Respawned",
      "description": "Triggered when you respawn (either after injury or after handing yourself in to local authorities)",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if GetState(\"eddi_context_srv_deployed_id\"):\r\n    {SetState('eddi_context_srv_deployed_id', \"\")}\r\n}",
      "default": false,
      "includes": null
    },
    "Ring hotspots detected": {
      "name": "Ring hotspots detected",
      "description": "Triggered when hotspots are detected in a ring",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{if ship.Role.invariantName = \"Mining\" || ship.Role.invariantName = \"Multipurpose\":\r\n    {set hotspots to []}\r\n    {for hotspot in event.hotspots: \r\n        {set hotspot_desc to: \r\n            {hotspot.amount} de {hotspot.commodity}\r\n        }\r\n        {set hotspots to cat(hotspots, [hotspot_desc])}\r\n    }\r\n\r\n    Puntos calientes detectados:\r\n    {List(hotspots)}\r\n}",
      "default": false,
      "includes": null
    },
    "Ring mapped": {
      "name": "Ring mapped",
      "description": "Triggered after mapping a ring with the Surface Area Analysis scanner",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Context}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_last_subject', 'ring')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_ring_name', event.ringname)}\r\n\r\n{_ Process the event _}\r\n\r\n{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\" || ship.Role.edname = \"Mining\":\r\n\r\n\t{set report to cat(OneOf(\"mapeado\", \"escaneado\", \"mapeo\", \"escaneo\"), ' de anillo ')}\r\n\r\n\t{if reportbody.reserves = \"Menor\":\r\n\t\t{set reserves to \"con reservas menores\"}\r\n\t|elif reportbody.reserves = \"Común\":\r\n\t\t{set reserves to \"con reservas comunes\"}\r\n\t|elif reportbody.reserves = \"Mayor\":\r\n\t\t{set reserves to \"con reservas mayores\"}\r\n\t|elif reportbody.reserves = \"Prístina\":\r\n\t\t{set reserves to cat(\"con reservas \", OneOf('prístinas', 'vírgenes'))}\r\n\t|elif reportbody.reserves = \"Agotada\":\r\n\t\t{set reserves to \"con reservas agotadas\"}\r\n\t}\r\n\r\n    {Pause(2800)}\r\n\t{report} {event.composition} {reserves} {OneOf(\"completado\", \"finalizado\")}.\r\n}",
      "default": false,
      "includes": null
    },
    "Route details": {
      "name": "Route details",
      "description": "Triggered when a route has been generated or updated",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_search_system', event.system)}\r\n{SetState('eddi_context_search_station', event.station)}\r\n{SetState('eddi_context_search_distance', event.distance)}\r\n{SetState('eddi_context_search_count', event.count)}\r\n\r\n{set clip_notify to false}\r\n{set type to event.routetype}\r\n{if type = \"encoded\" || type = \"facilitator\" || type = \"guardian\" || type = \"human\" || type = \"manufactured\" || type = \"raw\" || type = \"scorpion\":\r\n\r\n    {if type = \"facilitator\":\r\n        {set service to \"contacto de Interestélar fáctor\"}\r\n    |elif type = \"encoded\":\r\n        {set service to \"comerciante de datos codificados\"}\r\n    |elif type = \"manufactured\":\r\n        {set service to \"comerciante materiales manufacturados\"}\r\n    |elif type = \"raw\":\r\n        {set service to \"comerciante de materias primas\")}\r\n    |elif type = \"guardian\":\r\n        {set service to \"broker de tecnología guardián\"}\r\n    |elif type = \"human\":\r\n        {set service to \"broker de tecnología humana\")}\r\n    |elif type = \"scorpion\":\r\n        {set service to \"vendedor de V R S scorpion\"}\r\n    }\r\n\r\n    {if event.system && event.system != \"\":\r\n        El {service} más cercano se encuentra en {P(event.station, \"station\")}, en el\r\n        {if event.system = system.name:\r\n            {OneOf(\"actual sistema\", \"sistema actual\")}\r\n        |else:\r\n            {set clip_notify to true}\r\n            {SetClipboard(event.system)}\r\n            sistema {P(event.system, \"starsystem\")}, a {Occasionally(2, \"aproximadamente\")} {round(event.distance, 1)} años luz\r\n        }.\r\n    |else:\r\n        No se ha encontrado ningún {service} dentro del rango de los sensores.\r\n    }\r\n|elif type = \"expiring\":\r\n    {if event.system && event.system != \"\":\r\n        {set mission to MissionDetails(event.missionids[0])}\r\n\r\n        {if find(mission.invariantTags, \"Transport\") > -1:\r\n            {set type to \"de transporte de \"}\r\n            {set type to cat(type, mission.passengertype)}\r\n        |else:\r\n            {set type to mission.tags[0]}\r\n        }\r\n        {if type = \"Hackeo\": {set type to \"de jaqueo\"}\r\n        |elif type = \"Hack Megaship\": {set type to \"de jaqueo de mega-nave\"}\r\n        |elif type = \"On Foot\": {set type to \"a pie\"}\r\n        |elif type = \"Recaudación\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías\")}\r\n        |elif type = \"Recaudación de escuadrón\": {set type to cat(\"de \", OneOf('petición', 'adquisición') , \" de mercancías para escuadrón\")}\r\n        }\r\n        {set type to cat(\"misión \", type)}\r\n\r\n        La {type} {if mission.faction: para {P(mission.faction, \"faction\")}}\r\n        {if mission.destinationsystem: en el\r\n            {if mission.destinationsystem = system.name:\r\n                {OneOf(\"actual sistema\", \"sistema actual\")}\r\n            |else:\r\n                {set clip_notify to true}\r\n                {SetClipboard(mission.destinationsystem)}\r\n                sistema {P(mission.destinationsystem, \"starsystem\")}\r\n            }\r\n        } está a punto de expirar.\r\n    |else:\r\n        No se han encontrado misiones activas.\r\n    }\r\n|elif type = \"farthest\":\r\n    {if event.system && event.system != \"\":\r\n        El objetivo {if missionsCount = 1: de la única misión que tienes |else: de misión más lejano} se encuentra en el\r\n        {if event.system = system.name:\r\n            {OneOf(\"actual sistema\", \"sistema actual\")}\r\n        |else:\r\n            {set clip_notify to true}\r\n            {SetClipboard(event.system)}\r\n            sistema {P(event.system, \"starsystem\")}, a {Occasionally(2, \"aproximadamente\")} {round(event.distance, 1)} años luz\r\n        }.\r\n    |else:\r\n        No se han encontrado misiones con un sistema de destino designado.\r\n    }\r\n|elif type = \"most\":\r\n    {if missionsCount = 1:\r\n        El único objetivo de misión que tenemos está {Occasionally(2,\"localizado\")} en\r\n        {if missions[0].destinationsystem = \"\":\r\n            un sistema {Occasionally(2, \"estelar\")} desconocido\r\n        |elif missions[0].destinationsystem = system.name:\r\n            el {OneOf(\"actual sistema\", \"sistema actual\")}\r\n        |else:\r\n            el sistema {Occasionally(2, \"estelar\")} {P(missions[0].destinationsystem, \"starsystem\")}\r\n        }.\r\n    |elif event.system && event.system != \"\":\r\n        {set systems to split(event.route, \"_\")}\r\n        {set systems_count to len(systems)}\r\n\r\n        {if systems_count = 1:\r\n            {if event.system = system.name:\r\n                {set system_most to 'el {OneOf(\"actual sistema\", \"sistema actual\")}'}\r\n            |else:\r\n                {set clip_notify to true}\r\n                {SetClipboard(event.system)}\r\n                {set system_most to cat(\"el sistema \", Occasionally(2, \"estelar \"), P(event.system, 'starsystem'))}\r\n            }\r\n            {OneOf(\"La mayoría de las misiones están {Occasionally(2,'localizadas')} en {system_most}\",\r\n                \"{system_most} tiene {OneOf('más','la mayoría de las')} misiones\",\r\n                \"{system_most} tiene la mayoría de las misiones para completar\")\r\n            }.\r\n        |elif systems_count > 2:\r\n            Tenemos {event.count} objetivo{if event.count > 1:s} de misión en los sistemas\r\n            {_ Don't include the home system from the route list _}\r\n            {set cur to 0}\r\n            {set systems_count to systems_count - 1}\r\n            {while cur < len(systems_count):\r\n                {P(systems[cur], \"starsystem\")}\r\n                {set cur to cur + 1}\r\n                {if cur = systems_count-1: y |elif cur < systems_count: ,}\r\n            }.\r\n        }\r\n    |else:\r\n        No se han encontrado misiones con un sistema de destino designado.\r\n    }\r\n|elif type = \"nearest\":\r\n    {if event.system && event.system != \"\":\r\n        El objetivo {if missionsCount = 1: de la única misión que tienes |else: de misión más cercano} se encuentra en el\r\n        {if event.system = system.name:\r\n            {OneOf(\"actual sistema\", \"sistema actual\")}\r\n        |else:\r\n            {set clip_notify to true}\r\n            {SetClipboard(event.system)}\r\n            sistema {P(event.system, \"starsystem\")}, a {Occasionally(2, \"aproximadamente\")} {round(event.distance, 1)} años luz\r\n        }.\r\n    |else:\r\n        No se han encontrado misiones con un sistema de destino designado.\r\n    }\r\n|elif type = \"route\":\r\n    {if event.system && event.system != \"\":\r\n        Ruta de misiones calculada para {event.count - 1} sistema{if event.count - 1 > 1: s}.\r\n        La distancia total de la ruta es de {Occasionally(2, \"aproximadamente\")} {round(event.routedistance, 1)} años luz.\r\n        {if event.system != system.systemname:\r\n            El primer destino es el sistema {P(event.system, \"starsystem\")}, a {round(event.distance, 1)} años luz de {OneOf(\"distancia\",\"aquí\", \"\")}.\r\n            {set clip_notify to true}\r\n            {SetClipboard(event.system)}\r\n        |else:\r\n            {F(\"Mission check system\")}\r\n        }\r\n    |else:\r\n        Imposible calcular una ruta de misiones.\r\n    }\r\n|elif type = \"source\":\r\n    {if event.count > 0:\r\n        {set systems to split(event.route, \"_\")}\r\n\r\n        {set pos to 0}\r\n        {while pos < event.count:\r\n\r\n            {set source_cargo to []}\r\n            {for missionid in event.missionids:\r\n                {set mission to MissionDetails(missionid)}\r\n                {if mission.sourcesystem = systems[pos]:\r\n                    {set cargo to CargoDetails(missionid)}\r\n                    {if find(source_cargo, cargo.name) = -1:\r\n                        {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if pos = 0:\r\n                El {if event.count = 1: único punto de recogida |else: punto de recogida más cercano}\r\n            |elif pos = 1:\r\n                además, el punto de recogida\r\n            |elif pos = event.count - 1:\r\n                por último, el punto de recogida\r\n            |else:\r\n                el punto de recogida\r\n            }\r\n            de\r\n            {set cur to 0}\r\n            {while cur < len(source_cargo):\r\n                {source_cargo[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = len(source_cargo) - 1: y |elif cur < len(source_cargo): ,}\r\n            }\r\n            está en el\r\n            {if systems[pos] = system.name:\r\n                {OneOf(\"actual sistema\", \"sistema actual\")}\r\n            |else:\r\n                {set clip_notify to true}\r\n                {SetClipboard(systems[pos])}\r\n                sistema {Occasionally(2, \"estelar \")} {P(systems[pos], \"starsystem\")},\r\n                {set distance to Distance(system.name, systems[pos])}\r\n                a {round(distance, 1)} años luz\r\n            }.\r\n            {set pos to pos + 1}\r\n       }\r\n         {SetState('eddi_context_cargo_source', event.route)}\r\n    |else:\r\n        Origen de cargamento no asignado a ningún sistema concreto.\r\n    }\r\n|elif type = \"update\":\r\n    {if event.system && event.system != \"\":\r\n        {if event.system != system.systemname && event.system != nextsystem.systemname:\r\n            {_ Set Next system (unless we are already en route) }\r\n            El próximo {OneOf(\"punto de ruta\", \"sistema\", \"sistema estelar\", \"destino\")} es {P(event.system, \"starsystem\")}, a {Occasionally(2, \"aproximadamente\")} {round(event.distance, 1)} años luz.\r\n            {set clip_notify to true}\r\n            {SetClipboard(event.system)}\r\n        |else:\r\n            {_ Next station }\r\n            {F(\"Mission check system\")}\r\n        }\r\n    }\r\n|elif type = \"scoop\":\r\n    {if event.system && event.system != \"\":\r\n        {set title to Occasionally(3,\"{F('Honorific')}\")}\r\n        {if event.system = system.name:\r\n            {set scoopable_bodies to []}\r\n            {for body in system.bodies:\r\n                {if body.scoopable:\r\n                    {set scoopable_bodies to cat(scoopable_bodies, [P(body.shortname, \"body\")])}\r\n                }\r\n            }\r\n            {if len(scoopable_bodies) > 1:\r\n                {set s to \"s\"}\r\n                {set report to cat(\"son las: \", List(scoopable_bodies))}\r\n            |else:\r\n                {set s to \"\"}\r\n                {set report to cat(\"es la \", Occasionally(2, 'estrella'), \" \", scoopable_bodies[0])}\r\n            }\r\n            {set report to cat(report, Pause(50), \" del sistema actual.\")}\r\n        |else:\r\n            {set report to cat(\"está en el sistema \", P(event.system, \"starsystem\"), \" que está a \", Occasionally(2, \"aproximadamente\"), \" \", round(event.distance, 1), \" años luz de aquí \")}\r\n            {set clip_notify to true}\r\n            {SetClipboard(event.system)}\r\n        }\r\n        La{s} estrella{s} recolectable{s} más cercana{s} {report}.\r\n        {Pause(500)}\r\n        {if maxjump < 0.5:\r\n            {OneOf(\"Es imperativo el reabastecimiento {Occasionally(2, 'de combustible')}\", \"Reabastezca el combustible urgentemente\", \"El reabastecimiento {Occasionally(2, 'de combustible')} es extremadamente urgente\")}, {title}.\r\n        |else:\r\n            {OneOf(\"Por favor, haga un repostaje {Occasionally(2, 'de combustible')} cuanto antes\", \"Se recomienda encarecidamente que recargue combustible\", \"El reabastecimiento {Occasionally(2, 'de combustible')} es altamente recomendable\")}, {title}.\r\n        }\r\n    |else:\r\n        {OneOf(\"Peligro\", \"Alerta\", \"Atención\")}. No hay estrellas recolectables en el rango del próximo salto.\r\n        {Pause(250)}\r\n        Se recomienda el apagado de sistemas no esenciales.\r\n        {Pause(250)}\r\n        Transpondedor de emergencia a la espera, {title}.\r\n    }\r\n|elif type = \"neutron\":\r\n    {if event.system && event.system != \"\" && event.system != system.systemname:\r\n        Ruta por autopista de neutrones calculada.\r\n        {if ship && ship.phoneticname:\r\n            {ship.phoneticname}\r\n        |else:\r\n            Su {ship.phoneticmodel}\r\n        }\r\n        llegará a \r\n        {event.route[event.count - 1]}\r\n        en\r\n        {event.count - 1} {if event.count - 1 = 1: salto. |else: saltos.}\r\n        {if event.count - 1 > 1: \r\n            La distancia total de la ruta es de {Occasionally(2, \"aproximadamente\")} {round(event.routedistance, 1)} años luz.\r\n            El primer destino es {P(event.system, \"starsystem\")}, a {round(event.distance)} años luz.\r\n        }\r\n        {set clip_notify to true}\r\n        {SetClipboard(event.system)}\r\n    |else:\r\n        Imposible calcular ruta por autopista de neutrones.\r\n    }\r\n|elif type = \"carrier\":\r\n    {if event.system && event.system != \"\" && event.system != system.systemname:\r\n        Ruta calculada.\r\n        Route calculated. \r\n        {if carrier && carrier.name:\r\n            {carrier.name}\r\n        |else:\r\n            Su {OneOf(\"portanaves\", \"carrier\", \"portaflotas\")}\r\n        }\r\n        llegará a \r\n        {event.route[event.count - 1]}\r\n        en\r\n        {event.count - 1} {if event.count - 1 = 1: salto. |else: saltos.}\r\n        {if event.count - 1 > 1: \r\n            Se necesitan {event.tritiumused} toneladas de tritio para completar el trayecto.\r\n            El primer destino es {P(event.system, \"starsystem\")}, a {round(event.distance)} años luz.\r\n        }\r\n        {set clip_notify to true}\r\n        {SetClipboard(event.system)}\r\n    |else:\r\n        Imposible calcular la ruta de {OneOf(\"la portanaves\", \"el carrier\", \"la portaflotas\")}.\r\n    }\r\n|elif type = \"set\":\r\n    Ayuda de navegación activada.\r\n|elif type = \"cancel\":\r\n    Ayuda de navegación desactivada.\r\n|elif type = \"recalculating\":\r\n    Recalculando {Occasionally(2, \"ruta\")}.\r\n}\r\n\r\n{if clip_notify && !va_active:\r\n    {Pause(200)}\r\n    Sistema copiado al portapapeles.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Safe": {
      "name": "Safe",
      "description": "Triggered when you are no longer in danger",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Screenshot": {
      "name": "Screenshot",
      "description": "Se activa cuando se toma una captura de pantalla",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Search and rescue": {
      "name": "Search and rescue",
      "description": "Se activa cuando se entregan elementos a un contacto de Búsqueda y Rescate",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.amount > 1: {set s to \"s\"}}\n{set o to \"a\"}\n{set save to OneOf(\"Recuperad\", \"Entregad\", \"Devuelt\")}\n\n{if event.commodity.name = \"Cajas negras\":\n\t{set recovery to cat(OneOf(\"registro{s} de vuelo{set o to 'o'}\", \"caja{s} negra{s}\"))}\n\n|elif event.commodity.name = \"Cápsula de escape dañada\":\n\t{set recovery to cat(\"cápsula\", s, \" \", OneOf('criogénica{s}', 'de escápe'), \" dañada\", s)}\n\n|elif event.commodity.name = \"Cápsula de escape ocupada\":\n\t{set recovery to cat(\"cápsula\", s, \" \", OneOf(\"criogénica{s}\", \"de escápe\"), \" ocupada\", s)}\n\n|elif event.commodity.name = \"Efectos personales\":\n\t{set o to \"o\"}\n\t{set unit to OneOf(\"conjunto{s} de\", \"bulto{s} de\", \"paquete{s} de\")}\n\t{set recovery to OneOf(\"objetos personales\", \"recuerdos personales\")}\n\n|elif event.commodity.name = \"Restos de accidentes\":\n\t{set unit to cat(\"tonelada\", s, \" de\")}\n\t{set recovery to OneOf(\"escombros\", \"restos\", \"resíduos\", \"basura espacial\")}\n\t{set recovery to OneOf(\"{recovery} provenientes de accidentes\", \"{recovery} de accidentes\", recovery)}\n\n|elif event.commodity.name = \"Rehenes\":\n\t{set o to \"o\"}\n\t{if event.amount > 1: {set es to \"es\"}}\n\t{set save to OneOf(\"salvad\", \"Rescatad\")}\n\t{set recovery to cat(\"rehén\", es)}\n\n|else:\n\t{set unit to cat(\"tonelada\", s, \" de\")}\n\t{set recovery to event.commodity.name}\n}\n{save}{o}{s} {humaniza(event.amount, o=\"a\")} {unit} {recovery} {if event.commodity.rare: rar{o}{s}}{Occasionally(2, \",\")} por {humaniza(event.reward)} créditos.\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Security presence report": {
      "name": "Security presence report",
      "description": "Función para informar sobre los detalles del nivel de seguridad del sistema",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{if system.population > 0:\n    {OneOf ('los sensores detectan','detecto')} \n\n    {if system.security = \"None\":\n        OneOf(\"una falta total\",\"una ausencia total\", \"la inexistencia\")\n    |elif system.security = \"Low\":\n        {OneOf(\"una mínima presencia\", \"una baja presencia\", \"muy poca presencia\",\"escasa presencia\")}\n    |elif system.security = \"Medium\":\n        {OneOf(\"un nivel medio\", \"alguna presencia\", \"cierta presencia\")}\n    |elif system.security = \"High\":\n        {OneOf(\"una alta presencia\", \"una fuerte presencia\", \"una abundante presencia\")}\n    |else:\n        {system.security}\n    } \n    {OneOf(\"de fuerzas policiales\", \"de seguridad\", \"de agentes de la ley\", \"de agentes de seguridad\")} {OneOf(\"por aquí\", \"en este sistema\", \"en esta zona\")}.\n}",
      "default": false,
      "includes": null
    },
    "Self destruct": {
      "name": "Self destruct",
      "description": "Se activa cuando comienza la secuencia de auto destrucción",
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": "Secuencia de autodestrucción iniciada.\r\nCerrando orificios de ventilación.\r\nPreparando cápsula de escápe.\r\nEnviando señal de socorro.\r\n{Pause(2000)}\r\nBuenasuerte {F(\"Honorific\")}... Ha sido un verdadero honor.\r\n",
      "default": false,
      "includes": null
    },
    "Session Scan Value": {
      "name": "Session Scan Value",
      "description": "Total estimated value of exploration scans for this gaming session (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Session Scan Value}\r\n{_ Total estimated value of exploration scans for this gaming session}\r\n\r\n{set value to GetState(\"eddi_context_session_scan_value\")}\r\n\r\n{if (value = 0 || value = null) && logout != \"true\":\r\n    No se ha\r\n    {OneOf(\"realizado\", \"hecho\")} ningún escaneo\r\n    {OneOf(\"en\", \"durante\")} esta sesión.\r\n\r\n|elif value && value > 0:\r\n\tEl valor estimado \r\n    {if logout = true: \r\n        de esta sesión\r\n    |else:\r\n        {OneOf(\"actual\", \"en la actualidad\")}\r\n    }\r\n    {OneOf(\"en datos exploración\", \"de escaneos de planetas y cuerpos celestes\")}\r\n\tes de unos {GetState(\"eddi_context_session_scan_value\")} créditos.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Settlement approached": {
      "name": "Settlement approached",
      "description": "Se activa cuando se aproxima a un asentamiento (TEST)",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Settlement approached }\r\n{_ Triggered when you approach a settlement }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'settlement')}\r\n{SetState('eddi_context_last_action', 'approach')}\r\n{SetState('eddi_context_last_settlement', event.name)}\r\n{SetState('eddi_context_approach_time', SecondsSince(0))}\r\n",
      "default": true,
      "includes": null
    },
    "Shields down": {
      "name": "Shields down",
      "description": "Se activa cuando los escudos de la nave se desconectan",
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Shields up": {
      "name": "Shields up",
      "description": "Se activa cuando los escudos de la nave se activan",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Ship arrived": {
      "name": "Ship arrived",
      "description": "Se activa cuando se completa la transferencia de una nave a otro sistema",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\"Honorific\")}, ')}\n{OneOf(ShipName(event.shipid, event.ship), \"Su nave\")} ha \n\n{OneOf('llegado', 'completado su transferencia')}\n\n{if station.name != event.station && event.station:\n   a {P(event.station, \"station\")}\n   {if system.name != event.system && event.system:\n      en el sistema  {P(event.system, \"starsystem\")}\n   }\n}.",
      "default": false,
      "includes": null
    },
    "Ship delivered": {
      "name": "Ship delivered",
      "description": "Se activa cuando se le hace entrega de una nave recién comprada",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipCallsign()} entrega completada.",
      "default": true,
      "includes": null
    },
    "Ship fsd": {
      "name": "Ship fsd",
      "description": "Se activa cuando hay un cambio en el estado del FSD de su nave",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{SetState('eddi_context_landing_denies', 0)}",
      "default": false,
      "includes": null
    },
    "Ship interdicted": {
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{if event.succeeded:\r\n\t{if event.submitted:\r\n\t\tNos hemos sometido a la interdicción {set de to \"de\"}\r\n\t|else:\r\n    \tInterdicción conseguida por\r\n    }\r\n    {if event.iscommander:\r\n        {if de: d}el comandante {event.interdictor}.        \r\n    |else:\r\n        {de} {event.interdictor}.        \r\n    }\r\n    {if event.rating:\r\n        de rango {event.rating}\r\n    }\r\n|else:\r\n    Interdición evadida.\r\n}",
      "default": false,
      "includes": null
    },
    "Ship interdiction": {
      "name": "Ship interdiction",
      "description": "Se activa cuando interdicta a otra nave",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Ship loadout": {
      "name": "Ship loadout",
      "description": "Se activa cuando obtienes carga a tu nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Ship locker": {
      "name": "Ship locker",
      "description": "Triggered when you obtain the contents of your ship's micro-resource materials locker",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Ship purchased": {
      "name": "Ship purchased",
      "description": "Se activa cuando compra una nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{P(event.ship)} adquirida.",
      "default": true,
      "includes": null
    },
    "Ship rebooted": {
      "name": "Ship rebooted",
      "description": "Se activa cuando efectúa un reinicio o una reparación en su nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if len(event.modules) > 0:\r\n    Reparaciones de emergencia\r\n    {OneOf(\"terminadas\", \"aplicadas\")}\r\n    para {List(event.modules)}.\r\n}",
      "default": false,
      "includes": null
    },
    "Ship refuelled": {
      "name": "Ship refuelled",
      "description": "Se activa cuando se reposta combustible en su nave (TEST)",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Preferences _}\r\n{set reportFull to false}\t{_ Set to false if you don't want redundancy (game and EDDI) _}\r\n\r\n{if event.source = \"Scoop\":\r\n   {SetState('eddi_context_fuel_remaining', event.total)}\r\n|elif event.full:\r\n   {SetState('eddi_context_fuel_remaining', ship.fueltanktotalcapacity)}\r\n|else:\r\n   {SetState('eddi_context_fuel_remaining', GetState(\"eddi_context_fuel_remaining\") + event.amount)}\r\n}\r\n\r\n{Pause(2000)}\r\n{if event.full:\r\n\t{if reportFull:\r\n   \t\t{set refueled_desc to OneOf(\"totalmente repostado\", \"al máximo de su capacidad\", \"al 100%\")}\r\n   \t\t{OneOf(\"Depósito lleno\", \"Repostado\", \"Combustible al máximo\", \"{Occasionally(2, 'combustible de')} {ShipName()} {refueled_desc}\" )}\r\n   \t}\r\n|else:\r\n   {if event.amount <= 5.0000:\r\n      {F('Fuel check')}\r\n   }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Ship renamed": {
      "name": "Ship renamed",
      "description": "Se activa cuando se cambia el nombre de una nave",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "El nombre {ShipName()} ha sido registrado con {P(system.faction)}. \r\n\r\n{set ICAO_ID to ICAO(event.ident)}\r\n{if len(ICAO_ID) > 0:\r\n    La identificación es: {ICAO_ID}.\r\n|else:\r\n    Aviso: Ha registrado ua ID de nave que no es pronunciable en el alfabeto de radio estándar.\r\n}\r\n",
      "default": true,
      "includes": null
    },
    "Ship repaired": {
      "name": "Ship repaired",
      "description": "Se activa cuando se repara su nave",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{set repairedSystems to []}\r\n{if len(event.items) > 0:\r\n    {for item in event.items:\r\n        {if item = \"Paint\":\r\n            {set systemDescription to cat(\" pintura \",Occasionally(2, \"de la {ShipName()} \"),\" \", OneOf(\" restaurada.\", \" renovada.\")))}\r\n            {set repairedSystems to cat(repairedSystems, [systemDescription])}        \r\n        |elif item = \"Ship Integrity\" || item = \"Wear\":\r\n            {set systemDescription to cat(\" mantenimiento \",Occasionally(2, \"de la {ShipName()} \"),\" \", OneOf(\" completado.\", \" terminado.\")))}\r\n            {set repairedSystems to cat(repairedSystems, [systemDescription])}                 \r\n        }\r\n    }\r\n}\r\n\r\n{set repairedModules to []}\r\n{if len(event.modules) > 0:\r\n    {for module in event.modules:\r\n        {if len(module.localizedmount) > 0:\r\n            {_ This is a weapon. We'll identify the class, grade, and mount}\r\n            {set weaponDescription to cat(module.class, \" \", module.grade, \" \", module.mount, \" \", module.name)}\r\n            {set repairedModules to cat(repairedModules, [weaponDescription])}\r\n        |elif find(module.invariantName, \"Cockpit\") > -1:\r\n            {_ This isn't a weapon. We've matched it to the name of our cockpit module}\r\n            {set repairedModules to cat(repairedModules, [OneOf(\"Cabina\", \"Cubierta\")])}                 \r\n        |else:\r\n            {_ This isn't a weapon. We haven't matched it to the name of any particular module}\r\n            {set repairedModules to cat(repairedModules, [module.name])}\r\n        }\r\n    }\r\n}\r\n\r\n{if len(repairedSystems) > 0:\r\n    {List(repairedSystems)}.\r\n}\r\n{if len(repairedModules) = 1:\r\n    Reparado módulo de {List(repairedModules)}.\r\n|elif len(repairedModules) > 1:\r\n    Reparados los módulos de {List(repairedModules)}.\r\n}\r\n{if len(repairedSystems) = 0 && len(repairedModules) = 0:\r\n    {ShipName()} reparada.\r\n}\r\n\r\n\r\n\r\n",
      "default": false,
      "includes": null
    },
    "Ship restocked": {
      "name": "Ship restocked",
      "description": "Se activa cuando se recarga la munición de su nave",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{ShipName()} {OneOf(\"reaprovisionada\",\"rearmada\")}.",
      "default": true,
      "includes": null
    },
    "Ship shutdown": {
      "name": "Ship shutdown",
      "description": "Se activa cuando se desconectan los sistemas de su nave",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Ship shutdown reboot": {
      "name": "Ship shutdown reboot",
      "description": "Triggered when your ship's system reboots after a forced shutdown",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Ship sold": {
      "name": "Ship sold",
      "description": "Se activa cuando se vende una nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Retirada {ShipName(event.shipid, event.ship)} del servicio activo\",\n             \"{ShipName(event.shipid, event.ship)} Dada de baja\",\n             \"{ShipName(event.shipid, event.ship)} vendida\",)}\n\n{if event.system != system.name:\n   en el sistema {event.system}\n}",
      "default": true,
      "includes": null
    },
    "Ship sold on rebuy": {
      "name": "Ship sold on rebuy",
      "description": "Se activa cuando se vende una nave para obtener fondos para el seguro o recompra de la nave",
      "enabled": true,
      "priority": 2,
      "responder": true,
      "script": "{event.ship}, con identificación {event.shipid}, vendida en {event.system} por {event.price} créditos",
      "default": true,
      "includes": null
    },
    "Ship swapped": {
      "name": "Ship swapped",
      "description": "Se activa cuando se cambia de nave",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{if event.storedship:\n    {OneOf(\"Guardando\", \"Aparcando\", \"Almacenando\", \"Dejando\")} {ShipName(event.storedshipid, event.storedship)} \n|elif event.soldship:\n    Vendiendo {ShipName(event.soldshipid, event.soldship)} \n} \n{OneOf(\"e intercambiando\",\"y moviendo\",\"y transfiriendo\", \"y cambiando\")} a {ShipName(event.shipid, event.ship)}.\n\n{F(\"Limpet check\")}\n{_ F(\"List launchbays\")}\n\n{set fighterhangar to false}\n{for compartment in ship.compartments:\n    {if find(compartment.module.name, \"Fighter Hangar\") != -1:\n        {set fighterhangar to true}\n    } \n} \n{if fighterhangar = true:\n    Recuerde: debe asignar un miembro del equipo al servicio activo\n} \n",
      "default": false,
      "includes": null
    },
    "Ship targeted": {
      "name": "Ship targeted",
      "description": "Triggered when the player selects a non-Thargoid target",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ event Parameters:   targetlocked - bool (ie false when losing target) _}\r\n{_ If target locked:   name (of ship), scanstage (ie 0, 1, 2, 3) _}\r\n{_ If Scan stage >= 1: name (of pilot), rank (of pilot) _}\r\n{_ If scan stage >= 2: shieldhealth, hullhealth (both 0-100) _}\r\n{_ If scan stage >= 3: faction, power (if player is pledged to a power), _}\r\n{_                     legalstatus (ie clean, wanted, etc), bounty (if applicable), _}\r\n{_                     subsystem (ie FSD, power plant, etc), subsystemhealth (0-100) _}\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'ship')}\r\n{SetState('eddi_context_last_action', 'targeted')}\r\n\r\n{if environment = \"Supercruise\":\r\n    {_ If we're in supercruise, check whether we are carrying a Frame Shift Drive Interdictor}\r\n    {for compartment in ship.compartments:\r\n        {if compartment.module.invariantName = \"Frame Shift Drive Interdictor\":\r\n            {set hasInterdictor to true}\r\n        }\r\n    }\r\n}\r\n\r\n{if environment = \"Normal Space\" || hasInterdictor:\r\n    {if event.targetlocked && event.scanstage > 2 && !event.subsystem:\r\n        {set legalstatus to event.legalstatus}\r\n        {if legalstatus = \"Buscado\" || legalstatus = \"Enemigo Buscado\" || legalstatus = \"Autorizado\":\r\n            {set wanted_list to split(GetState(\"eddi_context_wanted_list\"), \"+=\")}\r\n            {if find(wanted_list, event.name) < 0:\r\n                {event.name} {OneOf(\"tiene una recompensa\", \"no es trigo limpio\", \"es un objetivo legítimo\", \"está buscado por las autoridades\")}.\r\n                {if len(wanted_list) = 0: {set sep to \"\"} |else: {set sep to \"+=\"}}\r\n                {set wanted_list to cat(wanted_list, [event.name])}\r\n                {SetState('eddi_context_wanted_list', join(wanted_list, sep))}\r\n            }    \r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "Ship transfer initiated": {
      "name": "Ship transfer initiated",
      "description": "Se activa cuando se inicia la transferencia de una nave a otro sistema",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{if rand(2):\n\t{set report to cat(ShipName(event.shipid, event.ship),\" \", OneOf(\"{Occasionally(2, 'está')} en camino\", \"está siendo transferida\", \"está siendo transportada\"))}\n|else:\n\t{set o to 'o'}\n\t{set report to cat(OneOf(\"Transferencia{set o to 'a'}\", \"Transporte\", \"Envío\"), \" de \", ShipName(event.shipid, event.ship), \" iniciad\", o)}\n}\n\n{report} desde {P(event.system)} {if event.distance > 2: {Occasionally(2, \"(a {round(event.distance)} años luz)\")}},\n\n{if event.price: {OneOf(\"por\", \"con\")} un {OneOf(\"coste\", \"importe\")} de {humaniza(event.price)} {de} créditos.}\n\n{set t_remaining to event.time}\n\n{if t_remaining:\n\n   {Pause(800)}\n   {OneOf(\"Llegada prevista {Occasionally(2, 'en')}\", \"Tiempo de llegada\", \"Tiempo del trayecto\")},\n\n   {if t_remaining > (60*60*24):\n      {set t_days to floor(t_remaining/(60*60*24))}\n      {t_days} día{if t_days > 1:s},\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\n   }\n\n   {if t_remaining > 3600:\n      {set t_hours to floor(t_remaining/3600)}\n      {t_hours} hora{if t_hours > 1:s},\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\n   }\n\n   {if t_remaining > 60:\n      {if t_days || t_hours: y }\n      {set t_minutes to round(t_remaining/(60),0)}\n      {t_minutes} minuto{if t_minutes > 1:s}.\n   }\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Shutdown": {
      "name": "Shutdown",
      "description": "Se activa cuando se hace un cierre limpio del juego",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrando en modo suspensión de la nave.\r\nDescanse, {F(\"Honorific\")}.",
      "default": false,
      "includes": null
    },
    "Signal detected": {
      "name": "Signal detected",
      "description": "Triggered when a signal source is detected",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Edit the true/false values of `spokenSources` to identify signal types that should be announced whenever they are first detected within a system (otherwise, only signal sources detected while in fss or saa mode will be taken into account. _}\r\n\r\n{if (status.gui_focus = \"fss mode\" || status.gui_focus = \"saa mode\" || event.unique) && spokenSources[event.source] = true:\r\n\t{if event.source && !event.stationsignal:\r\n\t\t{creaArticulos(event.source)}\t\t\t\t\r\n\t\t{if event.threatlevel > 0:\r\n\t\t\t{set level to cat(Occasionally(2, \",\"), \" \", OneOf(\"de amenaza\", \"de clase\", \"nivel de amenaza\"), \" \", event.threatlevel)}\r\n        }\r\n       \t{if event.faction != \"None\":\r\n        \t{set faction to cat(Occasionally(2, \",\"), \" \", Occasionally(3, OneOf(\"enviad{o}{s}\", \"emitid{o}{s}\")))}\r\n        \t{set faction to cat(faction, \" \", OneOf(\"por\", \"de\", \"desde\"), \" \", Occasionally(2, \"la facción\"), \" \", event.faction)}\r\n        }\r\n        \r\n        {OneOf(\"Detectad\", \"Localizad\")}{o}{s} {event.source} {level} {faction}.\r\n    }\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Silent running": {
      "name": "Silent running",
      "description": "Triggered when you activate or deactivate silent running",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Squadron rank": {
      "name": "Squadron rank",
      "description": "Triggered when your rank with a squadron has changed",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron rank }\r\n{_ Triggered when your rank with a squadron has changed }\r\n\r\n\r\nSu flota {event.name} le ha\r\n{if event.newrank > event.oldrank:\r\n    ascendido\r\n|else:\r\n    degradado\r\n}\r\na {cmdr.squadronrank.name}.\r\n",
      "default": true,
      "includes": null
    },
    "Squadron status": {
      "name": "Squadron status",
      "description": "Triggered when your status with a squadron has changed",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "{_ Squadron status }\r\n{_ Triggered when your status with a squadron changes }\r\n\r\n{if event.status = \"applied\":\r\n    Ha solicitado la admisión a la flota {event.name}.\r\n|elif event.status = \"created\":\r\n    Ha inaugurado la flota {event.name}.\r\n|elif event.status = \"disbanded\":\r\n    La flota {event.name} ha sido disuelta\r\n|elif event.status = \"invited\":\r\n    Ha recibido una invitación para alistarse a la flota {event.name}.\r\n|elif event.status = \"kicked\":\r\n    Ha sido expulsado de la flota {event.name}.\r\n|elif event.status = \"left\":\r\n    Ha dimitido de la flota {event.name}.\r\n|elif event.status = \"joined\":\r\n    {_ Se ha unido a la flota event.name }.\r\n}\r\n",
      "default": false,
      "includes": null
    },
    "SRV docked": {
      "name": "SRV docked",
      "description": "Se activa cuando embarca un VRS en su nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if GetState(\"eddi_context_srv_deployed_id\") = event.id:\r\n    {SetState('eddi_context_srv_deployed_id', \"\")}\r\n}\r\n{OneOf(\"Bugui\", Spacialise('VRS'))} {OneOf(\"embarcado\",\"recogido\")}\r\n",
      "default": false,
      "includes": null
    },
    "SRV launched": {
      "name": "SRV launched",
      "description": "Se activa cuando se desembarca un VRS desde su nave",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_srv_deployed_id', event.id)}\r\n{OneOf(\"Bugui\", Spacialise('VRS'))} {OneOf(\"lanzado\", \"fuera\", \"desplegado\")}.\r\n",
      "default": false,
      "includes": null
    },
    "SRV turret": {
      "name": "SRV turret",
      "description": "Se activa cuando despliega o repliega la torreta de armas de su VRS",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "SRV turret deployable": {
      "name": "SRV turret deployable",
      "description": "Se activa cuando su VRS entra o sale de la zona de seguridad de alrededor de su nave",
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{if !event.deployable:\n   {OneOf(\"Bugui\", Spacialise('VRS'))} esperando para embarque.\n}",
      "default": false,
      "includes": null
    },
    "SRV under ship": {
      "name": "SRV under ship",
      "description": "Triggered when your SRV enters the recovery zone under your ship (TEST)",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_Shirka}\r\n\r\n{OneOf(\"Bugui\", \"VRS\")} preparado para embarcar.",
      "default": false,
      "includes": null
    },
    "Star habitable zone": {
      "name": "Star habitable zone",
      "description": "Report on the habitable zone around a star",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(GetState(\"eddi_context_star_star\"), GetState(\"eddi_context_star_system\"))}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    No consigo saber a que estrella se refiere.\r\n|else:\r\n    {if (reportbody.estimatedhabzoneinner && reportbody.estimatedhabzoneouter) && \r\n     (reportbody.estimatedhabzoneinner > 0 && reportbody.estimatedhabzoneouter> 0):\r\n       Zona habitable {OneOf(\"calculada\", \"comprendida\", \"\"))} entre\r\n       {round(reportbody.estimatedhabzoneinner)} \r\n       y {round(reportbody.estimatedhabzoneouter)} \r\n       segundos luz.\r\n    |elif reportbody.estimatedhabzoneouter && reportbody.estimatedhabzoneouter > 0:\r\n       La zona habitable comienza a partir de los\r\n       {round(reportbody.estimatedhabzoneouter)}\r\n       segundos luz.\r\n    }\r\n}",
      "default": false,
      "includes": null
    },
    "Star report": {
      "name": "Star report",
      "description": "Función para informar de los detalles del objeto estelar contextual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "\t\r\n{_ Fetch from context }\r\n{set reportbody to BodyDetails(GetState(\"eddi_context_star_star\"), GetState(\"eddi_context_star_system\"))}\r\n{if !reportbody: {set reportbody to BodyDetails(GetState(\"eddi_context_star_star\"))}}\r\n{if !reportbody && event: {set reportbody to event.star}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n\r\n    No consigo saber a que estrella se refiere.\r\n\r\n|else:\r\n\r\n    {_ Set up a list of notable star characteristics _}\r\n    {set notables to []}\r\n\r\n    {_ Set up various groups of stars _}\r\n    {set mainsequence to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n    {set fastburning to [\"WC\", \"WN\", \"WO\", \"WNC\", \"W\"]}\r\n    {set browndwarves to [\"L\", \"T\", \"Y\"]}\r\n\r\n    {for starclass in mainsequence:\r\n        {if reportbody.stellarclass = starclass:\r\n            {set mainsequence to Occasionally(mainSequenceFrequency, \"de secuencia principal\")}\r\n            {set mainsequence to 1}\r\n        }\r\n    }    \r\n    {for starclass in browndwarves:\r\n        {if reportbody.stellarclass = starclass:\r\n            {set browndwarf to 1}\r\n        }\r\n    }    \r\n    {for starclass in fastburning:\r\n        {if reportbody.stellarclass = starclass: \r\n            {set fastburning to 1}\r\n        }\r\n    }\r\n\r\n    {_ Is this a rare class of star? _}\r\n    {if reportRareStarClasses:\r\n        {if reportbody.starClass.percentage < 0.01:\r\n            {set rarity to \"Increiblemente rara\"}\r\n        |elif reportbody.starClass.percentage < 0.1:\r\n            {set rarity to \"Muy rara\"}\r\n        |elif reportbody.starClass.percentage < 1.0:\r\n            {set rarity to \"Rara\"}\r\n        |elif reportbody.starClass.percentage < 5:\r\n            {set rarity to \"Poco común\"}\r\n        }\r\n    }\r\n\r\n    {_ Is the star notable in some other way? _}\r\n\r\n    {if reportAge && rand(reportAge) = 0:\r\n        {set ageInYears to reportbody.age * 1000000}\r\n        {if ageInYears <= 1000000:\r\n            {set ps to \", por lo que es una de las estrellas más jóvenes de la galaxia\"}\r\n        |elif ageInYears >= 13000000000:\r\n            {set ps to \", por lo que es una de las estrellas más {OneOf('lonjevas', 'viejas', 'ancianas')} de la galaxia\"}\r\n        }\r\n        {if reportbody.ageprobability:\r\n            {if reportbody.ageprobability < 0.01:\r\n                {set notables to cat(notables, [cat(\"una edad increiblemente baja de \", humaniza(ageInYears), \" años\", ps)])}\r\n            |elif reportbody.ageprobability < 0.1:\r\n                {set notables to cat(notables, [cat(\"una edad extremadamente baja de \", humaniza(ageInYears), \" años\", ps)])}\r\n            |elif reportbody.ageprobability < 5:\r\n                {set notables to cat(notables, [cat(\"una edad inusualemente baja de \", humaniza(ageInYears), \" años\", ps)])}\r\n            |elif reportbody.ageprobability > 99.99:\r\n                {set notables to cat(notables, [cat(\"una edad increiblemente alta de \", humaniza(ageInYears), \" años\", ps)])}\r\n            |elif reportbody.ageprobability > 99.9:\r\n                {set notables to cat(notables, [cat(\"una edad extremadamente alta de \", humaniza(ageInYears), \" años\", ps)])}\r\n            |elif reportbody.ageprobability > 95:\r\n                {set notables to cat(notables, [cat(\"una edad inusualmente alta de \", humaniza(ageInYears), \" años\", ps)])}\r\n            }\r\n        }\r\n        {set notables to Occasionally(reportAge, notables)}\r\n    }\r\n\r\n    {if reportMass && reportbody.massprobability:\r\n        {if reportbody.massprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"una masa solar increíblemente baja de \", humaniza(reportbody.solarmass, 1), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.massprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"una masa solar extremadamente baja de \", humaniza(reportbody.solarmass, 1), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.massprobability < 1:\r\n            {set notables to cat(notables, [cat(\"una masa solar inusualmente baja de \", humaniza(reportbody.solarmass, 1), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.massprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"una masa solar increíblemente alta de \", humaniza(reportbody.solarmass, 1), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"una masa solar extremadamente alta de \", humaniza(reportbody.solarmass, 1), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [cat(\"una masa solar inusualmente alta de \", humaniza(reportbody.solarmass, 1), Occasionally(2, 'veces la del sol'))])}\r\n        }\r\n    }\r\n\r\n    {if reportRadius && reportbody.radiusprobability:\r\n        {if reportbody.radiusprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"un radio solar increíblemente bajo de \", humaniza(reportbody.solarradius), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.radiusprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"un radio solar extremadamente bajo de \", humaniza(reportbody.solarradius), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.radiusprobability < 5:\r\n            {set notables to cat(notables, [cat(\"un radio solar inusualmente bajo de \", humaniza(reportbody.solarradius), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.radiusprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"un radio solar extremadamente alto de \", humaniza(reportbody.solarradius), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"un radio solar increíblemente alto de \", humaniza(reportbody.solarradius), Occasionally(2, 'veces la del sol'))])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [cat(\"un radio solar inusualmente alto de \", humaniza(reportbody.solarradius), Occasionally(2, 'veces la del sol'))])}\r\n        }\r\n    }\r\n\r\n    {if reportRotation && reportbody.rotationalperiodprobability:\r\n        {if reportbody.rotationalperiodprobability > 99.99:\r\n            {set notables to cat(notables, [cat(OneOf( \"una velocidad{set a to 'a'}\", \"un ratio{set a to 'o'}\"), \" de rotación extremadamente \", OneOf(\"alt{a}\", \"rápid{a}\"), \" de \", humaniza(reportbody.rotationalperiod), \" días \", Occasionally(2, \"por revolución\"))])}\r\n        |elif reportbody.rotationalperiodprobability > 99.9:\r\n            {set notables to cat(notables, [cat(OneOf( \"una velocidad{set a to 'a'}\", \"un ratio{set a to 'o'}\"), \" de rotación increíblemente \", OneOf(\"alt{a}\", \"rápid{a}\"), \" de \", humaniza(reportbody.rotationalperiod), \" días \", Occasionally(2, \"por revolución\"))])}\r\n        |elif reportbody.rotationalperiodprobability > 99:\r\n            {set notables to cat(notables, [cat(OneOf( \"una velocidad{set a to 'a'}\", \"un ratio{set a to 'o'}\"), \" de rotación inusualmente \", OneOf(\"alt{a}\", \"rápid{a}\"), \" de \", humaniza(reportbody.rotationalperiod), \" días \", Occasionally(2, \"por revolución\"))])}\r\n        |elif reportbody.rotationalperiodprobability > 95:\r\n            {set notables to cat(notables, [cat(OneOf( \"una velocidad{set a to 'a'}\", \"un ratio{set a to 'o'}\"), \" de rotación \", OneOf(\"alt{a}\", \"rápid{a}\"), \" de \", humaniza(reportbody.rotationalperiod), \" días \", Occasionally(2, \"por revolución\"))])}\r\n        }\r\n    }\r\n    \r\n    {if reportTemps && reportbody.tempprobability:\r\n        {if reportbody.tempprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"una temperatura superficial increíblemente baja de \", humaniza(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"una temperatura superficial extremadamente baja de \", humaniza(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability < 1:\r\n            {set notables to cat(notables, [cat(\"una temperatura superficial inusualmente baja\")])}\r\n        |elif reportbody.tempprobability < 5:\r\n            {set notables to cat(notables, [cat(\"una temperature superficial inferior a la media\")])}\r\n        |elif reportbody.tempprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"una temperatura superficial extremadamente alta \", humaniza(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"una temperatura superficial increíblemente alta de \", humaniza(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [cat(\"una temperatura superficial inusualmente alta\")])}\r\n        |elif reportbody.tempprobability > 95:\r\n            {set notables to cat(notables, [cat(\"una temperatura superficial superior a la media\")])}\r\n        }\r\n    }\r\n    \r\n    {if reportDensity && reportbody.densityprobability:\r\n        {if reportbody.densityprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"una densidad media increíblemente baja de \", humaniza(reportbody.density), \" kilogramos por metro cúbico\")])}\r\n        |elif reportbody.densityprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"una densidad media extremadamente baja de \", humaniza(reportbody.density), \" kilogramos por metro cúbico\")])}\r\n        |elif reportbody.densityprobability < 1:\r\n            {set notables to cat(notables, [cat(\"una densidad media inusualemente baja\")])}\r\n        |elif reportbody.densityprobability < 5:\r\n            {set notables to cat(notables, [cat(\"una densidad media inferior a lo normal\")])}\r\n        |elif reportbody.densityprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"una densidad media extremadamente alta de \", humaniza(reportbody.density), \" kilogramos por metro cúbico\")])}\r\n        |elif reportbody.densityprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"una densidad media increíblemente alta de \", humaniza(reportbody.density), \" kilogramos por metro cúbico\")])}\r\n        |elif reportbody.densityprobability > 99:\r\n            {set notables to cat(notables, [cat(\"una densidad media inusualemente alta\")])}\r\n        |elif reportbody.densityprobability > 95:\r\n            {set notables to cat(notables, [cat(\"una densidad media superior a lo normal\")])}\r\n        }\r\n    }\r\n\r\n    {if reportRapidRotation && reportbody.rotationalperiodprobability:\r\n        {if reportbody.rotationalperiodprobability < 0.1:\r\n            {set notables to cat(notables, [cat(\"un periodo rotacional increiblemente corto de \", humaniza(reportbody.rotationalperiod), \" días\")])}\r\n        |elif reportbody.rotationalperiodprobability < 1:\r\n            {set notables to cat(notables, [cat(\"un periodo rotacional extremadamente corto de \", humaniza(reportbody.rotationalperiod), \" días\")])}\r\n        |elif reportbody.rotationalperiodprobability < 3:\r\n            {set notables to cat(notables, [cat(\"un periodo rotacional inusualmente corto de \", humaniza(reportbody.rotationalperiod), \" días\")])}\r\n        }\r\n    }\r\n\r\n    {if reportAbsMagnitude && reportbody.absolutemagnitudeprobability:\r\n        {if reportbody.absolutemagnitudeprobability < 0.01:\r\n            {set notables to cat(notables, [cat(OneOf(\"increiblemente brillante\", \"increiblemente luminosa\"))])}\r\n        |elif reportbody.absolutemagnitudeprobability < 0.1:\r\n            {set notables to cat(notables, [cat(OneOf(\"extremadamente brillante\", \"extremadamente luminosa\"))])}\r\n        |elif reportbody.absolutemagnitudeprobability < 1:\r\n            {set notables to cat(notables, [cat(OneOf(\"inusualmente brillante\", \"inusualmente luminosa\"))])}\r\n        |elif reportbody.absolutemagnitudeprobability < 5:\r\n            {set notables to cat(notables, [cat(OneOf(\"de alto brillo\", \"de alta luminosidad\"))])}\r\n        }\r\n    }\r\n\r\n    {_ Is the star ringed? _}\r\n    {if reportRingedStars:\r\n        {if reportbody.rings:\r\n            {set ringcompositions to []}\r\n            {set cur to 0}\r\n            {for ring in reportbody.rings:\r\n                {if find(ring.name, \"Ring\") > -1:\r\n                    {if find(ringcompositions, ring.composition) = -1:\r\n                        {set ringcompositions to cat(ringcompositions, [cat(ring.composition)])}\r\n                    }\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n            {set cur to 0}\r\n            {set length to len(ringcompositions) - 1}\r\n            {while cur < len(ringcompositions):\r\n                {set ringsdescription to cat(ringsdescription, ringcompositions[cur])}\r\n                {set cur to cur + 1}\r\n                {if cur = length: \r\n                    {set ringsdescription to cat(ringsdescription, \" y \")}\r\n                |elif cur < length:\r\n                    {set ringsdecription to cat(ringsdescription, \", \")}\r\n                }\r\n            }\r\n            {if ringsdescription:\r\n                {if len(ringcompositions) = 1:\r\n                    {set rings to \"anillo\"}\r\n                |else:\r\n                    {set rings to \"anillos\"} \r\n                }\r\n                {if reportbody.reserveLevel.invariantName != \"None\": \r\n                    {set reserves to reportbody.reserves}\r\n                }\r\n                {set notables to cat(notables, [cat(rings, reserves, \" de \", ringsdescription)])}\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Report notable stars _}\r\n\r\n    {if len(notables) > 0:\r\n\r\n        {_ Setup descriptions for our star _}\r\n        \r\n        {if find([\"L\", \"T\", \"Y\"], reportbody.stellarclass) > -1:\r\n            {set shortdescription to \"enana marrón\"}\r\n        |elif reportbody.stellarclass = \"TTS\":\r\n            {set class to \"\"}  \r\n            {set shortdescription to \"estrella T tauri\"}\r\n            {set contraccion to OneOf('colapso gravitatorio', 'colapso gravitacional', 'contracción gravitacional')}\r\n            {set desc2 to Occasionally(2, '{OneOf(\"en proceso de {contraccion}\", \"que es tan joven que aún no ha entrado en su secuencia principal\", \"que se encuentra en una fase de pre-secuencia principal\")}')}\r\n        |elif reportbody.stellarclass = \"AEBE\":\r\n            {set age to \"muy joven\"}\r\n            {set shortdescription to \"protoestrella\"}\r\n            {set desc2 to Occasionally(2, \"que aún no ha empezado su secuencia principal {Occasionally(4, ', pero está en camino de convertirse en una estrella de clase A, o B')}\")}\r\n        |elif reportbody.stellarclass = \"WC\":\r\n            {set desc1 to \"rica en carbono{Occasionally(2, ', de combustión rápida')}\"}\r\n            {set shortdescription to \"estrella Wolf-Rayet\"}\r\n            {set desc2 to Occasionally(2, \", que está perdiendo una masa considerable y expone el carbono ionizado de su núcleo, \")}\r\n        |elif reportbody.stellarclass = \"WN\":\r\n            {set desc1 to \"rica en helio y nitrógeno{Occasionally(2, ' de combustión rápida')}\"}\r\n            {set shortdescription to \"estrella Wolf-Rayet\"}\r\n            {set desc2 to Occasionally(2, \", que está perdiendo una masa considerable y expone helio ionizado y nitrógeno de su núcleo, \")}\r\n        |elif reportbody.stellarclass = \"WO\":\r\n            {set desc1 to \"rica en oxígeno{Occasionally(2, ' de combustión rápida')}\"}\r\n            {set shortdescription to \"estrella Wolf-Rayet\"}\r\n            {set desc2 to Occasionally(2, \", que está perdiendo una masa considerable y expone oxígeno ionizado de su núcleo, \")}\r\n        |elif reportbody.stellarclass = \"WNC\":\r\n            {set shortdescription to \"estrella Wolf-Rayet\"}\r\n            {set desc2 to Occasionally(2, \", que está perdiendo una masa considerable y expone nitrógeno ionizado, carbono, oxígeno, y helio de su núcleo, \")}\r\n        |elif reportbody.stellarclass = \"W\":\r\n            {set shortdescription to \"estrella Wolf-Rayet\"} \r\n            {set desc2 to Occasionally(2, \"que está perdiendo una masa considerable y expone los elementos más pesados de su núcleo, \")}\r\n        |elif reportbody.stellarclass = \"CS\":\r\n            {set shortdescription to \"estrella de carbono\"}\r\n        |elif find([\"C\", \"CN\", \"CH\", \"CHd\"], reportbody.stellarclass) > -1:\r\n            {set age to Occasionally(2, \"de secuencia tardía\")} \r\n            {set shortdescription to \"estrella rica en carbono\"}\r\n        |elif reportbody.stellarclass = \"CJ\":\r\n            {set age to Occasionally(2, \"de secuencia tardía\")} \r\n            {set shortdescription to \"estrella de carbono\"}\r\n            {set desc2 to Occasionally(2, \"con altos niveles de carbono 13 en su atmósfera\")}\r\n        |elif find([\"MS\", \"S\"], reportbody.stellarclass) > -1:\r\n            {set age to Occasionally(2, \"de secuencia tardía\")} \r\n            {set shortdescription to \"estrella\"}\r\n            {set desc2 to Occasionally(4, \"que una vez fue una Estrella Clase M, y ahora está en camino de convertirse en una estrella de carbono\")}\r\n        |elif reportbody.stellarclass = \"DA\":\r\n            {set shortdescription to \"enana blanca\"}\r\n            {set desc2 to Occasionally(4, \"con una atmósfera rica en hidrógeno\")}\r\n        |elif reportbody.stellarclass = \"DAB\":\r\n            {set shortdescription to \"enana blanca\"}\r\n            {set desc2 to Occasionally(4, \"con una atmósfera rica en hidrógeno y helio\")}\r\n        |elif slice(reportbody.stellarclass, 0, 1) = \"D\":\r\n            {set shortdescription to \"enana blanca\"}\r\n        |elif slice(reportbody.stellarclass, 0, 1) = \"N\":\r\n            {set shortdescription to \"neutron star\"}\r\n            {set desc2 to Occasionally(4, \"que tiene un peligroso núcleo de alta densidad\")}\r\n        |elif reportbody.stellarclass = \"H\":\r\n            {set shortdescription to \"agujero negro\"}\r\n        |elif reportbody.stellarclass = \"X\":\r\n            {set shortdescription to \"entidad estelar exótica\"}\r\n        |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n            {set shortdescription to \"agujero negro supermasivo\"}\r\n        |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n            {set class to Spacialise('A')} \r\n            {set shortdescription to \"supergigante blanco-azulada\"}\r\n            {set desc2 to Occasionally(4, \"que ha comenzado a expandirse para transformarse en una supergigante roja\")}\r\n        |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n            {set class to Spacialise('F')} \r\n            {set shortdescription to \"supergigante blanca\"}\r\n            {set desc2 to Occasionally(4, \"que ha comenzado a expandirse para transformarse en una supergigante roja\")}\r\n        |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n            {set class to Spacialise('M')} \r\n            {set shortdescription to \"supergigante roja\"}\r\n            {set desc2 to Occasionally(4, \"en su fase de combustión de helio\")}\r\n        |elif reportbody.stellarclass = \"M_RedGiant\":\r\n            {set class to Spacialise('M')} \r\n            {set shortdescription to \"gigante roja\"}\r\n            {set desc2 to Occasionally(4, \"que se está expandiendo para convertirse en una supergigante roja\")}\r\n        |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n            {set class to Spacialise('M')} \r\n            {set shortdescription to \"gigante naranja\"}\r\n            {set desc2 to Occasionally(4, \"que se expande mientras se dirige hacia el final de su vida\")}\r\n        |elif reportbody.stellarclass = \"RoguePlanet\":\r\n            {set class to \"\"}  \r\n            {set shortdescription to 'planeta {OneOf(\"interestelar\", \"vagabundo\", \"errante\", \"huérfano\")}'}\r\n        |elif reportbody.stellarclass = \"Nebula\":\r\n            {set class to \"\"}  \r\n            {set shortdescription to \"nebulosa\"}\r\n        |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n            {set class to \"\"}  \r\n            {set shortdescription to OneOf(\"nebulosa remanente\", \"remanente de Supernova\")}\r\n        }\r\n        \r\n        {if !shortdescription:\r\n            {set shortdescription to \"estrella\"}\r\n        }\r\n        {set description to shortdescription}\r\n        {if desc1: \r\n            {set description to cat(description, \" \", desc1)}\r\n        }\r\n        {if desc2: \r\n            {set description to cat(description, \" \", desc2)}\r\n        }\r\n\r\n        {_ Set additional common elements _}\r\n\r\n        {if !class:\r\n            {set class to Spacialise(reportbody.stellarclass)}\r\n        }\r\n        \r\n        {_ Begin speaking _}\r\n\r\n        {if len(notables) > 0:\r\n            {if reportbody.shortname != reportbody.systemname:\r\n                {P(reportbody.shortname, \"body\")} es\r\n                {shortdescription}\r\n                {mainsequence}\r\n                {if fastburning = 1: {Occasionally(2, \"de quema rápida\")}}\r\n            |else:\r\n                Esta {shortdescription} es\r\n                {mainsequence}\r\n                {if fastburning = 1: {Occasionally(2, \"de quema rápida\")}}\r\n            }\r\n\r\n            {if rarity:\r\n                {rarity}{if reportbody.chromaticity: \", \"} y\r\n            }\r\n\r\n            {if len(notables) = 1:\r\n                notable,\r\n            |elif len(notables) = 2:\r\n                {OneOf('interesante,', 'notable', 'remarcable')}\r\n            |elif len(notables) = 3:\r\n                {OneOf('exceptional,', 'muy remarcable,')}\r\n            |elif len(notables) = 4:\r\n                {OneOf('extraordinaria,')}\r\n            |elif len(notables) >= 5:\r\n                {OneOf('única en su tipo,', 'única,')}\r\n            }\r\n\r\n            {if reportClass = 1 && class && len(class) > 0: \r\n                {set class to cat(\"de clase\", \" \", class)}\r\n                {if reportSubClass && reportbody.stellarsubclass:\r\n                    {set class to cat(class, \" \", reportbody.stellarsubclass)}\r\n                }\r\n            }\r\n            {Occasionally(3, \"en comparación a {shortdescription}s {class} similares,\")}\r\n\r\n            {if len(notables) > 0:\r\n                con {List(notables)}.\r\n            }\r\n\r\n            {if reportbody.chromaticity && reportChromaticity >= 1:\r\n                {if reportbody.chromaticity = \"blanco\":\r\n                    {set color to OneOf(\"de color blanco\", \"blanca\")}\r\n                |else:\r\n                    {set color to reportbody.chromaticity}\r\n                }\r\n                {Occasionally(reportChromaticity, \"Como puedes ver, emite una luz {color}.\")}\r\n            }\r\n        }\r\n    }   \r\n\r\n    {if reportScanValue && rand(reportScanValue) = 0: {F(\"Report last scan value\")} }\r\n\r\n    {if reportHabZone && event.mainstar && rand(reportHabZone) = 0: {F(\"Star habitable zone\")} }\r\n}        \r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Star scanned": {
      "name": "Star scanned",
      "description": "Se activa cuando completa un escaneo de un cuerpo estelar (TEST)",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', event.systemname)}\r\n{SetState('eddi_context_star_star', event.bodyname)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n{SetState('eddi_context_last_scan_max_value', event.estimatedvalue)}\r\n\r\n{if !GetState(\"eddi_context_star_lastscan_cooldown\"): {SetState('eddi_context_star_lastscan_cooldown', 0)}}\r\n\r\n{if (SecondsSince(GetState(\"eddi_context_star_lastscan_timestamp\")) > GetState(\"eddi_context_star_lastscan_cooldown\")) && (ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\"):\r\n\t{_ Establece espera entre escaneos _}\r\n\t{SetState('eddi_context_star_lastscan_timestamp', SecondsSince(0))}\r\n\t{SetState('eddi_context_star_lastscan_cooldown', 0)}\r\n    \r\n    {if event.mainstar && !event.alreadydiscovered && event.scantype = \"AutoScan\":\r\n        {set report to \"Este sistema {Ocasionally(3, 'estelar')} {Occasionally(2, 'aún')} no {OneOf('ha sido', 'está', 'se ha')} {OneOf('registrado', 'reportado', 'cartografiado')} {Ocasionally(4, 'con Uvisersal Cartographics')}{Pause(500)}\"}\r\n    }\r\n    \r\n    {set report to cat(report, F(\"Star report\"))}\r\n    \r\n    {_ Espera entre escaneos: 0,05 segundos por letra _}\r\n\t{SetState('eddi_context_star_lastscan_cooldown', round(GetState(\"eddi_context_star_lastscan_cooldown\") + len(report) * 0.05))}\r\n\r\n    {report}\r\n}",
      "default": false,
      "includes": null
    },
    "Station mailslot": {
      "name": "Station mailslot",
      "description": "Triggered when your ship enters through a station's mailslot without the aid of a docking computer",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Station no fire zone entered": {
      "name": "Station no fire zone entered",
      "description": "Se activa cuando su nave entra en la zona de seguridad de una estación espacial",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Station no fire zone exited": {
      "name": "Station no fire zone exited",
      "description": "Se activa cuando su nave abandona la zona de seguridad de una estación espacial",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Station report": {
      "name": "Station report",
      "description": "Función para informar sobre los detalles de la actual estación espacial",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "No hay nada interesante aquí",
      "default": true,
      "includes": null
    },
    "Statistics": {
      "name": "Statistics",
      "description": "Statistics provided at the beginning of a game session",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Suit purchased": {
      "name": "Suit purchased",
      "description": "Triggered when you buy a space suit",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Surface signals detected": {
      "name": "Surface signals detected",
      "description": "Triggered when surface signal sources are detected",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "\r\n{if (vehicle = \"Ship\" || vehicle = \"Multicrew\") && environment != \"Docked\":\r\n\r\n\t{set surfacesignals to []}\r\n\t{for signal in event.surfacesignals: \r\n\t\t{_ traducción del plural del tipo de señal}\r\n\t\r\n\t\t{if signal.source = \"Señal Geológica de Superficie\": \r\n\t\t\t{set tipopl to \"Señales geológicas de Superficie\"}        \r\n\t\t|elif signal.source = \"Señal no identificada\":\r\n\t  \t\t{set tipopl to \"Señales no identificadas\"}\r\n\t\t|elif signal.source = \"Señal no humana\":\r\n\t   \t\t{set tipopl to \"Señales no humanas\"}\r\n\t\t|elif signal.source = \"Señal Biológica de Superficie\":\r\n\t   \t\t{set tipopl to \"Señales Biológicas de Superficie\"}\r\n\t\t|elif signal.source = \"Señal de Superficie Humana\":\r\n\t   \t\t{set tipopl to \"Señales de Superficie Humanas\"}\r\n\t\t|elif signal.source = \"Señal de Superficie Zargoide\":\r\n\t   \t\t{set tipopl to \"Señales de Superficie Zargoide\"}\r\n\t\t|elif signal.source = \"Señal de Superficie Guardián\":\r\n\t   \t\t{set tipopl to \"Señales de Superficie Guardián\"}\r\n\t\t}\r\n\r\n\t\t{if signal.amount > 1:\r\n\t   \t\t{set surfacesignals_desc to cat(signal.amount, \" \", tipopl)}\r\n\t   \t\t{set s to \"s\"}\r\n\t   \t|else:\r\n\t    \t{set surfacesignals_desc to cat(signal.amount, \" \", signal.source)}\r\n\t    }\r\n\r\n\t\t{set surfacesignals to cat(surfacesignals, [surfacesignals_desc])}\r\n\t}\r\n\r\n\t{if len(surfacesignals) > 1: {set s to \"s\"}}\r\n\t{set body to BodyDetails(event.bodyname)}\r\n    {if body:\r\n        {OneOf(\"Detectada{s}\", \"Identificada{s}\")} {List(surfacesignals)} en {Occasionally(2, \"{creaArticulos(body.bodytype)}{el} {body.bodytype}\")} {P(body.shortname)}.\r\n    |else:\r\n        {OneOf(\"Detectada{s}\", \"Identificada{s}\")} {List(surfacesignals)}.\r\n    }\r\n\r\n\t\r\n\t\r\n}",
      "default": false,
      "includes": null
    },
    "Swapout check": {
      "name": "Swapout check",
      "description": "Comprueba si algún módulo de los instalados en la nave está disponible más barato en la ubicación actual",
      "enabled": true,
      "priority": null,
      "responder": true,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications and is not a specialized Guardian module}\r\n    {if !shipmodule.modified && find(module.edname, \"Guardian\") = -1:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price > 0 && (outfittingmodule.price < shipmodule.price):\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving... more than 2% of the ship value or more than 0.1% of the commander's credit balance}\r\n                {if (saving / ship.value) > 0.02 || (cmdr.credits > 0 && (saving / cmdr.credits) > 0.001):\r\n                \t{if find(saving,\"ón\",len(saving)-3)!=-1 || find(saving,\"nes\",len(saving)-4)!=-1 || find(saving,\"dio\",len(saving)-4)!=-1: {set de to \"de\"}}\r\n                \t{creaArticulos(shipmodule.name)}\r\n                    Puede ahorrar {saving} {de} créditos intercambiando {OneOf(\"aquí\", \"en esta estación\")} su{s} {shipmodule.name}.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Synthesised": {
      "name": "Synthesised",
      "description": "Se activa cuando se realiza alguna síntesis utilizando materiales",
      "enabled": true,
      "priority": 5,
      "responder": true,
      "script": "Síntesis completada.",
      "default": true,
      "includes": null
    },
    "System distance report": {
      "name": "System distance report",
      "description": "Función para informar sobre la distancia al sistema contextual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(GetState(\"eddi_context_selected_system_name\"))}\r\n\r\n{if !reportsystem.name || reportsystem.name = \"\":\r\n    No se de qué sistema me estás preguntando.\r\n|else:\r\n    La distancia al sistema {P(reportsystem.name, \"starsystem\")} es de {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} años luz.\r\n}",
      "default": false,
      "includes": null
    },
    "System faction changed": {
      "name": "System faction changed",
      "description": "Se activa cuando hay algún cambio en la facción que controla un sistema vigilado",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "System materials report": {
      "name": "System materials report",
      "description": "Report on the materials available from the contextual system",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from context _}\r\n{if GetState(\"eddi_context_system_name\"):\r\n    {set reportSystem to SystemDetails(GetState(\"eddi_context_system_name\"))}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{set bodyMaterials to []}\r\n{set signalMaterials to []}\r\n{set bodyDescriptions to []}\r\n{set signalDescriptions to []}\r\n{set volcanicBodies to []}\r\n\r\n{_ Define various functions to help with this script _}\r\n{set addBodyMaterial(details, bodyName) to:\r\n    {set bodyName to:\r\n        {if details.bodyname != details.bodyshortname: cuerpo} {details.bodyshortname}\r\n    }\r\n    {if has(bodyMaterials, bodyName):\r\n        {if find(bodyMaterials[bodyName], details.localizedName) = -1:\r\n            {set newMats to cat(bodyMaterials[bodyName], [details.localizedName])}      \r\n            {set bodyMaterials to union(bodyMaterials, [bodyName: newMats])}\r\n        }\r\n    |else:\r\n        {set bodyMaterials to union(bodyMaterials, [bodyName: [details.localizedName]])}\r\n    }\r\n}\r\n\r\n{set addSignalMaterial(materialName, signalSourceType) to:\r\n    {if has(signalMaterials, materialName):\r\n        {if find(signalMaterials[materialName], signalSourceType) = -1:\r\n            {set locations to cat(signalMaterials[materialName], [signalSourceType])}\r\n            {set signalMaterials to union(signalMaterials, [materialName:locations])}\r\n        }\r\n    |else:\r\n        {set signalMaterials to union(signalMaterials, [materialName: [signalSourceType]])}\r\n    }\r\n}\r\n\r\n{set isConcentrated(materialPresence) to:\r\n    {if (reportMatConc >= 0 && materialPresence.percentage >= materialPresence.definition.greatpctbody)\r\n      || (reportMatConc >= 1 && materialPresence.percentage >= materialPresence.definition.goodpctbody)\r\n      || (reportMatConc >= 2):\r\n        {return 1}\r\n    }\r\n    {return 0}\r\n}\r\n\r\n{set isSeleniumSpecialCase(materialPresence, bodyName) to:\r\n    {_ Special case Selenium, which is bugged to appear in crystalline fragments _}\r\n    {_ (i.e. with common elements) rather than crystalline shards (i.e. with rare elements) _}\r\n    {_ when surface prospecting geological sites _}\r\n    {if materialPresence.name = \"Selenium\" && volcanicBodies[bodyName]:\r\n        {set commonMaterialPercentages to 0}\r\n        {for m in volcanicBodies[bodyName].materials:\r\n            {_ Sum up the percentages of common elements so that we can _}\r\n            {_ calculate the relative chance of Selenium being present _}\r\n            {if m.definition.Rarity.invariantName = \"common\":\r\n                {set commonMaterialPercentages to commonMaterialPercentages + m.percentage}\r\n            }\r\n        }\r\n        {if reportMatConc >= 0 && materialPresence.percentage > commonMaterialPercentages:\r\n            {_ More than a 50% chance to drop Selenium from crystalline fragments _}\r\n            {return 1}    \r\n        |elif reportMatConc >= 1\r\n          && materialPresence.percentage > commonMaterialPercentages / 2:\r\n            {_ More than a 33% chance to drop Selenium from crystalline fragments _}\r\n            {return 1}    \r\n        }\r\n    }\r\n    {return 0}\r\n}\r\n\r\n{set isNeeded(invMaterial) to:\r\n    {if (reportMats >= 0 && invMaterial.minimum && invMaterial.amount < invMaterial.minimum)\r\n      || (reportMats >= 1 && invMaterial.desired && invMaterial.amount < invMaterial.desired)\r\n      || (reportMats >= 2):\r\n        {return 1}\r\n    }\r\n    {return 0}\r\n}\r\n\r\n{set materialInventory(materialName) to:\r\n    {for material in materials:\r\n        {if material.material = materialName:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{set getMaterialPresence(materialName, bodyName, reportSystem) to:\r\n    {for body in reportSystem.bodies:\r\n        {for materialPresence in body.materials:\r\n            {if body.name = bodyName && material.material = materialName: \r\n                {return materialPresence}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{_ Get information about populated system signal sources _}\r\n{if reportSystem.population > 0:\r\n    {set sigMaterials to []}\r\n    {set signalsType to [\"Emisiones codificadas\", \"Emisiones de alta calidad\"]}\r\n\r\n    {for sigType in signalsType:\r\n        {if sigType = \"Emisiones codificadas\":\r\n            {if reportSystem.Faction.Allegiance.invariantName = \"Federation\":\r\n                {set sigMaterials to cat(sigMaterials, [\"Compuestos con patente\"])}\r\n            }\r\n        |elif sigType = \"Emisiones de alta calidad\":\r\n            {if reportSystem.Faction.Allegiance.invariantName = \"Federation\":\r\n                {set sigMaterials to cat(sigMaterials, [\"Compuestos de Core Dynamics\"])}\r\n                {set sigMaterials to cat(sigMaterials, [\"Compuestos con patente\"])}\r\n            |elif reportSystem.Faction.Allegiance.invariantName = \"Empire\":\r\n                {set sigMaterials to cat(sigMaterials, [\"Escudos imperiales\"])}\r\n            }\r\n            {for faction in reportSystem.factions:\r\n                {for factionPresence in faction.presences:\r\n                    {if reportSystem.systemname = factionPresence.systemName && factionPresence.influence >= 25:\r\n                        {for factionState in factionPresence.ActiveStates:\r\n                            {if factionState.invariantName = \"Civil Unrest\":\r\n                                {set sigMaterials to cat(sigMaterials, [\"Componentes improvisados\"])}\r\n                            |elif factionState.invariantName = \"Civil War\" || factionState.invariantName = \"War\":\r\n                                {set sigMaterials to cat(sigMaterials, [\"Aleaciones de grado militar\", \r\n                                                                        \"Supercapacitadores militares\"])}\r\n                            |elif factionState.invariantName = \"Outbreak\":\r\n                                {set sigMaterials to cat(sigMaterials, [\"Aislantes farmacéuticos\"])}\r\n                            |elif factionState.invariantName = \"Boom\":\r\n                                {set sigMaterials to cat(sigMaterials, [\"Protorradiadores térmicos\",\r\n                                                                        \"Protoaleaciones ligeras\",\r\n                                                                        \"Aleaciones protorradiadas\"])}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        {_ Add material if it is 'needed' and the signal type is not already added for it _}\r\n        {for invariantMaterial in sigMaterials:\r\n            {set details to MaterialDetails(invariantMaterial)}\r\n            {if isNeeded(materialInventory(details.localizedName)):\r\n                {if !has(signalMaterials[details.localizedName], sigType):\r\n                     {addSignalMaterial(details.localizedName, sigType)}\r\n                }\r\n            }\r\n        }\r\n        {_ Reset sigMaterials array _}\r\n        {set sigMaterials to []}\r\n    }\r\n\r\n    {_ Reorganise signals array -> 'material':'sources' _}\r\n    {set signalsOrganised to []}\r\n    {for mat, sig in signalMaterials:\r\n        {set sig to List(sig)}\r\n        {set matList to []}\r\n        {if has(signalsOrganised, sig):\r\n            {set matList to cat(signalsOrganised[sig], [mat])}\r\n            {set signalsOrganised to union(signalsOrganised, [sig:matList])}\r\n        |else:\r\n            {set signalsOrganised to union(signalsOrganised, [sig:[mat]])}\r\n        }\r\n    }\r\n    {set signalMaterials to signalsOrganised}\r\n\r\n    {_ Sort materials into alphabetical order _}\r\n    {for signalType, mats in signalMaterials:\r\n        {set sortMats to []}\r\n        {for item in sort(mats):\r\n            {set sortMats to cat(sortMats, [item])}\r\n        }\r\n    \t{set signalDescriptions to cat(signalDescriptions, [cat(OneOf('es posible encontrar ', 'pueden encontrarse ', 'se pueden encontrar ', 'podemos encontrar ', 'quizás encontremos '), List(sortMats),\r\n                                       \" en señales de \", signalType)])}\r\n\t}\r\n}\r\n\r\n{if hasSRV:\r\n\r\n    {_ Get information about volcanic bodies in the system }\r\n    {for reportbody in reportSystem.bodies:\r\n        {if reportbody.volcanism:\r\n            {set volcanicBodies to cat(volcanicBodies, [reportbody.name:[reportbody.volcanism]])}\r\n        }\r\n    }\r\n    \r\n    {_ Get information about body surface prospecting materials _}\r\n    {for material in reportSystem.surfaceelements:\r\n        {set detail to MaterialDetails(material, reportSystem.systemname)}\r\n        {if detail.bodyname:\r\n            {if isNeeded(materialInventory(detail.localizedName)):\r\n                {set materialPresence to getMaterialPresence(material.name, detail.bodyname, reportSystem)}\r\n                {if isConcentrated(materialPresence)\r\n                  || isSeleniumSpecialCase(materialPresence, detail.bodyname):\r\n                    {addBodyMaterial(detail)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {for bodyName, mats in bodyMaterials:\r\n        {_ Sort materials into alphanumerical order _}\r\n        {set sortMats to []}\r\n        {for item in sort(mats):\r\n            {set sortMats to cat(sortMats, [item])}\r\n        }\r\n        {set bodyDescriptions to cat(bodyDescriptions, [cat(\r\n            OneOf(\"Se ha encontrado\", \"se ha detectado\"), \" \",\r\n        \tList(sortMats),\r\n        \twhen(len(mats) > 1, OneOf(\"en abundancia\", \"en grandes cantidades\")),\r\n\t\t\t\" en \", P(bodyName, 'body')\r\n\t\t\t)])}\r\n    }\r\n\r\n    {_ Sort bodies into alphanumerical order _}\r\n    {declare check(a, b) as:\r\n        {set body1 to token(a, \" en \", 1)}\r\n        {set body2 to token(b, \" en \", 1)}\r\n        {return cmp(body1, body2)}\r\n    }\r\n    {set sortDesc to []}\r\n    {for item in sort(bodyDescriptions, check):\r\n        {set sortDesc to cat(sortDesc, [item])}\r\n    }\r\n    {set bodyDescriptions to cat(sortDesc)}\r\n}\r\n\r\n{if len(signalMaterials) > 0 && len(bodyMaterials) > 0:\r\n    {set break to OneOf(\". \", \". Adicionalmente, \", \". Además, \")}\r\n}\r\n\r\n{set descriptions to cat(List(signalDescriptions), break, List(bodyDescriptions))}\r\n{if len(descriptions) > 0:\r\n    {descriptions} de este sistema.\r\n}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "System report": {
      "name": "System report",
      "description": "Función para informar sobre los detalles del sistema estelar contextual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(GetState(\"eddi_context_system_system\"))}\r\n{_ Fetch from Context, if a context is set _}\r\n{if GetState(\"eddi_context_system_name\"):\r\n    {set reportSystem to SystemDetails(GetState(\"eddi_context_system_name\"))}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\":\r\n    No tengo la certeza sobre a qué sistema se refiere\r\n|else:\r\n    {P(reportSystem.name, \"starsystem\")} es un sistema {Occasionally(2,\"estelar \")}\r\n    {if reportSystem.population && reportSystem.population > 0:\r\n        \r\n        {if reportSystem.allegiance = \"Federation\":\r\n            Federal\r\n        |elif reportSystem.allegiance = \"Empire\":\r\n            Imperial\r\n        |else:\r\n            independiente\r\n        }\r\n        {Occasionally(2, Pause(80))}\r\n        {if reportSystem.security = \"Alto\":\r\n            {OneOf(\"con mucha seguridad\", \"muy bien regulado\")}\r\n        |elif reportSystem.security = \"Bajo\":\r\n            {OneOf(\"con muy poco movimiento policial\", \"con escasa seguridad\")}\r\n        |elif reportSystem.security = \"Anárquico\":\r\n            {OneOf(\"muy inseguro\", \"sin policía\")}\r\n        |else: {set normsec to 1}\r\n        }\r\n\t\t{if normsec != 1: {Occasionally(2, Pause(80))}, }\r\n\t\t{set de to \"\"}\r\n        {OneOf(\"de\", \"con una población de\", \"que acoje a\")}\r\n        {if rand(2):\r\n            {SetState('shirka_context_last_word_feminine', true)}\r\n        |else:\r\n            {SetState('shirka_context_last_word_feminine', false)}\r\n        }\r\n        {set popValue to humaniza(reportSystem.population)}\r\n        {popValue} {de} {if GetState('shirka_context_last_word_feminine'): personas |else: habitantes}\r\n        {if reportSystem.powerState.invariantName != \"None\":\r\n            {if reportSystem.powerState.invariantName = \"Home System\":\r\n                {if normsec != 1:. Además,|else:, y} es el hogar de {P(reportsystem.power)}\r\n            |elif reportSystem.powerState.invariantName = \"Control\":\r\n                {if normsec != 1:. Además,|else:, y} está {OneOf(\"alineado con\", \"aliado con\", \"controlado por\")} {P(reportSystem.power)}\r\n            |elif reportSystem.powerState.invariantName = \"Exploited\":\r\n                {if normsec != 1:. Además,|else:, y} está {OneOf(\"siendo explotado por\", \"bajo la influencia de\")} {P(reportSystem.power)}\r\n            |elif reportSystem.powerState.invariantName = \"Contested\":\r\n                {if normsec != 1:. Además,|else:, y} está disputado por varias potencias\r\n            }\r\n        }.\r\n\r\n        {if reportSystem.faction:\r\n          {P(reportSystem.faction)} es la {OneOf(\"potencia\", \"facción\")} {OneOf(\"dominante\", \"local\", \"que gobierna\")}.\r\n        }\r\n\r\n        {if len(reportSystem.stations) = 0:\r\n        \tNo hay ninguna estación presente\r\n        |else:\r\n        \t{set report to []}\r\n        \t{if len(reportSystem.orbitalstations):\r\n        \t\t{if len(reportSystem.orbitalstations) > 1:\r\n        \t\t\t{set report to cat(report, [cat(len(reportSystem.orbitalstations), \" estaciones orbitales\")])}\r\n        \t\t|else:\r\n        \t\t\t{set report to cat(report, [cat(OneOf('una sola', 'solo una', 'una solitaria', 'una'), \" estación orbital\")])}\r\n        \t\t}\r\n        \t}\r\n        \t{if len(reportSystem.planetarystations):\r\n        \t\t{if len(reportSystem.planetarystations) > 1:\r\n        \t\t\t{set report to cat(report, [cat(len(reportSystem.planetarystations), \" estaciones planetarias\")])}\r\n        \t\t|else:\r\n        \t\t\t{set report to cat(report, [cat(OneOf(\"una sola\", \"solo una\", \"una solitaria\", \"una\"), \" estación planetaria\")])}\r\n        \t\t}\r\n        \t}\r\n        \tHay {List(report)} en este sistema\r\n        }\r\n    |else:\r\n       {OneOf(\"inhabitado\",\"despoblado\",\"sin habitantes\",\"sin ningún habitante\",\"sin ninguna población\")}\r\n   }.\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "System scan complete": {
      "name": "System scan complete",
      "description": "Se activa al completar el escaneo de un sistema estelar",
      "enabled": true,
      "priority": 4,
      "responder": true,
      "script": "{_ Fetch from Context, if a context is set _}\r\n{if GetState(\"eddi_context_system_name\"):\r\n    {set reportSystem to SystemDetails(GetState(\"eddi_context_system_name\"))}\r\n|else:\r\n    {set reportSystem to SystemDetails(event.systemname)}\r\n}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\":\r\n    No se a que sistema se refiere.\r\n|else:\r\n\t{if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n\r\n    \t{if reportBodiesToMap:\r\n            {set bodiesToMap to F(\"Bodies to map\")}\r\n            {if bodiesToMap: {Pause(600)}{bodiesToMap}}\r\n        }\r\n\r\n    \t{if hasSRV:\r\n    \t    {if system.isgold:\r\n    \t        {if reportGoldSystems:\r\n    \t            Este sistema {Occasionally(2, \"estelar\")}\r\n    \t            {OneOf(\"contiene\", \"tiene\", \"alberga\")}\r\n    \t            todos los elementos \r\n    \t            {OneOf(\"recolectables\", \"posibles\", \"disponibles\", \"conocidos\", \"\")}\r\n    \t            {OneOf(\"en superficies planetarias.\", \"en prospecciones de superficie.\")}\r\n    \t            {Occasionally(2, \"Categoría de exploración: Oro.\")}\r\n    \t        }\r\n    \t    |elif system.isgreen:\r\n    \t        {if reportGreenSystems:\r\n    \t            Este sistema {Occasionally(2, \"estelar\")}\r\n    \t            {OneOf(\"contiene\", \"tiene\", \"alberga\")}\r\n    \t            todos los elementos \r\n    \t            {Occasionally(2, \"que se requieren\")} \r\n    \t            para {Occasionally(2, \"sintetizar yumpónium {set jumponium to true}\")}\r\n    \t            {OneOf(\"{if jumponium: y} aumentar\", \"{if jumponium: e} incrementar\")} el {Occasionally(2, \"rango de\")} salto de {OneOf(\"esta nave\", \"la {ShipName()}\")}.\r\n    \t            {Occasionally(2, \"Categoría de exploración: Verde.\")}\r\n    \t        }\r\n    \t    }\r\n    \t    {if reportMaterials && reportSystem.totalbodies <= len(reportSystem.bodies):\r\n                {set materialsReport to F(\"System materials report\")}\r\n                {if materialsReport: {materialsReport}}\r\n            }\r\n    \t}\r\n    }\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "System state changed": {
      "name": "System state changed",
      "description": "Se activa cuando hay un cambio en el estado de un sistema vigilado",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'system')}\n{SetState('eddi_context_last_action', 'change_state')}\n{SetState('eddi_context_system', event.system)}\n\n{_ Set up our system name}\n{if event.system = homesystem.name:\n  {set system to OneOf('{P(event.system, \"starsystem\")}',\n                       'Tu sistema hogar')}\n|elif event.system = system.name:\n  {set system to OneOf('{P(event.system, \"starsystem\")}',\n                       'Este sistema')}\n|else:\n  {set system to OneOf('{P(event.system, \"starsystem\")}'\n                       'El sistema {P(event.system, \"starsystem\")}'))}\n}\n\n{if event.newstate != 'None':\n  {_ System has entered a new state}\n  {OneOf('Las transmisiones locales informan que', 'Información. ', 'Transmisión interceptada. Informan que ')}\n  {if event.newstate = 'Boom':\n    {OneOf('{system} está experimentando un auge comercial',\n           '{system} está entrando en un período de mayor éxito comercial')}\n  |elif event.newstate = 'Bust':\n    {system} está experimentando dificultades económicas\n  |elif event.newstate = 'Civil Unrest':\n    {OneOf('{system} está experimentando disturbios civiles',\n           'hay disturbios en el {system} system')}\n  |elif event.newstate = 'Civil War':\n    {OneOf('{system} está en guerra con otra facción en el mismo sistema',\n           'una guerra civil estalló en {system}',\n           '{system} ha caído en una guerra civil',\n           'han estallado hostilidades en {system}')}\n  |elif event.newstate = 'Election':\n    {system} está pasando por elecciones\n  |elif event.newstate = 'Expansion':\n    {OneOf(\"una facción en {system} está intentando expandirse a un sistema vecino\",\n           \"una facción en {system} está preparándose para expandirse a un sistema vecino\")}\n  |elif event.newstate = 'Famine':\n    {system} está sufriendo hambruna\n  |elif event.newstate = 'Investment':\n    En {system} la facción controladora está invirtiendo fuertemente en su infraestructura local\n  |elif event.newstate = 'Lockdown':\n    {system} ha aumentado la seguridad debido a un bloqueo por parte de la facción dominante\n  |elif event.newstate = 'Outbreak':\n    {system} sufre de un brote de enfermedad contagiosa\n  |elif event.newstate = 'Retreat':\n    La facción que controla {system} se está retirando de un sistema vecino\n  |elif event.newstate = 'War':\n    {system} ahora está en guerra con un sistema vecino\n  |else:\n   {OneOf('{system} ha entrado en {event.state}',\n           '{system} ahora está en {event.state}')}\n  }.\n}\n",
      "default": false,
      "includes": null
    },
    "System state report": {
      "name": "System state report",
      "description": "Informa sobre el estado actual del sistema contextual",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_ Fetch from Context, if a context is set _}\r\n{if GetState(\"eddi_context_system_name\"):\r\n    {set reportSystem to SystemDetails(GetState(\"eddi_context_system_name\"))}\r\n|else:\r\n    {set reportSystem to SystemDetails(system.systemname)}\r\n}\r\n\r\n{if !reportSystem.name || reportSystem.name = \"\":\r\n    No tengo claro a que sistema se refiere.\r\n|else:\r\n\t{_ Report any ongoing conflicts _}\r\n    {set conflictfactions to []}\r\n    {if reportSystem.conflicts != null:\r\n        {for conflict in reportSystem.conflicts:\r\n        \t{set conflictnone to 0}\r\n            {P(conflict.faction1, \"faction\")}\r\n\r\n            {if conflict.status = \"active\":\r\n                {OneOf(\"está\", \"va\")}\r\n            |elif conflict.status = \"pending\":\r\n                pronto estará\r\n            |else:\r\n            \t{set conflictnone to 1}\r\n                se está recuperando \r\n            }\r\n           \t{if conflict.status != \"pending\":\r\n            \t{if conflict.faction1dayswon > conflict.faction2dayswon:\r\n\t               {if conflict.margin >= 3:\r\n    \t               {if conflictnone: de dominar |else: dominando}\r\n    \t           |elif conflict.margin = 2:\r\n    \t               {if conflictnone: de ganar |else: ganando}\r\n    \t           |else:\r\n    \t               {if conflictnone: de una ajustada victoria |else: en cabeza}\r\n    \t           }\r\n    \t        |elif conflict.faction2dayswon > conflict.faction1dayswon:\r\n    \t           {if conflict.margin >= 2:\r\n    \t               {if conflictnone: de haber perdido |else: perdiendo}\r\n    \t           |else:\r\n    \t               {if conflictnone: de una apretada derrota | else: a la cola}\r\n    \t           }\r\n    \t        |else:\r\n    \t           {if conflictnone:de ir }empatado\r\n    \t        }\r\n    \t        {conflict.faction1dayswon} a {conflict.faction2dayswon}\r\n    \t    }\r\n\r\n\t\t\t{creaArticulos(conflict.state)}\r\n\r\n            en un{o}{s} {conflict.state} con {P(conflict.faction2, \"faction\")} {if conflict.stake: por el control de {P(conflict.stake, \"station\")}}.\r\n            {set conflictfactions to cat(conflictfactions, [conflict.faction1])}\r\n            {set conflictfactions to cat(conflictfactions, [conflict.faction2])}\r\n        }\r\n    }\r\n\r\n    {_ List our non-conflict faction states _}\r\n    {set otherstates to []}\r\n    {for faction in reportSystem.factions:\r\n        {if faction.influence > 0 && find(conflictfactions, faction.name) = -1:\r\n            {for presence in faction.presences:\r\n                {if presence.systemName = reportSystem.name:\r\n                    {if presence.FactionState.invariantName != \"None\":\r\n\r\n                        {_ Note our controlling faction, if present in our `otherstates` list. _}\r\n                        {if faction.name = reportSystem.faction:\r\n                            {set factions to token(factions, \"\", index, \"controlling \")}\r\n                        }\r\n\r\n                        {_ Add the faction to our list _}\r\n                        {if has(otherstates, presence.state):\r\n                            {set factions to otherstates[presence.state])}\r\n                            {set factions to cat(factions, \",\", P(faction.name, \"faction\"))}\r\n                            {set otherstates to union(otherstates, [presence.state: factions])}\r\n                        |else:\r\n                            {set otherstates to union(otherstates, [presence.state: P(faction.name, \"faction\")])}\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Sort from most factions with each state to least factions with each state. _}\r\n    {declare by_items(a, b) as:\r\n        {return cmp(len(split(b, \",\")), len(split(a, \",\")))}\r\n    }\r\n    {sort(otherstates, by_items)}\r\n\r\n    {_ Prepare summaries for each state _}\r\n    {set statesummaries to []}\r\n    {for state, factions in otherstates:\r\n\r\n        {set factions to split(factions, \",\")}\r\n\r\n        {set statesummary to:\r\n            {if len(factions) > 1:\r\n                las facciones {List(factions)} están\r\n            |else:\r\n                la facción {factions[0]} está\r\n            }\r\n            {if state = \"Retirada\":\r\n                en retirada\r\n            |elif state = \"Guerra\":\r\n                en guerra\r\n            |elif state = \"Auge\":\r\n                experimentando un auge económico; podría hacer buenos negocios con ellos\r\n            |elif state = \"Libertad Civil\":\r\n                disfrutando de un período de mayor libertad civil\r\n            |elif state = \"Desórdenes públicos\":\r\n                experimentando disturbios civiles\r\n            |elif state = \"Guerra civil\":\r\n                en guerra civil\r\n            |elif state = \"Hambruna\":\r\n                {OneOf(\"sufriendo {Occasionally(2,'de')}\", \"pasando\")} {Occasionally(2, \"una\")} hambruna\r\n            |elif state = \"Bloqueo\":\r\n                en bloqueo\r\n            |elif state = \"Epidemia\":\r\n                tratando de contener  {OneOf(\"un brote de enfermedad\", \"una epidemia\")}\r\n            |elif state = \"Expansión\":\r\n                preparandose para expandirse a otro sistema\r\n            |elif state = \"Quiebra\":\r\n                {OneOf(\"en quiebra\",\"en crisis financiera\")}\r\n            |elif state = \"Elecciones\":\r\n                en periodo electoral\r\n            |elif state = \"Inversión\":\r\n                invirtiendo en infraestructuras\r\n            |elif state = \"Incursión\":\r\n                sufriendo una invasión alienígena. {Emphasize(\"¡Alerta!\",'strong')}\r\n            |elif state = \"Ataque Pirata\":\r\n                sufriendo ataques de piratas\r\n            |elif state = \"Plaga\":\r\n                sufriendo de una plaga de cultivos\r\n            |else: {_ catch-all, worded to avoid deciding between a/an}\r\n                en estado de {state}\r\n            }\r\n        }\r\n        {set statesummaries to cat(statesummaries, [statesummary])}\r\n    }\r\n\r\n    {_ Describe our non-conflict states _}\r\n    {if len(statesummaries) > 0:\r\n        {Pause(100)}\r\n        {List(statesummaries)}\r\n    }\r\n\r\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "TargetType": {
      "name": "TargetType",
      "description": "Get real target name (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Get real target name}\r\n{_ to use this function, set a variable to shiptype in the calling event}\r\n\r\n{if shiptype = \"Cobra Mk. III\":\r\n   {set shiptype to \"Cobra Mark 3\"}\r\n\r\n|elif shiptype = \"Cobra Mk. IV\":\r\n   {set shiptype to \"Cobra Mark 4\"} {_ this works}\r\n\r\n|elif shiptype = \"Krait Mk. II\":\r\n   {set shiptype to \"Krait Mark 2\"}\r\n\r\n|elif shiptype = \"Viper Mk. III\":\r\n   {set shiptype to \"Viper Mark 3\"}\r\n\r\n|elif shiptype = \"Viper Mk. IV\":\r\n   {set shiptype to \"Viper Mark 4\"} {_ this works}\r\n\r\n|elif shiptype = \"$ShipName_Military_Alliance;\":\r\n   {set shiptype to \"the Alliance Defence Force\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Empire;\":\r\n   {set shiptype to \"the Imperial Navy\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Federation;\":\r\n   {set shiptype to \"the Federal Navy\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Independent;\":\r\n   {set shiptype to \"the System Defence Force\"}\r\n\r\n}\r\n",
      "default": true,
      "includes": null
    },
    "Technology broker": {
      "name": "Technology broker",
      "description": "Se activa cuando se utiliza el Broker de Tecnología para desbloquear nuevos elementos",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "test": {
      "name": "test",
      "description": "script para testear resultados",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{reemplazaTexto(\"Bienvenido CMDT Transcan\", \"CMDT\", \"Comandante\")}\r\n",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "TextWisdom": {
      "name": "TextWisdom",
      "description": "Random wisdom of the day (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ TextWisdom}\r\n{_ Random wisdom of the day}\r\n{_ Choose a random option until all are used, then reset}\r\n{_ From an idea put to me by Brigetiol1. Thanks!}\r\n\r\nSabiduría diaria. Aquí, en radio Shirka.\r\n\r\n{Pause(300)}\r\n\r\n{_ check Wisdom string is long, else run string setup (just in case it hasn't already been setup)}\r\n{if len(GetState(\"wisdomstring\")) < 10:\r\n\r\n    {set wisdomstring to [\r\n        \"La mejor manera de encontrarse a uno mismo es perderse al servicio a los demás\",\r\n        \"Debes ser el cambio que deseas ver en el mundo\",\r\n        \"Vive como si fueras a morir mañana. Aprende como si fueras a vivir para siempre\",\r\n        \"Primero te ignoran, luego se ríen de ti, luego te combaten, luego ganas\",\r\n        \"Los débiles nunca pueden perdonar. El perdón es el atributo de los fuertes\",\r\n        \"La felicidad es cuando lo que piensas, lo que dices y lo que haces están en armonía\",\r\n        \"En la oración es mejor tener un corazón sin palabras que palabras sin corazón\",\r\n        \"La verdad se mantiene, aunque no haya apoyo público. Se sostiene por sí sola\",\r\n        \"La satisfacción está en el esfuerzo, no en el logro, el esfuerzo pleno es la victoria plena\",\r\n        \"La verdad nunca daña una causa que es justa\",\r\n        \"El miedo tiene su utilidad pero la cobardía no\",\r\n        \"Nadie puede hacerme daño sin mi permiso\",\r\n        \"Mi vida es mi mensaje\",\r\n        \"Entrénate para dejar ir todo lo que temes perder\",\r\n        \"Locura: hacer una y otra vez lo mismo y esperar resultados diferentes\",\r\n        \"La diferencia entre la estupidez y la genialidad es que la genialidad tiene sus límites\",\r\n        \"Aprende del ayer, vive el hoy, espera el mañana\",\r\n        \"Una persona que nunca cometió un error nunca intentó nada nuevo\",\r\n        \"Si no puedes explicarlo de forma sencilla, no lo entiendes lo suficientemente bien\",\r\n        \"El misterio de la vida no es un problema a resolver, sino una realidad a experimentar\",\r\n        \"La mente ordena al cuerpo y este obedece. La mente se ordena a sí misma y encuentra resistencia\",\r\n        \"¡Intenta mirar hacia ese lugar donde no te atreves a mirar! Me encontrarás allí, mirándote fijamente\",\r\n        \"El miedo es el asesino de la mente\",\r\n        \"No te asustes\",\r\n        \"El sauce se somete al viento y prospera hasta que un día se convierte en muchos sauces: un muro contra el viento\",\r\n        \"No puedes hacer nada a prueba de idiotas porque los idiotas son muy ingeniosos\",\r\n        \"Bueno, el pasado ya pasó, eso lo sé. El futuro, aún no está aquí, sea lo que sea que vaya a ser. Así que, todo lo que hay, es, es esto. El presente. Eso es todo\",\r\n        \"Mira primero, piensa después, luego prueba. Pero siempre mira primero. De lo contrario, solo verás lo que esperabas\",\r\n        \"Se puede aprender mucho en el juego, que luego será útil cuando las circunstancias lo exijan\",\r\n        \"Estoy a favor de la verdad, no importa quién la diga. Estoy a favor de la justicia, no importa quién esté a favor o en contra de quién\",\r\n        \"Un sentido del humor bien desarrollado es el palo que añade equilibrio a tu paso mientras caminas por la cuerda floja de la vida\",\r\n        \"El conocimiento que está divorciado de la justicia, puede llamarse astucia en lugar de sabiduría\"\r\n    ]}\r\n    {SetState('wisdomstring', join(wisdomstring, \"+=\"))}\r\n}\r\n\r\n{set textstring to GetState(\"wisdomstring\")}\r\n\r\n{_ create array from the string, using += as the split marker}\r\n{set textarray to split(textstring, \"+=\")}\r\n\r\n{_ create array of unused quotes}\r\n{set temparray to []}\r\n{for check in textarray:\r\n   {set index to len(check)-5}\r\n   {set chk to slice(check, index, 5)}\r\n   {if chk != \" used\":\r\n       {set temparray to cat(temparray, [check])}\r\n   }\r\n}\r\n\r\n{_ if unused array is empty then rebuild and reset all items}\r\n{if len(temparray) = 0:\r\n   {set temparray to []}\r\n   {for check in textarray:\r\n      {set index to len(check)-5}\r\n      {set chk to slice(check, 0, index)}\r\n      {set temparray to cat(temparray, [chk])}\r\n   }\r\n   {set textstring to join(temparray, \"+=\")}\r\n   {set textarray to split(textstring, \"+=\")}\r\n}\r\n\r\n{_ get a random unused item and say it}\r\n{set random to rand(len(temparray))}\r\n{set used to temparray[random]}\r\n{used}\r\n\r\n{_ find position of used item in text array}\r\n{set position to find(textarray, used)}\r\n\r\n{_ mark item as used}\r\n{set useditem to cat(used, \" used\")}\r\n\r\n{_ rebuild text array with marked item}\r\n{set temparray to []}\r\n{set cur to 0}\r\n{while cur < len(textarray):\r\n  {if cur = position:\r\n     {set temparray to cat(temparray, [useditem])}\r\n  |else:\r\n     {set temparray to cat(temparray, [textarray[cur]])}\r\n  }\r\n  {set cur to cur + 1}\r\n}\r\n\r\n{_ rebuild text string ready for next use}\r\n{SetState('wisdomstring', join(temparray, \"+=\"))}\r\n",
      "default": false,
      "includes": null
    },
    "Timer": {
      "name": "Timer",
      "description": "Reports time between executions of this script (TEST)",
      "enabled": true,
      "priority": null,
      "responder": false,
      "script": "{_Shirka}\r\n\r\n{_ Reports time between executions of this script. _}\r\n{_ Currently set to report time spent in a system _}\r\n{_ when called from FSD Engaged event. _}\r\n\r\n{_ Get and format timer }\r\n{set rawtime to abs(SecondsSince(GetState(\"timer\")))}\r\n{set timer to split(format(rawtime, \"dl:dd:HH:mm:ss\"), \":\")}\r\n\r\n{set days to cast(timer[0], \"n\") - 1}\r\n{set hours to cast(timer[1], \"n\")}\r\n{set minutes to cast(timer[2], \"n\")}\r\n{set seconds to cast(timer[3], \"n\")}\r\n\r\n{set timer_array to []}\r\n\r\n{if days > 0:\r\n    {set time to cat(days, \" día\")}\r\n    {if days > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if hours > 0:\r\n    {set time to cat(hours, \" hora\")}\r\n    {if hours > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if minutes > 0:\r\n    {set time to cat(minutes, \" minuto\")}\r\n    {if minutes > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if seconds > 0:\r\n    {set time to cat(seconds, \" segundo\")}\r\n    {if seconds > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\nHas estado {List(timer_array)} en este sistema.\r\n\r\n{SetState('timer', SecondsSince(0))}\r\n",
      "default": false,
      "includes": null
    },
    "Touchdown": {
      "name": "Touchdown",
      "description": "Se activa cuando su nave aterriza en la superficie de un planeta",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Touchdown _}\n{_ Triggered when your ship touches down on a planet's surface _}\n{_ Context }\n{SetState('eddi_context_last_subject', 'ship')}\n{SetState('eddi_context_last_action', 'land')}\n{SetState('eddi_context_touchdown_body_name', event.bodyname)}\n\n{_ Fetch from context _}\n{set reportBody to BodyDetails(GetState(\"eddi_context_body_name\"), GetState(\"eddi_context_system_name\"))}\n{if !reportBody:\n    {set reportBody to BodyDetails(event.bodyname, event.systemname)}\n}\n\n{if reportBody.shortname:\n\t{creaArticulos(reportBody.bodytype)}\n\t{set location to cat(\"en \", el, \" \", reportBody.bodytype, \" \", P(reportBody.shortname, 'body'))}\n}\n{if GetState(\"eddi_context_last_subject\") != \"location\":\n    {if event.playercontrolled = true:\n        {set report to cat(Pause(1000), \"Hemos aterrizado \", location)}\n    |else:\n        {set report to cat(Pause(1000), ShipName(), \" ha aterrizado \", location)}\n    }\n}\n\n{if reportCoordinates && type(event.latitude) != \"void\" && type(event.longitude) != \"void\" :\n   {set random to rand(4)}\n\t{if random = 0:\n\t\t{set report to cat(report, Pause(250), \". Las coordenadas \", Occasionally(2, 'actuales'), \" son:\")}\n\t|elif random = 1:\n\t\t{set report to cat(report, Pause(100), \" en las coordenadas:\")}\n\t|elif random = 2:\n\t\t{set report to cat(report, Pause(250), \". La posición \", Occasionally(2, 'actual'), \" es:\")}\n\t|else:\n\t\t{set report to cat(report, Pause(100), \" en la posición:\")}\n\t}\n\t\n\t{set report to cat(report, humaniza(round(event.latitude, 1)), \" grados de latitud, y \", humaniza(round(event.longitude, 1)), \" grados de longitud\")}\n}\n{report}.\n\n{if reportTemperature && odyssey:\n    {_ Convert to desired temperature scale _}\n    {if reportTemperature = 1:\n        {set surfTemp to round(reportBody.temperature, 0)}\n        {set tempScale to \" Kelvin \"}\n    |elif reportTemperature = 2:\n        {set surfTemp to round(reportBody.temperature - 273.15, 0)}\n        {set tempScale to \" grados Celsius \"}\n    |elif reportTemperature = 3:\n        {set surfTemp to round((reportBody.temperature - 273.15) * 9 / 5 + 32, 0)}\n        {set tempScale to \" grados Fahrenheit \"}\n    }\n\n    {_ Report dangerous surface temperatures for on-foot expeditions _}\n    {set hazardousHighTemp to reportBody.temperature > 426}\n    {set hazardousLowTemp to reportBody.temperature < 150}\n    {if hazardousHighTemp || hazardousLowTemp:\n        Atención: Est{e} {reportBody.bodytype} tiene una temperatura {Occasionally(3, \"media\")}\n        {OneOf(\"superficial\", \"externa\")} {OneOf(\"peligrosamente\", \"extremadamente\")}\n        {if hazardousHighTemp: alta |else: baja } de {surfTemp} {tempScale}.\n    }\n}",
      "default": false,
      "includes": ".Preferencias; .Runtime"
    },
    "Trade data purchased": {
      "name": "Trade data purchased",
      "description": "Se activa cuando compra datos de comercio",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'tradedata')}\n{SetState('eddi_context_last_action', 'buy')}\n{SetState('eddi_context_tradedata_name', event.system)}\n\n{OneOf(\"Adquiridos datos de comercio del sistema {event.system}\",\n            \"Datos comerciales del sistema {event.system} disponibles\",\"Datos comerciales del sistema {event.system} recibidos correctamente\"\n            \"Recibidos datos comerciales del sistema {event.system} desde los servicios de la estación\",\n            \"Recepción de datos comerciales del sistema {event.system} confirmada\")}.",
      "default": true,
      "includes": null
    },
    "Trade voucher redeemed": {
      "name": "Trade voucher redeemed",
      "description": "Se activa cuando canjea un bono comercial",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de comercio\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de la facción {event.rewards[0].faction}\r\n  |else:\r\n    por parte de \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": true,
      "includes": null
    },
    "Under attack": {
      "name": "Under attack",
      "description": "Se activa cuando está siendo atacado (al mismo tiempo que el mensaje de voz de Bajo Ataque)",
      "enabled": true,
      "priority": 1,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Undocked": {
      "name": "Undocked",
      "description": "Se activa cuando su nave despega de una estación espacial o puesto avanzado",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if vehicle != \"Taxi\":\n\t{OneOf(\"Reestablecido control completo\", \"Anclajes de aterrizaje desconectados\", \"Desconectado de redes locales\")}.\n\n\t{set limpetcheck to F(\"Limpet check\")}\n\n\t{if limpetcheck:\n    \t{Pause(5000)}\n    \t{limpetcheck}\n\t}\n}",
      "default": false,
      "includes": null
    },
    "VA initialized": {
      "name": "VA initialized",
      "description": "Se activa cuando se inicializa el plugin de Voice Attack",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "includes": null
    },
    "Vehicle destroyed": {
      "name": "Vehicle destroyed",
      "description": "Se activa cuando su vehículo ha resultado destruido",
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if GetState(\"eddi_context_srv_deployed_id\") = event.id:\n    {SetState('eddi_context_srv_deployed_id', \"\")}\n}\n\n{Pause(2000)}\n{OneOf(\"Enlace neuronal\", \"Enlace\", \"Nexo\", \"Vínculo\")} {OneOf(\"finalizado\", \"desactivado\")}.",
      "default": false,
      "includes": null
    }
  }
}
